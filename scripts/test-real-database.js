// C·∫•u h√¨nh Redis cho test
process.env.REDIS_URL = 'redis://localhost:6379';

const HourlyValueService = require('../dist/services/hourly-value.service').default;
const redisClient = require('../dist/utils/redis').default;
const prisma = require('../dist/config/database').default;

/**
 * Script test l∆∞u v√†o database TH·∫¨T (kh√¥ng mock)
 * Ch·∫°y: node scripts/test-real-database.js
 */

async function testRealDatabase() {
  console.log('üöÄ Testing REAL Database Save...\n');
  console.log('üîó Redis URL:', process.env.REDIS_URL, '\n');

  try {
    // Ki·ªÉm tra k·∫øt n·ªëi Redis
    await redisClient.ping();
    console.log('‚úÖ Redis connection successful\n');

    // Ki·ªÉm tra device c√≥ t·ªìn t·∫°i kh√¥ng
    const TEST_DEVICE_SERIAL = 'SERL12JUN2501JXHMC17J1RPRY7P063E';
    const device = await prisma.devices.findUnique({
      where: { serial_number: TEST_DEVICE_SERIAL, is_deleted: false },
      select: { serial_number: true, space_id: true }
    });

    if (!device) {
      console.log('‚ùå Device not found in database!');
      console.log('Available devices:');
      const allDevices = await prisma.devices.findMany({
        where: { is_deleted: false },
        select: { serial_number: true, space_id: true },
        take: 5
      });
      console.log(allDevices);
      return;
    }

    console.log('‚úÖ Device found:', device);

    const hourlyValueService = new HourlyValueService();

    // G·ª≠i ƒë·ªß samples ƒë·ªÉ ho√†n th√†nh 1 gi·ªù (5 ph√∫t * 6 samples = 30 samples)
    // ƒê·ªÉ test nhanh, ta ch·ªâ c·∫ßn 5 ph√∫t ho√†n th√†nh
    const totalSamples = 30; // 5 minutes * 6 samples per minute
    console.log(`üì° Sending ${totalSamples} samples to complete 5 minutes...\n`);

    for (let i = 0; i < totalSamples; i++) {
      const temperature = 20 + Math.random() * 10; // 20-30¬∞C
      const humidity = 50 + Math.random() * 20; // 50-70%
      const gas = 0.05 + Math.random() * 0.1; // 0.05-0.15
      
      const sensorData = { temperature, humidity, gas };
      
      try {
        await hourlyValueService.processSensorData(TEST_DEVICE_SERIAL, sensorData);
        
        // Log progress
        if ((i + 1) % 6 === 0) {
          const minute = Math.floor((i + 1) / 6);
          console.log(`  üì° Completed minute ${minute}/5`);
          
          // Ki·ªÉm tra hour data
          const hourKey = `device:${TEST_DEVICE_SERIAL}:hour`;
          const hourData = await redisClient.get(hourKey);
          if (hourData) {
            const parsed = JSON.parse(hourData);
            console.log(`  üìä Hour count: ${parsed.count}/5`);
            
            if (parsed.count >= 5) {
              console.log('üéâ 5 MINUTES COMPLETED! Should save to database...');
            }
          }
        }
        
        // ƒê·ª£i 100ms gi·ªØa c√°c samples
        await new Promise(resolve => setTimeout(resolve, 100));
        
      } catch (error) {
        console.log(`  ‚ùå Error sending sample ${i + 1}:`, error.message);
      }
    }

    console.log(`\n‚úÖ Completed sending ${totalSamples} samples`);
    
    // ƒê·ª£i 1 gi√¢y ƒë·ªÉ ƒë·∫£m b·∫£o database operation ho√†n th√†nh
    await new Promise(resolve => setTimeout(resolve, 1000));
    
    // Ki·ªÉm tra database xem c√≥ record m·ªõi kh√¥ng
    console.log('\nüîç Checking database for new records...');
    const recentRecords = await prisma.hourly_values.findMany({
      where: { 
        device_serial: TEST_DEVICE_SERIAL,
        created_at: {
          gte: new Date(Date.now() - 5 * 60 * 1000) // last 5 minutes
        }
      },
      orderBy: { created_at: 'desc' },
      take: 5
    });

    console.log(`üìä Found ${recentRecords.length} recent records:`);
    recentRecords.forEach((record, index) => {
      console.log(`  ${index + 1}. ID: ${record.hourly_value_id}, Time: ${record.hour_timestamp}, Samples: ${record.sample_count}`);
      console.log(`     Values: ${JSON.stringify(record.avg_value)}`);
    });

    if (recentRecords.length > 0) {
      console.log('\nüéâ SUCCESS: Data was saved to real database!');
    } else {
      console.log('\n‚ö†Ô∏è  No new records found. Check if 5 minutes were completed.');
    }

    // Ki·ªÉm tra d·ªØ li·ªáu cu·ªëi c√πng trong Redis
    console.log('\nüîç Final Redis data...');
    const minuteKey = `device:${TEST_DEVICE_SERIAL}:minute`;
    const hourKey = `device:${TEST_DEVICE_SERIAL}:hour`;
    
    const minuteData = await redisClient.get(minuteKey);
    const hourData = await redisClient.get(hourKey);
    
    console.log('üìä Final minute data:', minuteData);
    console.log('üìä Final hour data:', hourData);

  } catch (error) {
    console.error('‚ùå Test failed:', error.message);
    console.error('Stack trace:', error.stack);
  } finally {
    // Cleanup
    try {
      const keys = await redisClient.keys(`device:${TEST_DEVICE_SERIAL}:*`);
      if (keys.length > 0) {
        await redisClient.del(...keys);
        console.log(`\nüßπ Cleaned up ${keys.length} test keys`);
      }
    } catch (error) {
      console.log('\n‚ö†Ô∏è  Could not cleanup test data:', error.message);
    }
    
    process.exit(0);
  }
}

// Ch·∫°y test
testRealDatabase(); 