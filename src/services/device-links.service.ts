import { PrismaClient } from '@prisma/client';
import { throwError, ErrorCodes } from '../utils/errors';
import { Server } from 'socket.io';

let io: Server | null = null;

export function setSocketInstance(socket: Server) {
    io = socket;
}

export interface DeviceLinkInput {
    input_device_id: string;
    output_device_id: string;
    value_active: string;
    logic_operator?: 'AND' | 'OR';
    component_id?: string;
    output_action?: 'turn_on' | 'turn_off';
    output_value?: string; // Th√™m field ƒë·ªÉ set gi√° tr·ªã cho output
}

export interface DeviceLinkUpdate {
    value_active?: string;
    logic_operator?: 'AND' | 'OR';
    component_id?: string;
    output_action?: 'turn_on' | 'turn_off';
    output_value?: string; // Th√™m field ƒë·ªÉ set gi√° tr·ªã cho output
}

export interface DeviceLink {
    id: number;
    input_device_id: string;
    output_device_id: string;
    component_id: string;
    value_active: string;
    logic_operator: 'AND' | 'OR';
    output_action: 'turn_on' | 'turn_off';
    output_value?: string; // Th√™m field ƒë·ªÉ set gi√° tr·ªã cho output
    created_at: Date | null;
    updated_at: Date | null;
    deleted_at: Date | null;
    input_device?: any;
    output_device?: any;
    component?: any;
}

// Predefined output values (d·ªØ li·ªáu c·ª©ng theo y√™u c·∫ßu)
export const PREDEFINED_OUTPUT_VALUES = {
    light_brightness: [
        { label: 'ƒê·ªô s√°ng th·∫•p (25%)', value: '25' },
        { label: 'ƒê·ªô s√°ng trung b√¨nh (50%)', value: '50' },
        { label: 'ƒê·ªô s√°ng cao (75%)', value: '75' },
        { label: 'ƒê·ªô s√°ng t·ªëi ƒëa (100%)', value: '100' }
    ],
    alert_mode: [
        { label: 'C·∫£nh b√°o nh·∫π', value: 'low_alert' },
        { label: 'C·∫£nh b√°o trung b√¨nh', value: 'medium_alert' },
        { label: 'C·∫£nh b√°o cao', value: 'high_alert' },
        { label: 'C·∫£nh b√°o kh·∫©n c·∫•p', value: 'emergency_alert' }
    ]
};

class DeviceLinksService {
    private prisma: PrismaClient;

    constructor() {
        this.prisma = new PrismaClient();
    }

    /**
     * T·∫°o li√™n k·∫øt m·ªõi gi·ªØa c√°c thi·∫øt b·ªã
     */
    async createDeviceLink(input: DeviceLinkInput, accountId: string): Promise<DeviceLink> {
        // Ki·ªÉm tra quy·ªÅn truy c·∫≠p c·∫£ input v√† output device
        await this.checkDevicePermission(input.input_device_id, accountId);
        await this.checkDevicePermission(input.output_device_id, accountId);

        // Ki·ªÉm tra device t·ªìn t·∫°i
        const inputDevice = await this.prisma.devices.findFirst({
            where: { device_id: input.input_device_id, is_deleted: false }
        });
        const outputDevice = await this.prisma.devices.findFirst({
            where: { device_id: input.output_device_id, is_deleted: false }
        });

        if (!inputDevice) throwError(ErrorCodes.NOT_FOUND, "Input device not found");
        if (!outputDevice) throwError(ErrorCodes.NOT_FOUND, "Output device not found");

        // Kh√¥ng cho ph√©p t·ª± li√™n k·∫øt v·ªõi ch√≠nh n√≥
        if (input.input_device_id === input.output_device_id) {
            throwError(ErrorCodes.BAD_REQUEST, "Device cannot link to itself");
        }

        // Ki·ªÉm tra link ƒë√£ t·ªìn t·∫°i
        const existingLink = await this.prisma.device_links.findFirst({
            where: {
                input_device_id: input.input_device_id,
                output_device_id: input.output_device_id,
                component_id: input.component_id,
                deleted_at: null
            }
        });

        if (existingLink) {
            throwError(ErrorCodes.BAD_REQUEST, "Device link already exists");
        }

        const deviceLink = await this.prisma.device_links.create({
            data: {
                input_device_id: input.input_device_id,
                output_device_id: input.output_device_id,
                component_id: input.component_id || '',
                value_active: input.value_active,
                logic_operator: input.logic_operator || 'AND',
                output_action: input.output_action || 'turn_on',
                output_value: input.output_value || '', // Th√™m output_value
                created_at: new Date(),
                updated_at: new Date()
            },
            include: {
                input_device: true,
                output_device: true
            }
        });

        return this.mapPrismaDeviceLinkToDeviceLink(deviceLink);
    }

    /**
     * L·∫•y t·∫•t c·∫£ links c·ªßa m·ªôt account
     */
    async getDeviceLinksByAccount(accountId: string): Promise<DeviceLink[]> {
        // L·∫•y t·∫•t c·∫£ device c·ªßa account
        const userDevices = await this.prisma.devices.findMany({
            where: { account_id: accountId, is_deleted: false },
            select: { device_id: true }
        });

        const deviceIds = userDevices.map(d => d.device_id);

        const links = await this.prisma.device_links.findMany({
            where: {
                OR: [
                    { input_device_id: { in: deviceIds } },
                    { output_device_id: { in: deviceIds } }
                ],
                deleted_at: null
            },
            include: {
                input_device: {
                    select: {
                        device_id: true,
                        serial_number: true,
                        name: true,
                        current_value: true
                    }
                },
                output_device: {
                    select: {
                        device_id: true,
                        serial_number: true,
                        name: true,
                        power_status: true,
                        attribute: true
                    }
                },
                component: {
                    select: {
                        component_id: true,
                        name: true,
                        datatype: true,
                        unit: true,
                        flow_type: true
                    }
                }
            },
            orderBy: { created_at: 'desc' }
        });

        return links.map(link => this.mapPrismaDeviceLinkToDeviceLink(link));
    }

    /**
     * L·∫•y links theo output device
     */
    async getLinksByOutputDevice(outputDeviceId: string): Promise<DeviceLink[]> {
        const links = await this.prisma.device_links.findMany({
            where: {
                output_device_id: outputDeviceId,
                deleted_at: null
            },
            include: {
                input_device: {
                    select: {
                        device_id: true,
                        serial_number: true,
                        name: true,
                        current_value: true
                    }
                },
                output_device: {
                    select: {
                        device_id: true,
                        serial_number: true,
                        name: true,
                        power_status: true,
                        attribute: true
                    }
                },
                component: {
                    select: {
                        component_id: true,
                        name: true,
                        datatype: true,
                        unit: true,
                        flow_type: true
                    }
                }
            }
        });

        return links.map(link => this.mapPrismaDeviceLinkToDeviceLink(link));
    }

    /**
     * C·∫≠p nh·∫≠t device link
     */
    async updateDeviceLink(linkId: number, input: DeviceLinkUpdate, accountId: string): Promise<DeviceLink> {
        const existingLink = await this.prisma.device_links.findFirst({
            where: { id: linkId, deleted_at: null }
        });

        if (!existingLink) {
            throwError(ErrorCodes.NOT_FOUND, "Device link not found");
        }

        // Ki·ªÉm tra quy·ªÅn truy c·∫≠p
        await this.checkDevicePermission(existingLink!.input_device_id, accountId);
        await this.checkDevicePermission(existingLink!.output_device_id, accountId);

        const updatedLink = await this.prisma.device_links.update({
            where: { id: linkId },
            data: {
                ...input,
                updated_at: new Date()
            },
            include: {
                input_device: true,
                output_device: true
            }
        });

        return this.mapPrismaDeviceLinkToDeviceLink(updatedLink);
    }

    /**
     * X√≥a device link
     */
    async deleteDeviceLink(linkId: number, accountId: string): Promise<void> {
        try {
            const existingLink = await this.prisma.device_links.findFirst({
                where: { id: linkId, deleted_at: null }
            });

            if (!existingLink) {
                throwError(ErrorCodes.NOT_FOUND, "Device link not found");
            }

            // Ki·ªÉm tra quy·ªÅn truy c·∫≠p
            await this.checkDevicePermission(existingLink!.input_device_id, accountId);
            await this.checkDevicePermission(existingLink!.output_device_id, accountId);

            await this.prisma.device_links.update({
                where: { id: linkId },
                data: {
                    deleted_at: new Date()
                }
            });

            return;
        } catch (error) {
            throwError(ErrorCodes.NOT_FOUND, "Xo√° li√™n k·∫øt th·∫•t b·∫°i");
        }
        

    }

    /**
     * X·ª≠ l√Ω logic trigger khi device value thay ƒë·ªïi
     */
    async processDeviceLinks(deviceId: string, currentValue: any): Promise<void> {
        try {
            console.log('üîç [DeviceLinks] Processing device links for device:', deviceId);
            console.log('üìä [DeviceLinks] Current value received:', JSON.stringify(currentValue, null, 2));
            
            // L·∫•y t·∫•t c·∫£ links c√≥ input_device_id l√† deviceId
            const inputLinks = await this.prisma.device_links.findMany({
                where: {
                    input_device_id: deviceId,
                    deleted_at: null
                },
                include: {
                    input_device: true,
                    output_device: true
                }
            });

            console.log(`üîó [DeviceLinks] Found ${inputLinks.length} input links for device ${deviceId}`);
            
            if (inputLinks.length === 0) {
                console.log('‚ö†Ô∏è  [DeviceLinks] No input links found, exiting');
                return;
            }

            // Log chi ti·∫øt t·ª´ng link
            inputLinks.forEach((link, index) => {
                console.log(`üîó [DeviceLinks] Link ${index + 1}:`, {
                    id: link.id,
                    component_id: link.component_id,
                    value_active: link.value_active,
                    logic_operator: link.logic_operator,
                    output_action: link.output_action,
                    output_value: link.output_value,
                    output_device_name: link.output_device?.name
                });
            });

            // Group links by output device ƒë·ªÉ x·ª≠ l√Ω logic AND/OR
            const linksByOutput = new Map<string, any[]>();
            for (const link of inputLinks) {
                const outputId = link.output_device_id;
                if (!linksByOutput.has(outputId)) {
                    linksByOutput.set(outputId, []);
                }
                linksByOutput.get(outputId)!.push(link);
            }

            console.log(`üéØ [DeviceLinks] Processing ${linksByOutput.size} output devices`);

            // X·ª≠ l√Ω t·ª´ng output device
            for (const [outputDeviceId, links] of linksByOutput) {
                console.log(`‚öôÔ∏è [DeviceLinks] Processing output device: ${outputDeviceId}`);
                await this.processOutputDeviceLinks(outputDeviceId, links, deviceId, currentValue);
            }
        } catch (error) {
            console.error('‚ùå [DeviceLinks] Error processing device links:', error);
        }
    }

    /**
     * X·ª≠ l√Ω links cho m·ªôt output device c·ª• th·ªÉ
     */
    private async processOutputDeviceLinks(
        outputDeviceId: string, 
        links: any[], 
        triggeredDeviceId: string, 
        currentValue: any
    ): Promise<void> {
        console.log(`üîç [ProcessOutput] Processing links for output device: ${outputDeviceId}`);
        console.log(`üîç [ProcessOutput] Triggered by device: ${triggeredDeviceId}`);
        
        // L·∫•y t·∫•t c·∫£ input devices cho output n√†y
        const allInputLinks = await this.prisma.device_links.findMany({
            where: {
                output_device_id: outputDeviceId,
                deleted_at: null
            },
            include: {
                input_device: {
                    select: {
                        device_id: true,
                        current_value: true
                    }
                }
            }
        });

        console.log(`üîó [ProcessOutput] Found ${allInputLinks.length} total input links for this output`);

        // Ki·ªÉm tra ƒëi·ªÅu ki·ªán cho t·ª´ng input
        const conditionResults = new Map<string, boolean>();
        
        for (const link of allInputLinks) {
            const inputDeviceId = link.input_device_id;
            let valueToCheck = link.input_device?.current_value;
            
            // N·∫øu l√† device v·ª´a update, d√πng currentValue m·ªõi
            if (inputDeviceId === triggeredDeviceId) {
                valueToCheck = currentValue;
                console.log(`üîÑ [ProcessOutput] Using NEW value for triggered device ${inputDeviceId}`);
            } else {
                console.log(`üìä [ProcessOutput] Using stored value for device ${inputDeviceId}`);
            }
            
            console.log(`üîç [ProcessOutput] Checking condition for link:`, {
                input_device_id: inputDeviceId,
                component_id: link.component_id,
                value_active: link.value_active,
                valueToCheck: JSON.stringify(valueToCheck, null, 2)
            });
            
            const conditionMet = this.checkValueCondition(valueToCheck, link.value_active);
            conditionResults.set(inputDeviceId, conditionMet);
            
            console.log(`‚úÖ [ProcessOutput] Condition result for ${inputDeviceId}: ${conditionMet}`);
        }

        // √Åp d·ª•ng logic operator
        console.log('üîç [ProcessOutput] Evaluating logic conditions...');
        const shouldTrigger = this.evaluateLogicConditions(allInputLinks, conditionResults);
        
        console.log(`üéØ [ProcessOutput] Should trigger output device: ${shouldTrigger}`);
        
        if (shouldTrigger) {
            // Trigger output device
            const outputLink = links[0]; // L·∫•y link ƒë·∫ßu ti√™n ƒë·ªÉ c√≥ th√¥ng tin output device
            console.log(`üöÄ [ProcessOutput] TRIGGERING output device: ${outputLink.output_device?.name}`);
            await this.triggerOutputDevice(outputLink);
        } else {
            console.log(`‚è∏Ô∏è [ProcessOutput] Conditions not met, NOT triggering output device`);
        }
    }

    /**
     * ƒê√°nh gi√° logic conditions v·ªõi AND/OR operators
     */
    private evaluateLogicConditions(links: any[], conditionResults: Map<string, boolean>): boolean {
        if (links.length === 0) return false;
        
        // Group by logic operator
        const andLinks: string[] = [];
        const orLinks: string[] = [];
        
        for (const link of links) {
            if (link.logic_operator === 'OR') {
                orLinks.push(link.input_device_id);
            } else {
                andLinks.push(link.input_device_id);
            }
        }
        
        // Evaluate AND conditions (t·∫•t c·∫£ ph·∫£i true)
        let andResult = true;
        if (andLinks.length > 0) {
            andResult = andLinks.every(inputId => conditionResults.get(inputId) === true);
        }
        
        // Evaluate OR conditions (√≠t nh·∫•t 1 ph·∫£i true)
        let orResult = false;
        if (orLinks.length > 0) {
            orResult = orLinks.some(inputId => conditionResults.get(inputId) === true);
        }
        
        // Final result: (AND conditions) && (OR conditions || no OR conditions)
        return andResult && (orResult || orLinks.length === 0);
    }

    /**
     * Ki·ªÉm tra ƒëi·ªÅu ki·ªán value c√≥ match v·ªõi value_active kh√¥ng
     */
    private checkValueCondition(currentValue: any, valueActive: string): boolean {
        console.log(`üîç [CheckCondition] Checking value condition:`);
        console.log(`üìä [CheckCondition] Current value:`, JSON.stringify(currentValue, null, 2));
        console.log(`üéØ [CheckCondition] Target value active: "${valueActive}"`);
        
        if (!currentValue || !Array.isArray(currentValue)) {
            console.log(`‚ùå [CheckCondition] Invalid current value - not an array`);
            return false;
        }

        // T√¨m trong current_value c√≥ instance n√†o c√≥ value match v·ªõi valueActive
        for (let i = 0; i < currentValue.length; i++) {
            const component = currentValue[i];
            console.log(`üîç [CheckCondition] Checking component ${i}:`, {
                component_id: component.component_id,
                name: component.name,
                datatype: component.datatype,
                instances_count: component.instances?.length || 0
            });
            
            if (component.instances && Array.isArray(component.instances)) {
                for (let j = 0; j < component.instances.length; j++) {
                    const instance = component.instances[j];
                    console.log(`üîç [CheckCondition] Checking instance ${j}:`, {
                        instance_id: instance.instance_id,
                        value: instance.value,
                        datatype: component.datatype
                    });
                    
                    const comparisonResult = this.compareValues(instance.value, valueActive, component.datatype);
                    console.log(`‚öñÔ∏è [CheckCondition] Comparison result: ${comparisonResult}`);
                    
                    if (comparisonResult) {
                        console.log(`‚úÖ [CheckCondition] MATCH FOUND! Condition met.`);
                        return true;
                    }
                }
            } else {
                console.log(`‚ö†Ô∏è [CheckCondition] Component has no instances array`);
            }
        }

        console.log(`‚ùå [CheckCondition] NO MATCH FOUND. Condition not met.`);
        return false;
    }

    /**
     * So s√°nh values d·ª±a tr√™n datatype
     */
    private compareValues(instanceValue: any, activeValue: string, datatype: string): boolean {
        console.log(`üîç [CompareValues] Comparing values:`);
        console.log(`   - Instance value: ${instanceValue} (type: ${typeof instanceValue})`);
        console.log(`   - Active value: "${activeValue}" (type: ${typeof activeValue})`);
        console.log(`   - Data type: ${datatype}`);
        
        if (datatype === 'NUMBER') {
            const numInstance = parseFloat(instanceValue);
            const numActive = parseFloat(activeValue);
            
            console.log(`üî¢ [CompareValues] NUMBER comparison:`);
            console.log(`   - Parsed instance: ${numInstance}`);
            console.log(`   - Parsed active: ${numActive}`);
            
            // Support comparison operators: >, <, >=, <=, ==
            if (activeValue.startsWith('>=')) {
                const threshold = parseFloat(activeValue.slice(2));
                const result = numInstance >= threshold;
                console.log(`   - Operator: >= ${threshold}, Result: ${result}`);
                return result;
            } else if (activeValue.startsWith('<=')) {
                const threshold = parseFloat(activeValue.slice(2));
                const result = numInstance <= threshold;
                console.log(`   - Operator: <= ${threshold}, Result: ${result}`);
                return result;
            } else if (activeValue.startsWith('>')) {
                const threshold = parseFloat(activeValue.slice(1));
                const result = numInstance > threshold;
                console.log(`   - Operator: > ${threshold}, Result: ${result}`);
                return result;
            } else if (activeValue.startsWith('<')) {
                const threshold = parseFloat(activeValue.slice(1));
                const result = numInstance < threshold;
                console.log(`   - Operator: < ${threshold}, Result: ${result}`);
                return result;
            } else {
                const result = numInstance === numActive;
                console.log(`   - Operator: === ${numActive}, Result: ${result}`);
                return result;
            }
        } else if (datatype === 'BOOLEAN') {
            const result = String(instanceValue).toLowerCase() === activeValue.toLowerCase();
            console.log(`üîò [CompareValues] BOOLEAN comparison: ${result}`);
            return result;
        } else {
            // STRING comparison
            const result = String(instanceValue) === activeValue;
            console.log(`üìù [CompareValues] STRING comparison: ${result}`);
            return result;
        }
    }

    /**
     * Trigger output device
     */
    private async triggerOutputDevice(link: any): Promise<void> {
        try {
            console.log(`üöÄ [TriggerOutput] Starting trigger for output device`);
            console.log(`üîó [TriggerOutput] Link details:`, {
                id: link.id,
                output_action: link.output_action,
                output_value: link.output_value,
                output_device_name: link.output_device?.name,
                output_device_id: link.output_device?.device_id
            });
            
            const outputDevice = link.output_device;
            const powerStatus = link.output_action === 'turn_on' ? true : false;
            
            console.log(`‚ö° [TriggerOutput] Setting power status to: ${powerStatus}`);
            
            // Prepare update data v·ªõi output_value n·∫øu c√≥
            const updateData: any = {
                power_status: powerStatus,
                updated_at: new Date()
            };
            
            // N·∫øu c√≥ output_value, c·∫≠p nh·∫≠t current_value c·ªßa device
            if (link.output_value && link.output_value.trim() !== '') {
                console.log(`üí° [TriggerOutput] Processing output_value: ${link.output_value}`);
                
                // T·∫°o current_value structure cho output device
                const outputValue = this.buildOutputValue(link.output_value, link.output_action);
                console.log(`üèóÔ∏è [TriggerOutput] Built output value:`, JSON.stringify(outputValue, null, 2));
                
                if (outputValue) {
                    updateData.current_value = outputValue;
                    console.log(`‚úÖ [TriggerOutput] Added current_value to update data`);
                } else {
                    console.log(`‚ö†Ô∏è [TriggerOutput] Failed to build output value`);
                }
            } else {
                console.log(`üìù [TriggerOutput] No output_value specified, only updating power status`);
            }
            
            console.log(`üíæ [TriggerOutput] Final update data:`, JSON.stringify(updateData, null, 2));
            
            // C·∫≠p nh·∫≠t tr·∫°ng th√°i thi·∫øt b·ªã output
            const updatedDevice = await this.prisma.devices.update({
                where: { device_id: outputDevice.device_id },
                data: updateData
            });
            
            console.log(`‚úÖ [TriggerOutput] Device updated successfully in database`);

            // G·ª≠i command qua socket v·ªõi output_value
            if (io) {
                const socketData: any = {
                    action: "updateState",
                    serialNumber: outputDevice.serial_number,
                    state: { power_status: powerStatus },
                    triggeredBy: link.input_device.serial_number,
                    linkId: link.id,
                    outputAction: link.output_action,
                    timestamp: new Date().toISOString()
                };
                
                // Th√™m output_value v√†o socket data n·∫øu c√≥
                if (link.output_value && link.output_value.trim() !== '') {
                    socketData.outputValue = link.output_value;
                    socketData.state.outputValue = link.output_value;
                    console.log(`üì° [TriggerOutput] Added output_value to socket data`);
                }
                
                console.log(`üì° [TriggerOutput] Sending socket command:`, JSON.stringify(socketData, null, 2));
                
                io.of("/device")
                    .to(`device:${outputDevice.serial_number}`)
                    .emit("command", socketData);
                    
                console.log(`‚úÖ [TriggerOutput] Socket command sent to device:${outputDevice.serial_number}`);
            } else {
                console.log(`‚ö†Ô∏è [TriggerOutput] Socket.IO not available, skipping socket command`);
            }

            const action = link.output_action === 'turn_on' ? 'b·∫≠t' : 't·∫Øt';
            const valueText = link.output_value ? ` v·ªõi gi√° tr·ªã ${link.output_value}` : '';
            const successMessage = `Device link triggered: ${link.input_device.name} -> ${action} ${outputDevice.name}${valueText}`;
            
            console.log(`üéâ [TriggerOutput] SUCCESS: ${successMessage}`);
        } catch (error) {
            console.error('‚ùå [TriggerOutput] Error triggering output device:', error);
        }
    }

    /**
     * Build output value structure based on predefined values
     */
    private buildOutputValue(outputValue: string, outputAction: string): any[] | null {
        try {
            // T·∫°o c·∫•u tr√∫c current_value cho output device
            const timestamp = new Date().toISOString();
            
            // Th·ª≠ parse JSON array t·ª´ frontend
            try {
                const outputArray = JSON.parse(outputValue);
                if (Array.isArray(outputArray) && outputArray.length > 0) {
                    const components: any[] = [];
                    
                    for (const item of outputArray) {
                        if (item === 'alert') {
                            // Th√™m component c·∫£nh b√°o
                            components.push({
                                component_id: 'alert_mode',
                                name: 'Ch·∫ø ƒë·ªô c·∫£nh b√°o',
                                datatype: 'BOOLEAN',
                                unit: '',
                                instances: [{
                                    instance_id: 'alert_01',
                                    value: true,
                                    timestamp: timestamp
                                }]
                            });
                        } else if (item === 'brightness_control') {
                            // Th√™m component ƒë·ªô s√°ng m·∫∑c ƒë·ªãnh
                            components.push({
                                component_id: 'brightness_control',
                                name: 'ƒêi·ªÅu khi·ªÉn ƒë·ªô s√°ng',
                                datatype: 'NUMBER',
                                unit: 'lux',
                                instances: [{
                                    instance_id: 'brightness_01',
                                    value: 100, // Gi√° tr·ªã m·∫∑c ƒë·ªãnh
                                    timestamp: timestamp
                                }]
                            });
                        } else if (item.startsWith('brightness:')) {
                            // Th√™m component ƒë·ªô s√°ng v·ªõi gi√° tr·ªã c·ª• th·ªÉ
                            const value = item.split(':')[1];
                            components.push({
                                component_id: 'brightness_control',
                                name: 'ƒêi·ªÅu khi·ªÉn ƒë·ªô s√°ng',
                                datatype: 'NUMBER',
                                unit: 'lux',
                                instances: [{
                                    instance_id: 'brightness_01',
                                    value: parseInt(value) || 100,
                                    timestamp: timestamp
                                }]
                            });
                        }
                    }
                    
                    if (components.length > 0) {
                        return components;
                    }
                }
            } catch (jsonError) {
                // Kh√¥ng ph·∫£i JSON array, x·ª≠ l√Ω nh∆∞ string th∆∞·ªùng
                console.log('Output value kh√¥ng ph·∫£i JSON array, x·ª≠ l√Ω nh∆∞ string:', outputValue);
            }
            
            // X·ª≠ l√Ω brightness values c≈© (fallback)
            if (['25', '50', '75', '100'].includes(outputValue)) {
                return [{
                    component_id: 'brightness_control',
                    name: 'ƒêi·ªÅu khi·ªÉn ƒë·ªô s√°ng',
                    datatype: 'NUMBER',
                    unit: '%',
                    instances: [{
                        instance_id: 'brightness_01',
                        value: parseInt(outputValue),
                        timestamp: timestamp
                    }]
                }];
            }
            
            // X·ª≠ l√Ω alert mode values c≈© (fallback)
            if (['low_alert', 'medium_alert', 'high_alert', 'emergency_alert'].includes(outputValue)) {
                return [{
                    component_id: 'alert_mode',
                    name: 'Ch·∫ø ƒë·ªô c·∫£nh b√°o',
                    datatype: 'STRING',
                    unit: '',
                    instances: [{
                        instance_id: 'alert_01',
                        value: outputValue,
                        timestamp: timestamp
                    }]
                }];
            }
            
            // Default: tr·∫£ v·ªÅ power status
            return [{
                component_id: 'power_control',
                name: 'ƒêi·ªÅu khi·ªÉn ngu·ªìn',
                datatype: 'BOOLEAN',
                unit: '',
                instances: [{
                    instance_id: 'power_01',
                    value: outputAction === 'turn_on',
                    timestamp: timestamp
                }]
            }];
        } catch (error) {
            console.error('Error building output value:', error);
            return null;
        }
    }

    /**
     * Ki·ªÉm tra quy·ªÅn truy c·∫≠p device
     */
    private async checkDevicePermission(deviceId: string, accountId: string): Promise<void> {
        const device = await this.prisma.devices.findFirst({
            where: { device_id: deviceId, is_deleted: false }
        });

        if (!device) throwError(ErrorCodes.NOT_FOUND, "Device not found");

        if (device!.account_id !== accountId) {
            throwError(ErrorCodes.FORBIDDEN, "No permission to access this device");
        }
    }

    /**
     * Map Prisma device link to DeviceLink interface
     */
    private mapPrismaDeviceLinkToDeviceLink(link: any): DeviceLink {
        return {
            id: link.id,
            input_device_id: link.input_device_id,
            output_device_id: link.output_device_id,
            component_id: link.component_id,
            value_active: link.value_active,
            logic_operator: link.logic_operator,
            output_action: link.output_action || 'turn_on',
            output_value: link.output_value || '', // Th√™m output_value
            created_at: link.created_at,
            updated_at: link.updated_at,
            deleted_at: link.deleted_at,
            input_device: link.input_device,
            output_device: link.output_device,
            component: link.component
        };
    }
}

export default DeviceLinksService; 