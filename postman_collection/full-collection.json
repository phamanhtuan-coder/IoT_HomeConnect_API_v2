{
  "info": {
    "_postman_id": "2aff48d9-bf2f-46b5-b777-16d83e5b73ed",
    "name": "IoT Backend API",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
    "_exporter_id": "40754195",
    "_collection_link": "https://www.postman.com/homeconnectapiws/homeconnectapi-v2/collection/swql8uh/iot-backend-api?action=share&source=collection_link&creator=40754195"
  },
  "event": [
    {
      "listen": "prerequest",
      "script": {
        "type": "text/javascript",
        "packages": {},
        "exec": [
          ""
        ]
      }
    },
    {
      "listen": "test",
      "script": {
        "type": "text/javascript",
        "packages": {},
        "exec": [
          ""
        ]
      }
    }
  ],
  "variable": [
    {
      "key": "baseUrl",
      "value": "http://localhost:3000/api",
      "type": "string"
    },
    {
      "key": "userAccessToken",
      "value": "",
      "type": "string"
    },
    {
      "key": "userRefreshToken",
      "value": "",
      "type": "string"
    },
    {
      "key": "employeeAccessToken",
      "value": "",
      "type": "string"
    },
    {
      "key": "employeeRefreshToken",
      "value": "",
      "type": "string"
    }
  ],
  "item": [
    {
      "name": "Auth",
      "item": [
        {
          "name": "Login User",
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"username\": \"testuser\",\n  \"password\": \"password123\",\n  \"rememberMe\": true,\n  \"deviceName\": \"MyDevice\",\n  \"deviceId\": \"device123\",\n  \"deviceUuid\": \"\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{baseUrl}}/auth/login",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "auth",
                "login"
              ]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "const response = pm.response.json();",
                  "pm.environment.set('userAccessToken', response.accessToken);",
                  "pm.environment.set('userRefreshToken', response.refreshToken || pm.environment.get('userRefreshToken'));",
                  "pm.environment.set('deviceUuid', response.deviceUuid);",
                  "pm.test('User login successful', () => {",
                  "  pm.expect(pm.response.code).to.equal(200);",
                  "  pm.expect(response.accessToken).to.exist;",
                  "  pm.expect(response.deviceUuid).to.be.a('string');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "Login Employee",
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"username\": \"adminuser\",\n  \"password\": \"admin123\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{baseUrl}}/auth/employee/login",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "auth",
                "employee",
                "login"
              ]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "const response = pm.response.json();",
                  "if (response.accessToken) pm.environment.set('employeeAccessToken', response.accessToken);",
                  "if (response.refreshToken) pm.environment.set('employeeRefreshToken', response.refreshToken);",
                  "pm.test('Employee login successful', () => {",
                  "  pm.expect(pm.response.code).to.equal(200);",
                  "  pm.expect(response.accessToken).to.exist;",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "Register User",
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"username\": \"newuser\",\n  \"surname\": \"New\",\n  \"lastname\": \"User\",\n  \"email\": \"newuser@example.com\",\n  \"password\": \"newpassword123\",\n  \"phone\": \"1234567890\",\n  \"birthdate\": \"1990-01-01\",\n  \"gender\": true\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{baseUrl}}/auth/register",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "auth",
                "register"
              ]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "const response = pm.response.json();",
                  "pm.environment.set('userAccessToken', response.accessToken);",
                  "pm.test('User registration successful', () => {",
                  "  pm.expect(pm.response.code).to.equal(201);",
                  "  pm.expect(response.accessToken).to.exist;",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "Register Employee",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{employeeAccessToken}}",
                "type": "text"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"username\": \"newadmin\",\n  \"surname\": \"New\",\n  \"lastname\": \"Admin\",\n  \"email\": \"newadmin@example.com\",\n  \"password\": \"admin123\",\n  \"role\": \"ADMIN\",\n  \"phone\": \"0123456789\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{baseUrl}}/auth/employee/register",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "auth",
                "employee",
                "register"
              ]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "const response = pm.response.json();",
                  "pm.test('Employee registration successful', () => {",
                  "  pm.expect(pm.response.code).to.equal(201);",
                  "  pm.expect(response.accessToken).to.exist;",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "Refresh User Token",
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"refreshToken\": \"{{userRefreshToken}}\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{baseUrl}}/auth/refresh",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "auth",
                "refresh"
              ]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "const response = pm.response.json();",
                  "pm.environment.set('userAccessToken', response.accessToken);",
                  "pm.test('User token refreshed', () => {",
                  "  pm.expect(pm.response.code).to.equal(200);",
                  "  pm.expect(response.accessToken).to.exist;",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "Refresh Employee Token",
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"refreshToken\": \"{{employeeRefreshToken}}\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{baseUrl}}/auth/employee/refresh",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "auth",
                "employee",
                "refresh"
              ]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "const response = pm.response.json();",
                  "pm.environment.set('employeeAccessToken', response.accessToken);",
                  "pm.test('Employee token refreshed', () => {",
                  "  pm.expect(pm.response.code).to.equal(200);",
                  "  pm.expect(response.accessToken).to.exist;",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "Logout User (Single Device)",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{userAccessToken}}",
                "type": "text"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"userDeviceId\": 1\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{baseUrl}}/auth/logout",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "auth",
                "logout"
              ]
            }
          }
        },
        {
          "name": "Logout Employee (Single Device)",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{employeeAccessToken}}",
                "type": "text"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{baseUrl}}/auth/employee/logout",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "auth",
                "employee",
                "logout"
              ]
            }
          }
        },
        {
          "name": "Logout Multiple Devices",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{userAccessToken}}",
                "type": "text"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"userDeviceIds\": [1, 2]\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{baseUrl}}/auth/logout/multiple",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "auth",
                "logout",
                "multiple"
              ]
            }
          }
        },
        {
          "name": "Logout All Devices",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{userAccessToken}}",
                "type": "text"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{baseUrl}}/auth/logout/all",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "auth",
                "logout",
                "all"
              ]
            }
          }
        },
        {
          "name": "Update Device Token",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{userAccessToken}}",
                "type": "text"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"deviceToken\": \"newFcmToken123\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{baseUrl}}/auth/update-device-token",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "auth",
                "update-device-token"
              ]
            }
          }
        },
        {
          "name": "Check Email Verification",
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"email\": \"user@example.com\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{baseUrl}}/auth/check-email",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "auth",
                "check-email"
              ]
            }
          }
        },
        {
          "name": "Verify Email",
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"email\": \"user@example.com\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{baseUrl}}/auth/verify-email",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "auth",
                "verify-email"
              ]
            }
          }
        },
        {
          "name": "Recovery Password",
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"email\": \"user@example.com\",\n  \"newPassword\": \"newpassword123\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{baseUrl}}/auth/recovery-password",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "auth",
                "recovery-password"
              ]
            }
          }
        },
        {
          "name": "Update User Profile",
          "request": {
            "method": "PATCH",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{userAccessToken}}",
                "type": "text"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"surname\": \"Updated\",\n  \"lastname\": \"User\",\n  \"phone\": \"0987654321\",\n  \"email\": \"updateduser@example.com\",\n  \"birthdate\": \"1991-02-02\",\n  \"gender\": false,\n  \"image\": \"http://example.com/avatar.jpg\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{baseUrl}}/auth/update-profile",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "auth",
                "update-profile"
              ]
            }
          }
        }
      ]
    },
    {
      "name": "Sync Tracking",
      "item": [
        {
          "name": "Get Own Sync History",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "const response = pm.response.json();",
                  "pm.test('Own sync history retrieved successfully', () => {",
                  "  pm.expect(pm.response.code).to.equal(200);",
                  "  pm.expect(response).to.be.an('array');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{userAccessToken}}",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/sync-tracking/me",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "sync-tracking",
                "me"
              ]
            }
          },
          "response": []
        },
        {
          "name": "Get User Sync History (Admin)",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "const response = pm.response.json();",
                  "pm.test('User sync history retrieved successfully', () => {",
                  "  pm.expect(pm.response.code).to.equal(200);",
                  "  pm.expect(response).to.be.an('array');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{employeeAccessToken}}",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/sync-tracking/user/:userId",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "sync-tracking",
                "user",
                ":userId"
              ],
              "variable": [
                {
                  "key": "userId",
                  "value": "1"
                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "Get Full User Sync History (Admin)",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "const response = pm.response.json();",
                  "pm.test('Full user sync history retrieved successfully', () => {",
                  "  pm.expect(pm.response.code).to.equal(200);",
                  "  pm.expect(response).to.be.an('array');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{employeeAccessToken}}",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/sync-tracking/user/:userId/full",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "sync-tracking",
                "user",
                ":userId",
                "full"
              ],
              "variable": [
                {
                  "key": "userId",
                  "value": "1"
                }
              ]
            }
          },
          "response": []
        }
      ]
    },
    {
      "name": "User Devices",
      "item": [
        {
          "name": "Get Own Devices",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "const response = pm.response.json();",
                  "pm.test('Own devices retrieved successfully', () => {",
                  "  pm.expect(pm.response.code).to.equal(200);",
                  "  pm.expect(response).to.be.an('array');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{userAccessToken}}",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/user-devices",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "user-devices"
              ]
            }
          },
          "response": []
        },
        {
          "name": "Get User Devices (Admin)",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "const response = pm.response.json();",
                  "pm.test('User devices retrieved successfully', () => {",
                  "  pm.expect(pm.response.code).to.equal(200);",
                  "  pm.expect(response).to.be.an('array');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{employeeAccessToken}}",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/user-devices/:userId",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "user-devices",
                ":userId"
              ],
              "variable": [
                {
                  "key": "userId",
                  "value": "1"
                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "Revoke Device",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Device revoked successfully', () => {",
                  "  pm.expect(pm.response.code).to.equal(204);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "DELETE",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{userAccessToken}}",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/user-devices/:deviceId",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "user-devices",
                ":deviceId"
              ],
              "variable": [
                {
                  "key": "deviceId",
                  "value": "1"
                }
              ]
            }
          },
          "response": []
        }
      ]
    },
    {
      "name": "Notification",
      "item": [
        {
          "name": "Create Notification",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "const response = pm.response.json();",
                  "pm.test('Notification created successfully', () => {",
                  "  pm.expect(pm.response.code).to.equal(201);",
                  "  pm.expect(response.id).to.exist;",
                  "});"
                ],
                "type": "text/javascript",
                "packages": {}
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{employeeAccessToken}}",
                "type": "text"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"account_id\": \"user123\",\n  \"role_id\": 1,\n  \"text\": \"System maintenance scheduled\",\n  \"type\": \"SYSTEM\",\n  \"is_read\": false\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{baseUrl}}/notifications",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "notifications"
              ]
            }
          },
          "response": []
        },
        {
          "name": "Update Notification",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "const response = pm.response.json();",
                  "pm.test('Notification updated successfully', () => {",
                  "  pm.expect(pm.response.code).to.equal(200);",
                  "  pm.expect(response.id).to.exist;",
                  "});"
                ],
                "type": "text/javascript",
                "packages": {}
              }
            }
          ],
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{employeeAccessToken}}",
                "type": "text"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"is_read\": true\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{baseUrl}}/notifications/:id",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "notifications",
                ":id"
              ],
              "variable": [
                {
                  "key": "id",
                  "value": "1"
                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "Delete Notification",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Notification deleted successfully', () => {",
                  "  pm.expect(pm.response.code).to.equal(204);",
                  "});"
                ],
                "type": "text/javascript",
                "packages": {}
              }
            }
          ],
          "request": {
            "method": "DELETE",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{employeeAccessToken}}",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/notifications/:id",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "notifications",
                ":id"
              ],
              "variable": [
                {
                  "key": "id",
                  "value": "1"
                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "Get Notification by ID",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "const response = pm.response.json();",
                  "pm.test('Notification retrieved successfully', () => {",
                  "  pm.expect(pm.response.code).to.equal(200);",
                  "  pm.expect(response.id).to.exist;",
                  "});"
                ],
                "type": "text/javascript",
                "packages": {}
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{employeeAccessToken}}",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/notifications/:id",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "notifications",
                ":id"
              ],
              "variable": [
                {
                  "key": "id",
                  "value": "1"
                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "Get Notifications by User",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "const response = pm.response.json();",
                  "pm.test('Notifications retrieved successfully', () => {",
                  "  pm.expect(pm.response.code).to.equal(200);",
                  "  pm.expect(response).to.be.an('array');",
                  "});"
                ],
                "type": "text/javascript",
                "packages": {}
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{employeeAccessToken}}",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/notifications/user",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "notifications",
                "user"
              ]
            }
          },
          "response": []
        },
        {
          "name": "Get All Notifications",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "const response = pm.response.json();",
                  "pm.test('Notifications retrieved successfully', () => {",
                  "  pm.expect(pm.response.code).to.equal(200);",
                  "  pm.expect(response).to.be.an('array');",
                  "});"
                ],
                "type": "text/javascript",
                "packages": {}
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{employeeAccessToken}}",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/notifications?account_id=user123&type=SYSTEM&is_read=false&page=1&limit=10",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "notifications"
              ],
              "query": [
                {
                  "key": "account_id",
                  "value": "user123"
                },
                {
                  "key": "type",
                  "value": "SYSTEM"
                },
                {
                  "key": "is_read",
                  "value": "false"
                },
                {
                  "key": "page",
                  "value": "1"
                },
                {
                  "key": "limit",
                  "value": "10"
                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "Send OTP",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "const response = pm.response.json();",
                  "pm.test('OTP sent successfully', () => {",
                  "  pm.expect(pm.response.code).to.equal(200);",
                  "  pm.expect(response.message).to.equal('OTP sent successfully');",
                  "});"
                ],
                "type": "text/javascript",
                "packages": {}
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"email\": \"user@example.com\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{baseUrl}}/notifications/otp",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "notifications",
                "otp"
              ]
            }
          },
          "response": []
        },
        {
          "name": "Generate OTP",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "const response = pm.response.json();",
                  "pm.test('OTP generated successfully', () => {",
                  "  pm.expect(pm.response.code).to.equal(200);",
                  "  pm.expect(response.message).to.equal('OTP generated and sent successfully');",
                  "});"
                ],
                "type": "text/javascript",
                "packages": {}
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"email\": \"user@example.com\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{baseUrl}}/notifications/otp/generate",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "notifications",
                "otp",
                "generate"
              ]
            }
          },
          "response": []
        },
        {
          "name": "Verify OTP",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "const response = pm.response.json();",
                  "pm.test('OTP verification completed', () => {",
                  "  pm.expect(pm.response.code).to.equal(200);",
                  "  pm.expect(response.message).to.be.oneOf(['OTP verified successfully', 'OTP verification failed']);",
                  "});"
                ],
                "type": "text/javascript",
                "packages": {}
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"email\": \"user@example.com\",\n  \"otp\": \"123456\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{baseUrl}}/notifications/otp/verify",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "notifications",
                "otp",
                "verify"
              ]
            }
          },
          "response": []
        }
      ]
    },
    {
      "name": "Device",
      "item": [
        {
          "name": "Create Device",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "const response = pm.response.json();",
                  "pm.test('Device created successfully', () => {",
                  "  pm.expect(pm.response.code).to.equal(201);",
                  "  pm.expect(response.deviceId).to.exist;",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{userAccessToken}}",
                "type": "text"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"templateId\": 1,\n  \"serial_number\": \"ABC123\",\n  \"spaceId\": 1,\n  \"name\": \"MyDevice\",\n  \"attribute\": {\"brightness\": 50},\n  \"wifi_ssid\": \"MyWiFi\",\n  \"wifi_password\": \"wifi123\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{baseUrl}}/devices",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "devices"
              ]
            }
          },
          "response": []
        },
        {
          "name": "Link Device",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "const response = pm.response.json();",
                  "pm.test('Device linked successfully', () => {",
                  "  pm.expect(pm.response.code).to.equal(200);",
                  "  pm.expect(response.deviceId).to.exist;",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{userAccessToken}}",
                "type": "text"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"serial_number\": \"ABC123\",\n  \"spaceId\": 1,\n  \"name\": \"LinkedDevice\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{baseUrl}}/devices/link",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "devices",
                "link"
              ]
            }
          },
          "response": []
        },
        {
          "name": "Get Devices by Account",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "const response = pm.response.json();",
                  "pm.test('Devices retrieved successfully', () => {",
                  "  pm.expect(pm.response.code).to.equal(200);",
                  "  pm.expect(response).to.be.an('array');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{userAccessToken}}",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/devices/account",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "devices",
                "account"
              ]
            }
          },
          "response": []
        },
        {
          "name": "Get Devices by Group",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "const response = pm.response.json();",
                  "pm.test('Devices retrieved successfully', () => {",
                  "  pm.expect(pm.response.code).to.equal(200);",
                  "  pm.expect(response).to.be.an('array');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{userAccessToken}}",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/devices/group/:groupId",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "devices",
                "group",
                ":groupId"
              ],
              "variable": [
                {
                  "key": "groupId",
                  "value": "1"
                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "Get Devices by House",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "const response = pm.response.json();",
                  "pm.test('Devices retrieved successfully', () => {",
                  "  pm.expect(pm.response.code).to.equal(200);",
                  "  pm.expect(response).to.be.an('array');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{userAccessToken}}",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/devices/house/:houseId",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "devices",
                "house",
                ":houseId"
              ],
              "variable": [
                {
                  "key": "houseId",
                  "value": "1"
                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "Get Devices by Space",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "const response = pm.response.json();",
                  "pm.test('Devices retrieved successfully', () => {",
                  "  pm.expect(pm.response.code).to.equal(200);",
                  "  pm.expect(response).to.be.an('array');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{userAccessToken}}",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/devices/space/:spaceId",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "devices",
                "space",
                ":spaceId"
              ],
              "variable": [
                {
                  "key": "spaceId",
                  "value": "1"
                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "Get Device by ID",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "const response = pm.response.json();",
                  "pm.test('Device retrieved successfully', () => {",
                  "  pm.expect(pm.response.code).to.equal(200);",
                  "  pm.expect(response.deviceId).to.exist;",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{userAccessToken}}",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/devices/:deviceId",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "devices",
                ":deviceId"
              ],
              "variable": [
                {
                  "key": "deviceId",
                  "value": "1"
                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "Unlink Device",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Device unlinked successfully', () => {",
                  "  pm.expect(pm.response.code).to.equal(204);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "DELETE",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{userAccessToken}}",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/devices/:deviceId",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "devices",
                ":deviceId"
              ],
              "variable": [
                {
                  "key": "deviceId",
                  "value": "1"
                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "Update Device Space",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "const response = pm.response.json();",
                  "pm.test('Device space updated successfully', () => {",
                  "  pm.expect(pm.response.code).to.equal(200);",
                  "  pm.expect(response.deviceId).to.exist;",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{userAccessToken}}",
                "type": "text"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"spaceId\": 2,\n  \"serial_number\": \"ABC123\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{baseUrl}}/devices/:deviceId/space",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "devices",
                ":deviceId",
                "space"
              ],
              "variable": [
                {
                  "key": "deviceId",
                  "value": "1"
                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "[New] Update Device State",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "const response = pm.response.json();",
                  "pm.test('Device state updated successfully', () => {",
                  "  pm.expect(pm.response.code).to.equal(200);",
                  "  pm.expect(response.success).to.be.true;",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "PATCH",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{userAccessToken}}",
                "type": "text"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"serial_number\": \"ABC123\",\n  \"power_status\": true,\n  \"brightness\": 75,\n  \"color\": \"#FF5500\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{baseUrl}}/devices/:deviceId/state",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "devices",
                ":deviceId",
                "state"
              ],
              "variable": [
                {
                  "key": "deviceId",
                  "value": "1"
                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "[New] Get Device State",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "const response = pm.response.json();",
                  "pm.test('Device state retrieved successfully', () => {",
                  "  pm.expect(pm.response.code).to.equal(200);",
                  "  pm.expect(response.state).to.exist;",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{userAccessToken}}",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/devices/:deviceId/state?serial_number=ABC123",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "devices",
                ":deviceId",
                "state"
              ],
              "query": [
                {
                  "key": "serial_number",
                  "value": "ABC123"
                }
              ],
              "variable": [
                {
                  "key": "deviceId",
                  "value": "1"
                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "[New] Bulk Update Device State",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "const response = pm.response.json();",
                  "pm.test('Bulk state update successful', () => {",
                  "  pm.expect(pm.response.code).to.equal(200);",
                  "  pm.expect(response.success).to.be.true;",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{userAccessToken}}",
                "type": "text"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"serial_number\": \"ABC123\",\n  \"updates\": [\n    {\"power_status\": true},\n    {\"brightness\": 75},\n    {\"color\": \"#00FF00\"}\n  ]\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{baseUrl}}/devices/:deviceId/state/bulk",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "devices",
                ":deviceId",
                "state",
                "bulk"
              ],
              "variable": [
                {
                  "key": "deviceId",
                  "value": "1"
                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "[New] Quick Toggle Device",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "const response = pm.response.json();",
                  "pm.test('Device toggled successfully', () => {",
                  "  pm.expect(pm.response.code).to.equal(200);",
                  "  pm.expect(response.success).to.be.true;",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{userAccessToken}}",
                "type": "text"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"serial_number\": \"ABC123\",\n  \"power_status\": true\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{baseUrl}}/devices/:deviceId/toggle",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "devices",
                ":deviceId",
                "toggle"
              ],
              "variable": [
                {
                  "key": "deviceId",
                  "value": "1"
                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "[New] Get Device Capabilities",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "const response = pm.response.json();",
                  "pm.test('Device capabilities retrieved successfully', () => {",
                  "  pm.expect(pm.response.code).to.equal(200);",
                  "  pm.expect(response.merged_capabilities).to.exist;",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{userAccessToken}}",
                "type": "text"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"serial_number\": \"ABC123\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{baseUrl}}/devices/:deviceId/capabilities",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "devices",
                ":deviceId",
                "capabilities"
              ],
              "variable": [
                {
                  "key": "deviceId",
                  "value": "1"
                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "[New] Update Device Capabilities",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "const response = pm.response.json();",
                  "pm.test('Device capabilities updated successfully', () => {",
                  "  pm.expect(pm.response.code).to.equal(200);",
                  "  pm.expect(response.success).to.be.true;",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{userAccessToken}}",
                "type": "text"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"serial_number\": \"ABC123\",\n  \"capabilities\": {\n    \"deviceType\": \"LED_CONTROLLER_24\",\n    \"category\": \"LIGHTING\",\n    \"capabilities\": [\"OUTPUT\", \"RGB_CONTROL\", \"BRIGHTNESS_CONTROL\"],\n    \"firmware_version\": \"8.24\",\n    \"isInput\": false,\n    \"isOutput\": true,\n    \"controls\": {\n      \"power_status\": \"toggle\",\n      \"brightness\": \"slider\",\n      \"color\": \"color_picker\"\n    }\n  }\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{baseUrl}}/devices/:deviceId/capabilities",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "devices",
                ":deviceId",
                "capabilities"
              ],
              "variable": [
                {
                  "key": "deviceId",
                  "value": "1"
                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "[Deprecated] Toggle Device",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "const response = pm.response.json();",
                  "pm.test('Device toggled successfully', () => {",
                  "  pm.expect(pm.response.code).to.equal(200);",
                  "  pm.expect(response.deviceId).to.exist;",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{userAccessToken}}",
                "type": "text"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"power_status\": true,\n  \"serial_number\": \"ABC123\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{baseUrl}}/devices/:deviceId/toggle",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "devices",
                ":deviceId",
                "toggle"
              ],
              "variable": [
                {
                  "key": "deviceId",
                  "value": "1"
                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "[Deprecated] Update Device Attributes",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "const response = pm.response.json();",
                  "pm.test('Device attributes updated successfully', () => {",
                  "  pm.expect(pm.response.code).to.equal(200);",
                  "  pm.expect(response.deviceId).to.exist;",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{userAccessToken}}",
                "type": "text"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"brightness\": 50,\n  \"color\": \"white\",\n  \"serial_number\": \"ABC123\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{baseUrl}}/devices/:deviceId/attributes",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "devices",
                ":deviceId",
                "attributes"
              ],
              "variable": [
                {
                  "key": "deviceId",
                  "value": "1"
                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "[Deprecated] Update Device WiFi",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "const response = pm.response.json();",
                  "pm.test('Device WiFi updated successfully', () => {",
                  "  pm.expect(pm.response.code).to.equal(200);",
                  "  pm.expect(response.deviceId).to.exist;",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{userAccessToken}}",
                "type": "text"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"wifi_ssid\": \"MyWiFi\",\n  \"wifi_password\": \"wifi123\",\n  \"serial_number\": \"ABC123\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{baseUrl}}/devices/:deviceId/wifi",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "devices",
                ":deviceId",
                "wifi"
              ],
              "variable": [
                {
                  "key": "deviceId",
                  "value": "1"
                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "Set LED Effect",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "const response = pm.response.json();",
                  "pm.test('LED effect set successfully', () => {",
                  "  pm.expect(pm.response.code).to.equal(200);",
                  "  pm.expect(response.success).to.be.true;",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{userAccessToken}}",
                "type": "text"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"serial_number\": \"ABC123\",\n  \"effect\": \"rainbow\",\n  \"speed\": 500,\n  \"count\": 10,\n  \"duration\": 5000,\n  \"color1\": \"#FF0000\",\n  \"color2\": \"#00FF00\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{baseUrl}}/devices/:serialNumber/led-effect",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "devices",
                ":serialNumber",
                "led-effect"
              ],
              "variable": [
                {
                  "key": "serialNumber",
                  "value": "ABC123"
                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "Stop LED Effect",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "const response = pm.response.json();",
                  "pm.test('LED effect stopped successfully', () => {",
                  "  pm.expect(pm.response.code).to.equal(200);",
                  "  pm.expect(response.success).to.be.true;",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{userAccessToken}}",
                "type": "text"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"serial_number\": \"ABC123\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{baseUrl}}/devices/:serialNumber/stop-led-effect",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "devices",
                ":serialNumber",
                "stop-led-effect"
              ],
              "variable": [
                {
                  "key": "serialNumber",
                  "value": "ABC123"
                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "Apply LED Preset",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "const response = pm.response.json();",
                  "pm.test('LED preset applied successfully', () => {",
                  "  pm.expect(pm.response.code).to.equal(200);",
                  "  pm.expect(response.success).to.be.true;",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{userAccessToken}}",
                "type": "text"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"serial_number\": \"ABC123\",\n  \"preset\": \"party_mode\",\n  \"duration\": 30000\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{baseUrl}}/devices/:serialNumber/led-preset",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "devices",
                ":serialNumber",
                "led-preset"
              ],
              "variable": [
                {
                  "key": "serialNumber",
                  "value": "ABC123"
                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "Get Available LED Effects",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "const response = pm.response.json();",
                  "pm.test('LED effects retrieved successfully', () => {",
                  "  pm.expect(pm.response.code).to.equal(200);",
                  "  pm.expect(response.effects).to.be.an('array');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{userAccessToken}}",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/devices/:serialNumber/led-effects",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "devices",
                ":serialNumber",
                "led-effects"
              ],
              "variable": [
                {
                  "key": "serialNumber",
                  "value": "ABC123"
                }
              ]
            }
          },
          "response": []
        }
      ]
    },
    {
      "name": "Group",
      "item": [
        {
          "name": "Get My Groups",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "const response = pm.response.json();",
                  "pm.test('My groups retrieved successfully', () => {",
                  "  pm.expect(pm.response.code).to.equal(200);",
                  "  pm.expect(response.data).to.exist;",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{userAccessToken}}",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/groups/my-groups?page=1&limit=10",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "groups",
                "my-groups"
              ],
              "query": [
                {
                  "key": "page",
                  "value": "1"
                },
                {
                  "key": "limit",
                  "value": "10"
                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "Create Group",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "const response = pm.response.json();",
                  "pm.test('Group created successfully', () => {",
                  "  pm.expect(pm.response.code).to.equal(201);",
                  "  pm.expect(response.group_id).to.exist;",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{userAccessToken}}",
                "type": "text"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"group_name\": \"MyGroup\",\n  \"icon_name\": \"home\",\n  \"icon_color\": \"#FF5733\",\n  \"group_description\": \"My test group\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{baseUrl}}/groups",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "groups"
              ]
            }
          },
          "response": []
        },
        {
          "name": "Get Group",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "const response = pm.response.json();",
                  "pm.test('Group retrieved successfully', () => {",
                  "  pm.expect(pm.response.code).to.equal(200);",
                  "  pm.expect(response.group_id).to.exist;",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{userAccessToken}}",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/groups/1",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "groups",
                "1"
              ]
            }
          },
          "response": []
        },
        {
          "name": "Update Group",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "const response = pm.response.json();",
                  "pm.test('Group updated successfully', () => {",
                  "  pm.expect(pm.response.code).to.equal(200);",
                  "  pm.expect(response.group_id).to.exist;",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{userAccessToken}}",
                "type": "text"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"group_name\": \"UpdatedGroup\",\n  \"icon_name\": \"building\",\n  \"icon_color\": \"#3366FF\",\n  \"group_description\": \"Updated group description\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{baseUrl}}/groups/1",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "groups",
                "1"
              ]
            }
          },
          "response": []
        },
        {
          "name": "Delete Group",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Group deleted successfully', () => {",
                  "  pm.expect(pm.response.code).to.equal(204);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "DELETE",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{userAccessToken}}",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/groups/1",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "groups",
                "1"
              ]
            }
          },
          "response": []
        },
        {
          "name": "Add User to Group",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "const response = pm.response.json();",
                  "pm.test('User added to group successfully', () => {",
                  "  pm.expect(pm.response.code).to.equal(201);",
                  "  pm.expect(response.user_group_id).to.exist;",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{userAccessToken}}",
                "type": "text"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"groupId\": 1,\n  \"username\": \"user123\",\n  \"role\": \"member\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{baseUrl}}/groups/members",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "groups",
                "members"
              ]
            }
          },
          "response": []
        },
        {
          "name": "Update User Role in Group",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "const response = pm.response.json();",
                  "pm.test('User role updated successfully', () => {",
                  "  pm.expect(pm.response.code).to.equal(200);",
                  "  pm.expect(response.user_group_id).to.exist;",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{userAccessToken}}",
                "type": "text"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"accountId\": \"user123\",\n  \"role\": \"vice\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{baseUrl}}/groups/1/members/role",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "groups",
                "1",
                "members",
                "role"
              ]
            }
          },
          "response": []
        },
        {
          "name": "Get Users in Group",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "const response = pm.response.json();",
                  "pm.test('Group members retrieved successfully', () => {",
                  "  pm.expect(pm.response.code).to.equal(200);",
                  "  pm.expect(response.data).to.exist;",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{userAccessToken}}",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/groups/1/members",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "groups",
                "1",
                "members"
              ]
            }
          },
          "response": []
        },
        {
          "name": "Remove User from Group",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('User removed from group successfully', () => {",
                  "  pm.expect(pm.response.code).to.equal(204);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "DELETE",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{userAccessToken}}",
                "type": "text"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"accountId\": \"user123\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{baseUrl}}/groups/1/members",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "groups",
                "1",
                "members"
              ]
            }
          },
          "response": []
        },
        {
          "name": "Get User Role in Group",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "const response = pm.response.json();",
                  "pm.test('Role retrieved successfully', () => {",
                  "  pm.expect(pm.response.code).to.equal(200);",
                  "  pm.expect(response.role).to.exist;",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{userAccessToken}}",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/groups/role/1",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "groups",
                "role",
                "1"
              ]
            }
          },
          "response": []
        },
        {
          "name": "Get Owned Groups",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "const response = pm.response.json();",
                  "pm.test('Owned groups retrieved successfully', () => {",
                  "  pm.expect(pm.response.code).to.equal(200);",
                  "  pm.expect(response).to.be.an('array');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{userAccessToken}}",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/groups/owned",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "groups",
                "owned"
              ]
            }
          },
          "response": []
        },
        {
          "name": "Get Member Groups",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "const response = pm.response.json();",
                  "pm.test('Member groups retrieved successfully', () => {",
                  "  pm.expect(pm.response.code).to.equal(200);",
                  "  pm.expect(response).to.be.an('array');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{userAccessToken}}",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/groups/member",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "groups",
                "member"
              ]
            }
          },
          "response": []
        }
      ]
    },
    {
      "name": "House",
      "item": [
        {
          "name": "Create House",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "const response = pm.response.json();",
                  "pm.test('House created successfully', () => {",
                  "  pm.expect(pm.response.code).to.equal(201);",
                  "  pm.expect(response.house_id).to.exist;",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{userAccessToken}}",
                "type": "text"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"groupId\": 1,\n  \"house_name\": \"MyHouse\",\n  \"address\": \"123 Main St\",\n  \"icon_name\": \"home\",\n  \"icon_color\": \"blue\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{baseUrl}}/houses",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "houses"
              ]
            },
            "description": "Requires owner or vice role in group"
          },
          "response": []
        },
        {
          "name": "Get Houses by Group",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "const response = pm.response.json();",
                  "pm.test('Houses retrieved successfully', () => {",
                  "  pm.expect(pm.response.code).to.equal(200);",
                  "  pm.expect(response).to.be.an('array');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{userAccessToken}}",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/houses/group/1",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "houses",
                "group",
                "1"
              ]
            },
            "description": "Any group member can view houses"
          },
          "response": []
        },
        {
          "name": "Get House by ID",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "const response = pm.response.json();",
                  "pm.test('House retrieved successfully', () => {",
                  "  pm.expect(pm.response.code).to.equal(200);",
                  "  pm.expect(response.house_id).to.exist;",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{userAccessToken}}",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/houses/1",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "houses",
                "1"
              ]
            },
            "description": "Any group member can view house details"
          },
          "response": []
        },
        {
          "name": "Update House",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "const response = pm.response.json();",
                  "pm.test('House updated successfully', () => {",
                  "  pm.expect(pm.response.code).to.equal(200);",
                  "  pm.expect(response.house_id).to.exist;",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{userAccessToken}}",
                "type": "text"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"house_name\": \"UpdatedHouse\",\n  \"address\": \"456 Elm St\",\n  \"icon_name\": \"house\",\n  \"icon_color\": \"green\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{baseUrl}}/houses/1",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "houses",
                "1"
              ]
            },
            "description": "Requires owner or vice role in group"
          },
          "response": []
        },
        {
          "name": "Delete House",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('House deleted successfully', () => {",
                  "  pm.expect(pm.response.code).to.equal(204);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "DELETE",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{userAccessToken}}",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/houses/1",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "houses",
                "1"
              ]
            },
            "description": "Requires owner or vice role in group. Cannot delete house with existing spaces."
          },
          "response": []
        }
      ]
    },
    {
      "name": "Space",
      "item": [
        {
          "name": "Create Space",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "const response = pm.response.json();",
                  "pm.test('Space created successfully', () => {",
                  "  pm.expect(pm.response.code).to.equal(201);",
                  "  pm.expect(response.space_id).to.exist;",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{userAccessToken}}",
                "type": "text"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"houseId\": 1,\n  \"space_name\": \"Living Room\",\n  \"icon_name\": \"room\",\n  \"icon_color\": \"#4A90E2\",\n  \"space_description\": \"Main living room\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{baseUrl}}/spaces",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "spaces"
              ]
            },
            "description": "Requires owner or vice role in the group that owns the house"
          },
          "response": []
        },
        {
          "name": "Get Spaces by House",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "const response = pm.response.json();",
                  "pm.test('Spaces retrieved successfully', () => {",
                  "  pm.expect(pm.response.code).to.equal(200);",
                  "  pm.expect(response).to.be.an('array');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{userAccessToken}}",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/spaces/house/1",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "spaces",
                "house",
                "1"
              ]
            },
            "description": "Any member of the group can view spaces"
          },
          "response": []
        },
        {
          "name": "Get Space by ID",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "const response = pm.response.json();",
                  "pm.test('Space retrieved successfully', () => {",
                  "  pm.expect(pm.response.code).to.equal(200);",
                  "  pm.expect(response.space_id).to.exist;",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{userAccessToken}}",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/spaces/1",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "spaces",
                "1"
              ]
            },
            "description": "Any member of the group can view space details"
          },
          "response": []
        },
        {
          "name": "Update Space",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "const response = pm.response.json();",
                  "pm.test('Space updated successfully', () => {",
                  "  pm.expect(pm.response.code).to.equal(200);",
                  "  pm.expect(response.space_id).to.exist;",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{userAccessToken}}",
                "type": "text"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"space_name\": \"Updated Living Room\",\n  \"icon_name\": \"living-room\",\n  \"icon_color\": \"#3366FF\",\n  \"space_description\": \"Updated main living room\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{baseUrl}}/spaces/1",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "spaces",
                "1"
              ]
            },
            "description": "Requires owner or vice role in the group that owns the house"
          },
          "response": []
        },
        {
          "name": "Delete Space",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Space deleted successfully', () => {",
                  "  pm.expect(pm.response.code).to.equal(204);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "DELETE",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{userAccessToken}}",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/spaces/1",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "spaces",
                "1"
              ]
            },
            "description": "Requires owner or vice role in the group that owns the house"
          },
          "response": []
        },
        {
          "name": "Get Space Name",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "const response = pm.response.json();",
                  "pm.test('Space name retrieved successfully', () => {",
                  "  pm.expect(pm.response.code).to.equal(200);",
                  "  pm.expect(response.name).to.exist;",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{userAccessToken}}",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/spaces/1/name",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "spaces",
                "1",
                "name"
              ]
            },
            "description": "Any member of the group can view space name"
          },
          "response": []
        }
      ]
    },
    {
      "name": "Shared Permission",
      "item": [
        {
          "name": "Revoke Share Permission (Owner/Admin)",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Share permission revoked successfully', () => {",
                  "  pm.expect(pm.response.code).to.equal(200);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "DELETE",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{userAccessToken}}",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/shared-permissions/:permissionId",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "shared-permissions",
                ":permissionId"
              ],
              "variable": [
                {
                  "key": "permissionId",
                  "value": "1"
                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "Revoke Share Permission (Recipient)",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Share permission revoked successfully', () => {",
                  "  pm.expect(pm.response.code).to.equal(200);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "DELETE",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{userAccessToken}}",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/shared-permissions/recipient/:permissionId",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "shared-permissions",
                "recipient",
                ":permissionId"
              ],
              "variable": [
                {
                  "key": "permissionId",
                  "value": "1"
                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "Share Device",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "const response = pm.response.json();",
                  "pm.test('Share request created successfully', () => {",
                  "  pm.expect(pm.response.code).to.equal(200);",
                  "  pm.expect(response.success).to.be.true;",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{userAccessToken}}",
                "type": "text"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"device_serial\": \"ABC123\",\n  \"to_user_email\": \"recipient@example.com\",\n  \"permission_type\": \"VIEW\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{baseUrl}}/shared-permissions",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "shared-permissions"
              ]
            }
          },
          "response": []
        },
        {
          "name": "Approve Share Request",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "const response = pm.response.json();",
                  "pm.test('Share request approved successfully', () => {",
                  "  pm.expect(pm.response.code).to.equal(200);",
                  "  pm.expect(response.success).to.be.true;",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{userAccessToken}}",
                "type": "text"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"accept\": true\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{baseUrl}}/shared-permissions/:ticketId/approve",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "shared-permissions",
                ":ticketId",
                "approve"
              ],
              "variable": [
                {
                  "key": "ticketId",
                  "value": "TICKET123"
                }
              ]
            }
          },
          "response": []
        }
      ]
    },
    {
      "name": "Alert Type",
      "item": [
        {
          "name": "Create Alert Type",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "const response = pm.response.json();",
                  "pm.test('Alert type created successfully', () => {",
                  "  pm.expect(pm.response.code).to.equal(201);",
                  "  pm.expect(response.alert_type_id).to.exist;",
                  "});"
                ],
                "type": "text/javascript",
                "packages": {}
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{employeeAccessToken}}",
                "type": "text"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"alert_type_name\": \"Critical Alert\",\n  \"priority\": 3\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{baseUrl}}/alert-types",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "alert-types"
              ]
            }
          },
          "response": []
        },
        {
          "name": "Update Alert Type",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "const response = pm.response.json();",
                  "pm.test('Alert type updated successfully', () => {",
                  "  pm.expect(pm.response.code).to.equal(200);",
                  "  pm.expect(response.alert_type_id).to.exist;",
                  "});"
                ],
                "type": "text/javascript",
                "packages": {}
              }
            }
          ],
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{employeeAccessToken}}",
                "type": "text"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"alert_type_name\": \"Updated Alert\",\n  \"priority\": 4\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{baseUrl}}/alert-types/:alertTypeId",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "alert-types",
                ":alertTypeId"
              ],
              "variable": [
                {
                  "key": "alertTypeId",
                  "value": "1"
                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "Delete Alert Type",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Alert type deleted successfully', () => {",
                  "  pm.expect(pm.response.code).to.equal(204);",
                  "});"
                ],
                "type": "text/javascript",
                "packages": {}
              }
            }
          ],
          "request": {
            "method": "DELETE",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{employeeAccessToken}}",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/alert-types/:alertTypeId",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "alert-types",
                ":alertTypeId"
              ],
              "variable": [
                {
                  "key": "alertTypeId",
                  "value": "1"
                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "Get Alert Type by ID",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "const response = pm.response.json();",
                  "pm.test('Alert type retrieved successfully', () => {",
                  "  pm.expect(pm.response.code).to.equal(200);",
                  "  pm.expect(response.alert_type_id).to.exist;",
                  "});"
                ],
                "type": "text/javascript",
                "packages": {}
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{employeeAccessToken}}",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/alert-types/:alertTypeId",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "alert-types",
                ":alertTypeId"
              ],
              "variable": [
                {
                  "key": "alertTypeId",
                  "value": "1"
                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "Get All Alert Types",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "const response = pm.response.json();",
                  "pm.test('Alert types retrieved successfully', () => {",
                  "  pm.expect(pm.response.code).to.equal(200);",
                  "  pm.expect(response).to.be.an('array');",
                  "});"
                ],
                "type": "text/javascript",
                "packages": {}
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{employeeAccessToken}}",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/alert-types",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "alert-types"
              ]
            }
          },
          "response": []
        }
      ]
    },
    {
      "name": "Alert",
      "item": [
        {
          "name": "Create Alert",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "const response = pm.response.json();",
                  "pm.test('Alert created successfully', () => {",
                  "  pm.expect(pm.response.code).to.equal(201);",
                  "  pm.expect(response.alert_id).to.exist;",
                  "});"
                ],
                "type": "text/javascript",
                "packages": {}
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{employeeAccessToken}}",
                "type": "text"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"device_serial\": \"ABC123\",\n  \"space_id\": 1,\n  \"message\": \"Device malfunction\",\n  \"alert_type_id\": 1,\n  \"status\": \"unread\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{baseUrl}}/alerts",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "alerts"
              ]
            }
          },
          "response": []
        },
        {
          "name": "Update Alert",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "const response = pm.response.json();",
                  "pm.test('Alert updated successfully', () => {",
                  "  pm.expect(pm.response.code).to.equal(200);",
                  "  pm.expect(response.alert_id).to.exist;",
                  "});"
                ],
                "type": "text/javascript",
                "packages": {}
              }
            }
          ],
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{employeeAccessToken}}",
                "type": "text"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"message\": \"Updated malfunction alert\",\n  \"status\": \"read\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{baseUrl}}/alerts/:alertId",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "alerts",
                ":alertId"
              ],
              "variable": [
                {
                  "key": "alertId",
                  "value": "1"
                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "Soft Delete Alert",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Alert soft deleted successfully', () => {",
                  "  pm.expect(pm.response.code).to.equal(204);",
                  "});"
                ],
                "type": "text/javascript",
                "packages": {}
              }
            }
          ],
          "request": {
            "method": "DELETE",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{employeeAccessToken}}",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/alerts/:alertId/soft",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "alerts",
                ":alertId",
                "soft"
              ],
              "variable": [
                {
                  "key": "alertId",
                  "value": "1"
                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "Hard Delete Alert",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Alert hard deleted successfully', () => {",
                  "  pm.expect(pm.response.code).to.equal(204);",
                  "});"
                ],
                "type": "text/javascript",
                "packages": {}
              }
            }
          ],
          "request": {
            "method": "DELETE",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{employeeAccessToken}}",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/alerts/:alertId/hard",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "alerts",
                ":alertId",
                "hard"
              ],
              "variable": [
                {
                  "key": "alertId",
                  "value": "1"
                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "Get Alert by ID",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "const response = pm.response.json();",
                  "pm.test('Alert retrieved successfully', () => {",
                  "  pm.expect(pm.response.code).to.equal(200);",
                  "  pm.expect(response.alert_id).to.exist;",
                  "});"
                ],
                "type": "text/javascript",
                "packages": {}
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{employeeAccessToken}}",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/alerts/:alertId",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "alerts",
                ":alertId"
              ],
              "variable": [
                {
                  "key": "alertId",
                  "value": "1"
                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "Get All Alerts",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "const response = pm.response.json();",
                  "pm.test('Alerts retrieved successfully', () => {",
                  "  pm.expect(pm.response.code).to.equal(200);",
                  "  pm.expect(response).to.be.an('array');",
                  "});"
                ],
                "type": "text/javascript",
                "packages": {}
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{employeeAccessToken}}",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/alerts",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "alerts"
              ]
            }
          },
          "response": []
        }
      ]
    },
    {
      "name": "Firmware",
      "item": [
        {
          "name": "Get Firmware by ID",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "const response = pm.response.json();",
                  "pm.test('Firmware retrieved successfully', () => {",
                  "  pm.expect(pm.response.code).to.equal(200);",
                  "  pm.expect(response.firmware_id).to.exist;",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{employeeAccessToken}}",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/firmwares/detail/:firmwareId",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "firmwares",
                "detail",
                ":firmwareId"
              ],
              "variable": [
                {
                  "key": "firmwareId",
                  "value": "1"
                }
              ]
            },
            "description": "Get firmware details by ID"
          },
          "response": []
        },
        {
          "name": "Get All Firmwares",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "const response = pm.response.json();",
                  "pm.test('Firmware list retrieved successfully', () => {",
                  "  pm.expect(pm.response.code).to.equal(200);",
                  "  pm.expect(response).to.be.an('array');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{employeeAccessToken}}",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/firmwares",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "firmwares"
              ]
            },
            "description": "Get list of all firmwares"
          },
          "response": []
        },
        {
          "name": "Get Latest Firmware Versions by Template",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "const response = pm.response.json();",
                  "pm.test('Latest firmware versions retrieved successfully', () => {",
                  "  pm.expect(pm.response.code).to.equal(200);",
                  "  pm.expect(response).to.be.an('object');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{employeeAccessToken}}",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/firmwares/latest-version-by-template",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "firmwares",
                "latest-version-by-template"
              ]
            },
            "description": "Get latest firmware versions for each device template"
          },
          "response": []
        },
        {
          "name": "Get Firmwares by Template ID",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "const response = pm.response.json();",
                  "pm.test('Firmwares for template retrieved successfully', () => {",
                  "  pm.expect(pm.response.code).to.equal(200);",
                  "  pm.expect(response).to.be.an('array');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{employeeAccessToken}}",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/firmwares/by-template/:templateId",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "firmwares",
                "by-template",
                ":templateId"
              ],
              "variable": [
                {
                  "key": "templateId",
                  "value": "1"
                }
              ]
            },
            "description": "Get all firmwares for a specific device template"
          },
          "response": []
        },
        {
          "name": "Create Firmware",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "const response = pm.response.json();",
                  "pm.test('Firmware created successfully', () => {",
                  "  pm.expect(pm.response.code).to.equal(201);",
                  "  pm.expect(response.firmware_id).to.exist;",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{employeeAccessToken}}",
                "type": "text"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name\": \"Firmware v1.0\",\n  \"version\": \"1.0.0\",\n  \"file_path\": \"/firmware/v1.0.0.bin\",\n  \"template_id\": 1,\n  \"is_mandatory\": true,\n  \"note\": \"Initial firmware release\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{baseUrl}}/firmwares",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "firmwares"
              ]
            },
            "description": "Tạo phiên bản firmware mới trong hệ thống. Yêu cầu xác thực bằng Employee Token."
          },
          "response": []
        },
        {
          "name": "Update Firmware",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "const response = pm.response.json();",
                  "pm.test('Firmware updated successfully', () => {",
                  "  pm.expect(pm.response.code).to.equal(200);",
                  "  pm.expect(response.firmware_id).to.exist;",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{employeeAccessToken}}",
                "type": "text"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name\": \"Updated Firmware\",\n  \"version\": \"1.0.1\",\n  \"file_path\": \"/firmware/v1.0.1.bin\",\n  \"template_id\": 1,\n  \"is_mandatory\": false,\n  \"note\": \"Updated firmware release\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{baseUrl}}/firmwares/edit/:firmwareId",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "firmwares",
                "edit",
                ":firmwareId"
              ],
              "variable": [
                {
                  "key": "firmwareId",
                  "value": "1"
                }
              ]
            },
            "description": "Cập nhật thông tin cho phiên bản firmware đã tồn tại"
          },
          "response": []
        },
        {
          "name": "Confirm Firmware By Tester",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "const response = pm.response.json();",
                  "pm.test('Firmware confirmed by tester successfully', () => {",
                  "  pm.expect(pm.response.code).to.equal(200);",
                  "  pm.expect(response.success).to.be.true;",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "PATCH",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{employeeAccessToken}}",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/firmwares/confirm-by-tester",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "firmwares",
                "confirm-by-tester"
              ]
            },
            "body": {
              "mode": "raw",
              "raw": "{\n  \"firmwareId\": 1\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "description": "Xác nhận firmware bởi nhân viên kiểm thử"
          },
          "response": []
        },
        {
          "name": "Confirm Firmware By RD",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "const response = pm.response.json();",
                  "pm.test('Firmware confirmed by R&D successfully', () => {",
                  "  pm.expect(pm.response.code).to.equal(200);",
                  "  pm.expect(response.success).to.be.true;",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "PATCH",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{employeeAccessToken}}",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/firmwares/confirm-by-rd",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "firmwares",
                "confirm-by-rd"
              ]
            },
            "body": {
              "mode": "raw",
              "raw": "{\n  \"firmwareId\": 1\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "description": "Xác nhận firmware bởi bộ phận R&D"
          },
          "response": []
        },
        {
          "name": "Delete Firmware",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Firmware deleted successfully', () => {",
                  "  pm.expect(pm.response.code).to.equal(200);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "DELETE",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{employeeAccessToken}}",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/firmwares/:firmwareId",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "firmwares",
                ":firmwareId"
              ],
              "variable": [
                {
                  "key": "firmwareId",
                  "value": "1"
                }
              ]
            },
            "description": "Xóa một phiên bản firmware khỏi hệ thống. Yêu cầu xác thực bằng Employee Token."
          },
          "response": []
        }
      ]
    },
    {
      "name": "Firmware Update History",
      "item": [
        {
          "name": "Create Firmware Update History",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "const response = pm.response.json();",
                  "pm.test('Firmware update history created successfully', () => {",
                  "  pm.expect(pm.response.code).to.equal(201);",
                  "  pm.expect(response.update_id).to.exist;",
                  "});"
                ],
                "type": "text/javascript",
                "packages": {}
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{employeeAccessToken}}",
                "type": "text"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"device_serial\": \"ABC123\",\n  \"firmware_id\": 1,\n  \"status\": \"success\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{baseUrl}}/firmware-update-histories",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "firmware-update-histories"
              ]
            }
          },
          "response": []
        },
        {
          "name": "Update Firmware Update History",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "const response = pm.response.json();",
                  "pm.test('Firmware update history updated successfully', () => {",
                  "  pm.expect(pm.response.code).to.equal(200);",
                  "  pm.expect(response.update_id).to.exist;",
                  "});"
                ],
                "type": "text/javascript",
                "packages": {}
              }
            }
          ],
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{employeeAccessToken}}",
                "type": "text"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"status\": \"failed\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{baseUrl}}/firmware-update-histories/:updateId",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "firmware-update-histories",
                ":updateId"
              ],
              "variable": [
                {
                  "key": "updateId",
                  "value": "1"
                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "Delete Firmware Update History",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Firmware update history deleted successfully', () => {",
                  "  pm.expect(pm.response.code).to.equal(204);",
                  "});"
                ],
                "type": "text/javascript",
                "packages": {}
              }
            }
          ],
          "request": {
            "method": "DELETE",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{employeeAccessToken}}",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/firmware-update-histories/:updateId",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "firmware-update-histories",
                ":updateId"
              ],
              "variable": [
                {
                  "key": "updateId",
                  "value": "1"
                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "Get Firmware Update History by ID",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "const response = pm.response.json();",
                  "pm.test('Firmware update history retrieved successfully', () => {",
                  "  pm.expect(pm.response.code).to.equal(200);",
                  "  pm.expect(response.update_id).to.exist;",
                  "});"
                ],
                "type": "text/javascript",
                "packages": {}
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{employeeAccessToken}}",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/firmware-update-histories/:updateId",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "firmware-update-histories",
                ":updateId"
              ],
              "variable": [
                {
                  "key": "updateId",
                  "value": "1"
                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "Get Firmware Update Histories",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "const response = pm.response.json();",
                  "pm.test('Firmware update histories retrieved successfully', () => {",
                  "  pm.expect(pm.response.code).to.equal(200);",
                  "  pm.expect(response).to.be.an('array');",
                  "});"
                ],
                "type": "text/javascript",
                "packages": {}
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{employeeAccessToken}}",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/firmware-update-histories?device_serial=ABC123&page=1&limit=10",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "firmware-update-histories"
              ],
              "query": [
                {
                  "key": "device_serial",
                  "value": "ABC123"
                },
                {
                  "key": "page",
                  "value": "1"
                },
                {
                  "key": "limit",
                  "value": "10"
                }
              ]
            }
          },
          "response": []
        }
      ]
    },
    {
      "name": "Ownership History",
      "item": [
        {
          "name": "Initiate Ownership Transfer",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "const response = pm.response.json();",
                  "pm.test('Ownership transfer initiated successfully', () => {",
                  "  pm.expect(pm.response.code).to.equal(200);",
                  "  pm.expect(response.success).to.be.true;",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{userAccessToken}}",
                "type": "text"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"device_serial\": \"ABC123\",\n  \"to_user_email\": \"recipient@example.com\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{baseUrl}}/ownership-history/transfer",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "ownership-history",
                "transfer"
              ]
            }
          },
          "response": []
        },
        {
          "name": "Approve Ownership Transfer",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "const response = pm.response.json();",
                  "pm.test('Ownership transfer approved successfully', () => {",
                  "  pm.expect(pm.response.code).to.equal(200);",
                  "  pm.expect(response.success).to.be.true;",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{userAccessToken}}",
                "type": "text"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"accept\": true\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{baseUrl}}/ownership-history/transfer/:ticketId/approve",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "ownership-history",
                "transfer",
                ":ticketId",
                "approve"
              ],
              "variable": [
                {
                  "key": "ticketId",
                  "value": "TICKET123"
                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "Get Ownership History by ID",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "const response = pm.response.json();",
                  "pm.test('Ownership history retrieved successfully', () => {",
                  "  pm.expect(pm.response.code).to.equal(200);",
                  "  pm.expect(response.data).to.exist;",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{userAccessToken}}",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/ownership-history/:historyId",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "ownership-history",
                ":historyId"
              ],
              "variable": [
                {
                  "key": "historyId",
                  "value": "1"
                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "Get Ownership History by Device",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "const response = pm.response.json();",
                  "pm.test('Ownership history retrieved successfully', () => {",
                  "  pm.expect(pm.response.code).to.equal(200);",
                  "  pm.expect(response.data).to.be.an('array');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{userAccessToken}}",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/ownership-history/device/:device_serial",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "ownership-history",
                "device",
                ":device_serial"
              ],
              "variable": [
                {
                  "key": "device_serial",
                  "value": "ABC123"
                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "Get User's Ownership History",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "const response = pm.response.json();",
                  "pm.test('User ownership history retrieved successfully', () => {",
                  "  pm.expect(pm.response.code).to.equal(200);",
                  "  pm.expect(response.data).to.be.an('array');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{userAccessToken}}",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/ownership-history/user",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "ownership-history",
                "user"
              ]
            }
          },
          "response": []
        },
        {
          "name": "Delete Ownership History",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Ownership history deleted successfully', () => {",
                  "  pm.expect(pm.response.code).to.equal(200);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "DELETE",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{userAccessToken}}",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/ownership-history/:historyId",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "ownership-history",
                ":historyId"
              ],
              "variable": [
                {
                  "key": "historyId",
                  "value": "1"
                }
              ]
            }
          },
          "response": []
        }
      ]
    },
    {
      "name": "Ticket Type",
      "item": [
        {
          "name": "Create Ticket Type",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "const response = pm.response.json();",
                  "pm.test('Ticket type created successfully', () => {",
                  "  pm.expect(pm.response.code).to.equal(201);",
                  "  pm.expect(response.ticket_type_id).to.exist;",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{employeeAccessToken}}",
                "type": "text"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"ticket_type_name\": \"Hardware Malfunction\",\n  \"priority\": 3,\n  \"is_active\": true\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{baseUrl}}/ticket-types",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "ticket-types"
              ]
            },
            "description": "Create a new ticket type. Requires employee authentication and admin role."
          },
          "response": []
        },
        {
          "name": "Update Ticket Type",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "const response = pm.response.json();",
                  "pm.test('Ticket type updated successfully', () => {",
                  "  pm.expect(pm.response.code).to.equal(200);",
                  "  pm.expect(response.ticket_type_id).to.exist;",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{employeeAccessToken}}",
                "type": "text"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"ticket_type_name\": \"Updated Hardware Issue Type\",\n  \"is_active\": true\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{baseUrl}}/ticket-types/:ticketTypeId",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "ticket-types",
                ":ticketTypeId"
              ],
              "variable": [
                {
                  "key": "ticketTypeId",
                  "value": "1",
                  "description": "ID of the ticket type to update"
                }
              ]
            },
            "description": "Update an existing ticket type. Requires employee authentication and admin role."
          },
          "response": []
        },
        {
          "name": "Update Ticket Type Priority",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "const response = pm.response.json();",
                  "pm.test('Ticket type priority updated successfully', () => {",
                  "  pm.expect(pm.response.code).to.equal(200);",
                  "  pm.expect(response.ticket_type_id).to.exist;",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{employeeAccessToken}}",
                "type": "text"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"priority\": 4\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{baseUrl}}/ticket-types/:ticketTypeId/priority",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "ticket-types",
                ":ticketTypeId",
                "priority"
              ],
              "variable": [
                {
                  "key": "ticketTypeId",
                  "value": "1",
                  "description": "ID of the ticket type to update priority"
                }
              ]
            },
            "description": "Update priority of a ticket type. Requires employee authentication and admin role."
          },
          "response": []
        },
        {
          "name": "Delete Ticket Type",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Ticket type deleted successfully', () => {",
                  "  pm.expect(pm.response.code).to.equal(204);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "DELETE",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{employeeAccessToken}}",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/ticket-types/:ticketTypeId",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "ticket-types",
                ":ticketTypeId"
              ],
              "variable": [
                {
                  "key": "ticketTypeId",
                  "value": "1",
                  "description": "ID of the ticket type to delete"
                }
              ]
            },
            "description": "Delete a ticket type. Requires employee authentication and admin role."
          },
          "response": []
        },
        {
          "name": "Get Ticket Type by ID",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "const response = pm.response.json();",
                  "pm.test('Ticket type retrieved successfully', () => {",
                  "  pm.expect(pm.response.code).to.equal(200);",
                  "  pm.expect(response.ticket_type_id).to.exist;",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{employeeAccessToken}}",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/ticket-types/:ticketTypeId",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "ticket-types",
                ":ticketTypeId"
              ],
              "variable": [
                {
                  "key": "ticketTypeId",
                  "value": "1",
                  "description": "ID of the ticket type to retrieve"
                }
              ]
            },
            "description": "Get details of a specific ticket type. Requires authentication."
          },
          "response": []
        },
        {
          "name": "Get All Ticket Types",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "const response = pm.response.json();",
                  "pm.test('Ticket types retrieved successfully', () => {",
                  "  pm.expect(pm.response.code).to.equal(200);",
                  "  pm.expect(response).to.be.an('array');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{employeeAccessToken}}",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/ticket-types",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "ticket-types"
              ]
            },
            "description": "Get all ticket types. Requires authentication."
          },
          "response": []
        }
      ]
    },
    {
      "name": "Ticket",
      "item": [
        {
          "name": "Create Ticket",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "const response = pm.response.json();",
                  "pm.test('Ticket created successfully', () => {",
                  "  pm.expect(pm.response.code).to.equal(201);",
                  "  pm.expect(response.ticket_id).to.exist;",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{userAccessToken}}",
                "type": "text"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"title\": \"Device not responding\",\n  \"description\": \"LED controller not responding after firmware update\",\n  \"ticket_type_id\": 1,\n  \"device_serial\": \"LED24_001\",\n  \"evidence\": {\n    \"images\": [\"error_screenshot.jpg\"],\n    \"logs\": [\"device_log.txt\"]\n  }\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{baseUrl}}/tickets",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "tickets"
              ]
            },
            "description": "Create a new support ticket. Requires user authentication."
          },
          "response": []
        },
        {
          "name": "Update Ticket",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "const response = pm.response.json();",
                  "pm.test('Ticket updated successfully', () => {",
                  "  pm.expect(pm.response.code).to.equal(200);",
                  "  pm.expect(response.ticket_id).to.exist;",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{employeeAccessToken}}",
                "type": "text"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"title\": \"Updated: Device not responding\",\n  \"description\": \"Updated description of the issue\",\n  \"status\": \"in_progress\",\n  \"assigned_to\": \"employee_id_123\",\n  \"resolve_solution\": \"Checked device logs and identified firmware incompatibility\",\n  \"evidence\": {\n    \"images\": [\"updated_screenshot.jpg\"],\n    \"logs\": [\"updated_log.txt\"]\n  }\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{baseUrl}}/tickets/:ticketId",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "tickets",
                ":ticketId"
              ],
              "variable": [
                {
                  "key": "ticketId",
                  "value": "1",
                  "description": "ID of the ticket to update"
                }
              ]
            },
            "description": "Update an existing ticket. Requires employee authentication."
          },
          "response": []
        },
        {
          "name": "Delete Ticket",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Ticket deleted successfully', () => {",
                  "  pm.expect(pm.response.code).to.equal(204);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "DELETE",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{employeeAccessToken}}",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/tickets/:ticketId",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "tickets",
                ":ticketId"
              ],
              "variable": [
                {
                  "key": "ticketId",
                  "value": "1",
                  "description": "ID of the ticket to delete"
                }
              ]
            },
            "description": "Delete a ticket. Requires employee authentication and admin role."
          },
          "response": []
        },
        {
          "name": "Get Ticket by ID",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "const response = pm.response.json();",
                  "pm.test('Ticket retrieved successfully', () => {",
                  "  pm.expect(pm.response.code).to.equal(200);",
                  "  pm.expect(response.ticket_id).to.exist;",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{userAccessToken}}",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/tickets/:ticketId",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "tickets",
                ":ticketId"
              ],
              "variable": [
                {
                  "key": "ticketId",
                  "value": "1",
                  "description": "ID of the ticket to retrieve"
                }
              ]
            },
            "description": "Get details of a specific ticket. Requires authentication."
          },
          "response": []
        },
        {
          "name": "Get Tickets by User",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "const response = pm.response.json();",
                  "pm.test('User tickets retrieved successfully', () => {",
                  "  pm.expect(pm.response.code).to.equal(200);",
                  "  pm.expect(response).to.be.an('array');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{userAccessToken}}",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/tickets/user",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "tickets",
                "user"
              ]
            },
            "description": "Get all tickets created by the current user. Requires user authentication."
          },
          "response": []
        },
        {
          "name": "Get All Tickets",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "const response = pm.response.json();",
                  "pm.test('All tickets retrieved successfully', () => {",
                  "  pm.expect(pm.response.code).to.equal(200);",
                  "  pm.expect(response).to.be.an('array');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{employeeAccessToken}}",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/tickets",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "tickets"
              ],
              "query": [
                {
                  "key": "user_id",
                  "value": "user123",
                  "description": "Filter by user ID",
                  "disabled": true
                },
                {
                  "key": "ticket_type_id",
                  "value": "1",
                  "description": "Filter by ticket type",
                  "disabled": true
                },
                {
                  "key": "status",
                  "value": "pending",
                  "description": "Filter by status",
                  "disabled": true
                },
                {
                  "key": "created_at_start",
                  "value": "2025-01-01T00:00:00Z",
                  "description": "Filter by creation date start",
                  "disabled": true
                },
                {
                  "key": "created_at_end",
                  "value": "2025-12-31T23:59:59Z",
                  "description": "Filter by creation date end",
                  "disabled": true
                },
                {
                  "key": "page",
                  "value": "1",
                  "description": "Page number",
                  "disabled": true
                },
                {
                  "key": "limit",
                  "value": "10",
                  "description": "Items per page",
                  "disabled": true
                }
              ]
            },
            "description": "Get all tickets with optional filters. Requires employee authentication and admin role."
          },
          "response": []
        },
        {
          "name": "Confirm Ticket",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "const response = pm.response.json();",
                  "pm.test('Ticket confirmed successfully', () => {",
                  "  pm.expect(pm.response.code).to.equal(200);",
                  "  pm.expect(response.ticket_id).to.exist;",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{employeeAccessToken}}",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/tickets/:ticketId/confirm",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "tickets",
                ":ticketId",
                "confirm"
              ],
              "variable": [
                {
                  "key": "ticketId",
                  "value": "1",
                  "description": "ID of the ticket to confirm"
                }
              ]
            },
            "description": "Confirm a ticket for processing. Requires employee authentication."
          },
          "response": []
        },
        {
          "name": "Update Ticket Status",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "const response = pm.response.json();",
                  "pm.test('Ticket status updated successfully', () => {",
                  "  pm.expect(pm.response.code).to.equal(200);",
                  "  pm.expect(response.ticket_id).to.exist;",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{employeeAccessToken}}",
                "type": "text"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"status\": \"resolved\",\n  \"resolve_solution\": \"Issue has been resolved by updating firmware\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{baseUrl}}/tickets/:ticketId/status",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "tickets",
                ":ticketId",
                "status"
              ],
              "variable": [
                {
                  "key": "ticketId",
                  "value": "1",
                  "description": "ID of the ticket to update status"
                }
              ]
            },
            "description": "Update ticket status. Requires employee authentication."
          },
          "response": []
        },
        {
          "name": "Cancel Ticket",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "const response = pm.response.json();",
                  "pm.test('Ticket cancelled successfully', () => {",
                  "  pm.expect(pm.response.code).to.equal(200);",
                  "  pm.expect(response.ticket_id).to.exist;",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{userAccessToken}}",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/tickets/:ticketId/cancel",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "tickets",
                ":ticketId",
                "cancel"
              ],
              "variable": [
                {
                  "key": "ticketId",
                  "value": "1",
                  "description": "ID of the ticket to cancel"
                }
              ]
            },
            "description": "Cancel a ticket. Requires user authentication and must be the ticket creator."
          },
          "response": []
        }
      ]
    },
    {
      "name": "Hourly Value",
      "item": [
        {
          "name": "Create Hourly Value",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "const response = pm.response.json();",
                  "pm.test('Hourly Value created successfully', () => {",
                  "  pm.expect(pm.response.code).to.equal(201);",
                  "  pm.expect(response.hourly_value_id).to.exist;",
                  "});"
                ],
                "type": "text/javascript",
                "packages": {}
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{employeeAccessToken}}",
                "type": "text"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"device_serial\": \"ABC123\",\n  \"space_id\": 1,\n  \"hour_timestamp\": \"2025-05-20T10:00:00Z\",\n  \"avg_value\": {\"temperature\": 25.5, \"humidity\": 60, \"gas\": 200},\n  \"sample_count\": 360\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{baseUrl}}/hourly-values",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "hourly-values"
              ]
            }
          },
          "response": []
        },
        {
          "name": "Update Hourly Value",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "const response = pm.response.json();",
                  "pm.test('Hourly Value updated successfully', () => {",
                  "  pm.expect(pm.response.code).to.equal(200);",
                  "  pm.expect(response.hourly_value_id).to.exist;",
                  "});"
                ],
                "type": "text/javascript",
                "packages": {}
              }
            }
          ],
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{employeeAccessToken}}",
                "type": "text"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"avg_value\": {\"temperature\": 26.0, \"humidity\": 65, \"gas\": 210},\n  \"sample_count\": 400\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{baseUrl}}/hourly-values/:hourlyValueId",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "hourly-values",
                ":hourlyValueId"
              ],
              "variable": [
                {
                  "key": "hourlyValueId",
                  "value": "1"
                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "Soft Delete Hourly Value",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Hourly Value soft deleted successfully', () => {",
                  "  pm.expect(pm.response.code).to.equal(204);",
                  "});"
                ],
                "type": "text/javascript",
                "packages": {}
              }
            }
          ],
          "request": {
            "method": "DELETE",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{employeeAccessToken}}",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/hourly-values/:hourlyValueId/soft",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "hourly-values",
                ":hourlyValueId",
                "soft"
              ],
              "variable": [
                {
                  "key": "hourlyValueId",
                  "value": "1"
                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "Hard Delete Hourly Value",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Hourly Value hard deleted successfully', () => {",
                  "  pm.expect(pm.response.code).to.equal(204);",
                  "});"
                ],
                "type": "text/javascript",
                "packages": {}
              }
            }
          ],
          "request": {
            "method": "DELETE",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{employeeAccessToken}}",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/hourly-values/:hourlyValueId/hard",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "hourly-values",
                ":hourlyValueId",
                "hard"
              ],
              "variable": [
                {
                  "key": "hourlyValueId",
                  "value": "1"
                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "Get Hourly Value by ID",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "const response = pm.response.json();",
                  "pm.test('Hourly Value retrieved successfully', () => {",
                  "  pm.expect(pm.response.code).to.equal(200);",
                  "  pm.expect(response.hourly_value_id).to.exist;",
                  "});"
                ],
                "type": "text/javascript",
                "packages": {}
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{employeeAccessToken}}",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/hourly-values/:hourlyValueId",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "hourly-values",
                ":hourlyValueId"
              ],
              "variable": [
                {
                  "key": "hourlyValueId",
                  "value": "1"
                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "Get All Hourly Values",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "const response = pm.response.json();",
                  "pm.test('Hourly Values retrieved successfully', () => {",
                  "  pm.expect(pm.response.code).to.equal(200);",
                  "  pm.expect(response).to.be.an('array');",
                  "});"
                ],
                "type": "text/javascript",
                "packages": {}
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{employeeAccessToken}}",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/hourly-values",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "hourly-values"
              ]
            }
          },
          "response": []
        },
        {
          "name": "Get Hourly Values by Device",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "const response = pm.response.json();",
                  "pm.test('Hourly Values by Device retrieved successfully', () => {",
                  "  pm.expect(pm.response.code).to.equal(200);",
                  "  pm.expect(response).to.be.an('array');",
                  "});"
                ],
                "type": "text/javascript",
                "packages": {}
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{employeeAccessToken}}",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/hourly-values/device/:device_serial?start_time=2025-05-20T00:00:00Z&end_time=2025-05-21T00:00:00Z&page=1&limit=10",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "hourly-values",
                "device",
                ":device_serial"
              ],
              "query": [
                {
                  "key": "start_time",
                  "value": "2025-05-20T00:00:00Z"
                },
                {
                  "key": "end_time",
                  "value": "2025-05-21T00:00:00Z"
                },
                {
                  "key": "page",
                  "value": "1"
                },
                {
                  "key": "limit",
                  "value": "10"
                }
              ],
              "variable": [
                {
                  "key": "device_serial",
                  "value": "ABC123"
                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "Get Hourly Values by Space",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "const response = pm.response.json();",
                  "pm.test('Hourly Values by Space retrieved successfully', () => {",
                  "  pm.expect(pm.response.code).to.equal(200);",
                  "  pm.expect(response).to.be.an('array');",
                  "});"
                ],
                "type": "text/javascript",
                "packages": {}
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{employeeAccessToken}}",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/hourly-values/space/:spaceId?start_time=2025-05-20T00:00:00Z&end_time=2025-05-21T00:00:00Z&page=1&limit=10",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "hourly-values",
                "space",
                ":spaceId"
              ],
              "query": [
                {
                  "key": "start_time",
                  "value": "2025-05-20T00:00:00Z"
                },
                {
                  "key": "end_time",
                  "value": "2025-05-21T00:00:00Z"
                },
                {
                  "key": "page",
                  "value": "1"
                },
                {
                  "key": "limit",
                  "value": "10"
                }
              ],
              "variable": [
                {
                  "key": "spaceId",
                  "value": "1"
                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "Get Hourly Value Statistics",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "const response = pm.response.json();",
                  "pm.test('Hourly Value Statistics retrieved successfully', () => {",
                  "  pm.expect(pm.response.code).to.equal(200);",
                  "  pm.expect(response.stats).to.be.an('array');",
                  "  pm.expect(response.chart).to.exist;",
                  "});"
                ],
                "type": "text/javascript",
                "packages": {}
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{employeeAccessToken}}",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/hourly-values/statistics/:device_serial?type=daily&start_time=2025-05-20T00:00:00Z&end_time=2025-05-21T00:00:00Z",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "hourly-values",
                "statistics",
                ":device_serial"
              ],
              "query": [
                {
                  "key": "type",
                  "value": "daily"
                },
                {
                  "key": "start_time",
                  "value": "2025-05-20T00:00:00Z"
                },
                {
                  "key": "end_time",
                  "value": "2025-05-21T00:00:00Z"
                }
              ],
              "variable": [
                {
                  "key": "device_serial",
                  "value": "ABC123"
                }
              ]
            }
          },
          "response": []
        }
      ]
    },
    {
      "name": "Component",
      "description": "Quản lý linh kiện dùng trong sản xuất",
      "item": [
        {
          "name": "Create Component",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{employeeAccessToken}}",
                "type": "text"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name\": \"Motor Control Board\",\n  \"supplier\": \"Electronics Ltd\",\n  \"unit_cost\": 15.50,\n  \"status\": 1\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{baseUrl}}/component",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "component"
              ]
            },
            "description": "Tạo mới một linh kiện. Yêu cầu quyền nhân viên."
          },
          "response": []
        },
        {
          "name": "Get Component by ID",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{employeeAccessToken}}",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/component/:componentId",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "component",
                ":componentId"
              ],
              "variable": [
                {
                  "key": "componentId",
                  "value": "COMP001"
                }
              ]
            },
            "description": "Lấy thông tin chi tiết của một linh kiện"
          },
          "response": []
        },
        {
          "name": "Get All Components",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{employeeAccessToken}}",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/component",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "component"
              ]
            },
            "description": "Lấy danh sách tất cả linh kiện"
          },
          "response": []
        },
        {
          "name": "Update Component",
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{employeeAccessToken}}",
                "type": "text"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name\": \"Updated Motor Board\",\n  \"supplier\": \"New Electronics Ltd\",\n  \"unit_cost\": 18.75,\n  \"status\": 1\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{baseUrl}}/component/:componentId",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "component",
                ":componentId"
              ],
              "variable": [
                {
                  "key": "componentId",
                  "value": "COMP001"
                }
              ]
            },
            "description": "Cập nhật thông tin linh kiện"
          },
          "response": []
        },
        {
          "name": "Delete Component",
          "request": {
            "method": "DELETE",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{employeeAccessToken}}",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/component/:componentId",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "component",
                ":componentId"
              ],
              "variable": [
                {
                  "key": "componentId",
                  "value": "COMP001"
                }
              ]
            },
            "description": "Xóa một linh kiện (soft delete)"
          },
          "response": []
        }
      ]
    },
    {
      "name": "Template Components",
      "item": [
        {
          "name": "Create Template Component",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "const response = pm.response.json();",
                  "pm.test('Template component created successfully', () => {",
                  "  pm.expect(pm.response.code).to.equal(201);",
                  "  pm.expect(response.template_component_id).to.exist;",
                  "});"
                ],
                "type": "text/javascript",
                "packages": {}
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{employeeAccessToken}}",
                "type": "text"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"template_id\": 1,\n  \"component_id\": 1,\n  \"quantity_required\": 1\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{baseUrl}}/template-components",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "template-components"
              ]
            }
          },
          "response": []
        },
        {
          "name": "Get All Template Components",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "const response = pm.response.json();",
                  "pm.test('Template components retrieved successfully', () => {",
                  "  pm.expect(pm.response.code).to.equal(200);",
                  "  pm.expect(response).to.be.an('array');",
                  "});"
                ],
                "type": "text/javascript",
                "packages": {}
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{employeeAccessToken}}",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/template-components",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "template-components"
              ]
            }
          },
          "response": []
        },
        {
          "name": "Get Template Component by ID",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "const response = pm.response.json();",
                  "pm.test('Template component retrieved successfully', () => {",
                  "  pm.expect(pm.response.code).to.equal(200);",
                  "  pm.expect(response.template_component_id).to.exist;",
                  "});"
                ],
                "type": "text/javascript",
                "packages": {}
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{employeeAccessToken}}",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/template-components/:templateComponentId",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "template-components",
                ":templateComponentId"
              ],
              "variable": [
                {
                  "key": "templateComponentId",
                  "value": "1"
                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "Update Template Component",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "const response = pm.response.json();",
                  "pm.test('Template component updated successfully', () => {",
                  "  pm.expect(pm.response.code).to.equal(200);",
                  "  pm.expect(response.template_component_id).to.exist;",
                  "});"
                ],
                "type": "text/javascript",
                "packages": {}
              }
            }
          ],
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{employeeAccessToken}}",
                "type": "text"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"template_id\": 1,\n  \"component_id\": 1,\n  \"quantity_required\": 2\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{baseUrl}}/template-components/:templateComponentId",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "template-components",
                ":templateComponentId"
              ],
              "variable": [
                {
                  "key": "templateComponentId",
                  "value": "1"
                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "Delete Template Component",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Template component deleted successfully', () => {",
                  "  pm.expect(pm.response.code).to.equal(204);",
                  "});"
                ],
                "type": "text/javascript",
                "packages": {}
              }
            }
          ],
          "request": {
            "method": "DELETE",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{employeeAccessToken}}",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/template-components/:templateComponentId",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "template-components",
                ":templateComponentId"
              ],
              "variable": [
                {
                  "key": "templateComponentId",
                  "value": "1"
                }
              ]
            }
          },
          "response": []
        }
      ]
    },
    {
      "name": "Device Templates",
      "item": [
        {
          "name": "Create Device Template",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "const response = pm.response.json();",
                  "pm.test('Device template created successfully', () => {",
                  "  pm.expect(pm.response.code).to.equal(201);",
                  "  pm.expect(response.template_id).to.exist;",
                  "});"
                ],
                "type": "text/javascript",
                "packages": {}
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{employeeAccessToken}}",
                "type": "text"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name\": \"Smart Light v1\",\n  \"description\": \"Standard smart light template\",\n  \"version\": \"1.0.0\",\n  \"category\": \"lighting\",\n  \"specifications\": {\n    \"power\": \"10W\",\n    \"voltage\": \"220V\",\n    \"connectivity\": \"WiFi\",\n    \"protocol\": \"MQTT\"\n  }\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{baseUrl}}/device-templates",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "device-templates"
              ]
            }
          },
          "response": []
        },
        {
          "name": "Get Device Template by ID",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "const response = pm.response.json();",
                  "pm.test('Device template retrieved successfully', () => {",
                  "  pm.expect(pm.response.code).to.equal(200);",
                  "  pm.expect(response.template_id).to.exist;",
                  "});"
                ],
                "type": "text/javascript",
                "packages": {}
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{employeeAccessToken}}",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/device-templates/:templateId",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "device-templates",
                ":templateId"
              ],
              "variable": [
                {
                  "key": "templateId",
                  "value": "1"
                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "Get All Device Templates",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "const response = pm.response.json();",
                  "pm.test('Device templates retrieved successfully', () => {",
                  "  pm.expect(pm.response.code).to.equal(200);",
                  "  pm.expect(response).to.be.an('array');",
                  "});"
                ],
                "type": "text/javascript",
                "packages": {}
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{employeeAccessToken}}",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/device-templates",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "device-templates"
              ]
            }
          },
          "response": []
        },
        {
          "name": "Update Device Template",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "const response = pm.response.json();",
                  "pm.test('Device template updated successfully', () => {",
                  "  pm.expect(pm.response.code).to.equal(200);",
                  "  pm.expect(response.template_id).to.exist;",
                  "});"
                ],
                "type": "text/javascript",
                "packages": {}
              }
            }
          ],
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{employeeAccessToken}}",
                "type": "text"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name\": \"Smart Light v1.1\",\n  \"description\": \"Updated smart light template\",\n  \"version\": \"1.1.0\",\n  \"category\": \"lighting\",\n  \"specifications\": {\n    \"power\": \"12W\",\n    \"voltage\": \"220V\",\n    \"connectivity\": \"WiFi+BLE\",\n    \"protocol\": \"MQTT\"\n  }\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{baseUrl}}/device-templates/:templateId",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "device-templates",
                ":templateId"
              ],
              "variable": [
                {
                  "key": "templateId",
                  "value": "1"
                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "Delete Device Template",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Device template deleted successfully', () => {",
                  "  pm.expect(pm.response.code).to.equal(204);",
                  "});"
                ],
                "type": "text/javascript",
                "packages": {}
              }
            }
          ],
          "request": {
            "method": "DELETE",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{employeeAccessToken}}",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/device-templates/:templateId",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "device-templates",
                ":templateId"
              ],
              "variable": [
                {
                  "key": "templateId",
                  "value": "1"
                }
              ]
            }
          },
          "response": []
        }
      ]
    },
    {
      "name": "Production Batches",
      "item": [
        {
          "name": "Get All Production Batches",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "const response = pm.response.json();",
                  "pm.test('Production batches retrieved successfully', () => {",
                  "  pm.expect(pm.response.code).to.equal(200);",
                  "  pm.expect(response).to.be.an('array');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{employeeAccessToken}}",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/production-batches?status=pending&page=1&limit=10",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "production-batches"
              ],
              "query": [
                {
                  "key": "status",
                  "value": "pending",
                  "description": "Filter by status (pending/approved/rejected/in_progress/completed)",
                  "disabled": true
                },
                {
                  "key": "page",
                  "value": "1",
                  "description": "Page number",
                  "disabled": true
                },
                {
                  "key": "limit",
                  "value": "10",
                  "description": "Items per page (max 100)",
                  "disabled": true
                }
              ]
            },
            "description": "Get list of all production batches with optional filters and pagination"
          },
          "response": []
        },
        {
          "name": "Create Production Batch",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "const response = pm.response.json();",
                  "pm.test('Production batch created successfully', () => {",
                  "  pm.expect(pm.response.code).to.equal(201);",
                  "  pm.expect(response.production_batch_id).to.exist;",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{employeeAccessToken}}",
                "type": "text"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"template_id\": 1,\n  \"quantity\": 100\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{baseUrl}}/production-batches",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "production-batches"
              ]
            },
            "description": "Create a new production batch"
          },
          "response": []
        },
        {
          "name": "Get Production Batch by ID",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "const response = pm.response.json();",
                  "pm.test('Production batch retrieved successfully', () => {",
                  "  pm.expect(pm.response.code).to.equal(200);",
                  "  pm.expect(response.production_batch_id).to.exist;",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{employeeAccessToken}}",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/production-batches/:batchId",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "production-batches",
                ":batchId"
              ],
              "variable": [
                {
                  "key": "batchId",
                  "value": "1",
                  "description": "ID of the production batch"
                }
              ]
            },
            "description": "Get details of a specific production batch by ID"
          },
          "response": []
        },
        {
          "name": "Update Production Batch",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "const response = pm.response.json();",
                  "pm.test('Production batch updated successfully', () => {",
                  "  pm.expect(pm.response.code).to.equal(200);",
                  "  pm.expect(response.production_batch_id).to.exist;",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{employeeAccessToken}}",
                "type": "text"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"template_id\": 1,\n  \"quantity\": 150,\n  \"status\": \"in_progress\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{baseUrl}}/production-batches/:batchId",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "production-batches",
                ":batchId"
              ],
              "variable": [
                {
                  "key": "batchId",
                  "value": "1",
                  "description": "ID of the production batch to update"
                }
              ]
            },
            "description": "Update details of an existing production batch"
          },
          "response": []
        },
        {
          "name": "Delete Production Batch",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Production batch deleted successfully', () => {",
                  "  pm.expect(pm.response.code).to.equal(204);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "DELETE",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{employeeAccessToken}}",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/production-batches/:batchId",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "production-batches",
                ":batchId"
              ],
              "variable": [
                {
                  "key": "batchId",
                  "value": "1",
                  "description": "ID of the production batch to delete"
                }
              ]
            },
            "description": "Delete a production batch from the system"
          },
          "response": []
        }
      ]
    },
    {
      "name": "Production Tracking",
      "item": [
        {
          "name": "Get Production Tracking by Batch ID",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "const response = pm.response.json();",
                  "pm.test('Production tracking data retrieved successfully', () => {",
                  "  pm.expect(pm.response.code).to.equal(200);",
                  "  pm.expect(response.success).to.be.true;",
                  "  pm.expect(response.data).to.have.all.keys('pending', 'assembly', 'qc', 'completed');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{employeeAccessToken}}",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/production-tracking/by-batch/:batchId",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "production-tracking",
                "by-batch",
                ":batchId"
              ],
              "variable": [
                {
                  "key": "batchId",
                  "value": "1"
                }
              ]
            },
            "description": "Get production tracking details grouped by stages for a specific batch"
          },
          "response": []
        },
        {
          "name": "Get Production Tracking by Stage",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "const response = pm.response.json();",
                  "pm.test('Production tracking by stage retrieved successfully', () => {",
                  "  pm.expect(pm.response.code).to.equal(200);",
                  "  pm.expect(response.success).to.be.true;",
                  "  pm.expect(response.data).to.be.an('object');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{employeeAccessToken}}",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/production-tracking/by-stage/:stage",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "production-tracking",
                "by-stage",
                ":stage"
              ],
              "variable": [
                {
                  "key": "stage",
                  "value": "assembly",
                  "description": "Stage can be: pending, assembly, qc, completed"
                }
              ]
            },
            "description": "Get production tracking details for a specific stage"
          },
          "response": []
        },
        {
          "name": "Approve Production Serial",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "const response = pm.response.json();",
                  "pm.test('Production serial approved successfully', () => {",
                  "  pm.expect(pm.response.code).to.equal(200);",
                  "  pm.expect(response.success).to.be.true;",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{employeeAccessToken}}",
                "type": "text"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"device_serials\": [\"SERIAL001\", \"SERIAL002\"]\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{baseUrl}}/production-tracking/approve",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "production-tracking",
                "approve"
              ]
            },
            "description": "Approve production serials to move to assembly stage"
          },
          "response": []
        },
        {
          "name": "Reject Production Serial",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "const response = pm.response.json();",
                  "pm.test('Production serial rejected successfully', () => {",
                  "  pm.expect(pm.response.code).to.equal(200);",
                  "  pm.expect(response.success).to.be.true;",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{employeeAccessToken}}",
                "type": "text"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"device_serials\": [\"SERIAL001\", \"SERIAL002\"],\n  \"reason\": \"product_error\",\n  \"note\": \"Product defects found during QC\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{baseUrl}}/production-tracking/reject",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "production-tracking",
                "reject"
              ]
            },
            "description": "Reject production serials with reason (blur_error, product_error, all_error)"
          },
          "response": []
        },
        {
          "name": "Update Production Serial Status",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "const response = pm.response.json();",
                  "pm.test('Production serial status updated successfully', () => {",
                  "  pm.expect(pm.response.code).to.equal(200);",
                  "  pm.expect(response.success).to.be.true;",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{employeeAccessToken}}",
                "type": "text"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"device_serial\": \"SERIAL001\",\n  \"stage\": \"assembly\",\n  \"status\": \"in_progress\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{baseUrl}}/production-tracking/update",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "production-tracking",
                "update"
              ]
            },
            "description": "Update production serial stage and status"
          },
          "response": []
        },
        {
          "name": "Cancel Production Serial",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "const response = pm.response.json();",
                  "pm.test('Production serial cancelled successfully', () => {",
                  "  pm.expect(pm.response.code).to.equal(200);",
                  "  pm.expect(response.success).to.be.true;",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{employeeAccessToken}}",
                "type": "text"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"device_serials\": [\"SERIAL001\", \"SERIAL002\"],\n  \"note\": \"Cancelled due to quality issues\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{baseUrl}}/production-tracking/cancel",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "production-tracking",
                "cancel"
              ]
            },
            "description": "Cancel production serials in pending stage"
          },
          "response": []
        },
        {
          "name": "Approve Tested Serial",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "const response = pm.response.json();",
                  "pm.test('Production serial tested and approved successfully', () => {",
                  "  pm.expect(pm.response.code).to.equal(200);",
                  "  pm.expect(response.success).to.be.true;",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{employeeAccessToken}}",
                "type": "text"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"device_serials\": [\"SERIAL001\", \"SERIAL002\"],\n  \"note\": \"All tests passed successfully\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{baseUrl}}/production-tracking/approve-tested",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "production-tracking",
                "approve-tested"
              ]
            },
            "description": "Approve tested serials to move to completed stage"
          },
          "response": []
        },
        {
          "name": "Get Serial Firmware Installation Status",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "const response = pm.response.json();",
                  "pm.test('Serial firmware status retrieved successfully', () => {",
                  "  pm.expect(pm.response.code).to.equal(200);",
                  "  pm.expect(response.success).to.be.true;",
                  "  pm.expect(response.data).to.exist;",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{employeeAccessToken}}",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/production-tracking/firmware-status?type=planning&planning_id=1",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "production-tracking",
                "firmware-status"
              ],
              "query": [
                {
                  "key": "type",
                  "value": "planning",
                  "description": "Type can be: planning, batch, tracking"
                },
                {
                  "key": "planning_id",
                  "value": "1",
                  "description": "Required for batch type"
                },
                {
                  "key": "batch_id",
                  "value": "1",
                  "description": "Required for tracking type",
                  "disabled": true
                }
              ]
            },
            "description": "Get firmware installation status for serials"
          },
          "response": []
        }
      ]
    },
    {
      "name": "Planning",
      "item": [
        {
          "name": "Get All Plannings",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "const response = pm.response.json();",
                  "pm.test('Plannings retrieved successfully', () => {",
                  "  pm.expect(pm.response.code).to.equal(200);",
                  "  pm.expect(response).to.be.an('array');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{employeeAccessToken}}",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/plannings",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "plannings"
              ],
              "query": [
                {
                  "key": "status",
                  "value": "approved",
                  "description": "Optional filter by status (approved/rejected)",
                  "disabled": true
                },
                {
                  "key": "page",
                  "value": "1",
                  "description": "Page number (optional)",
                  "disabled": true
                },
                {
                  "key": "limit",
                  "value": "10",
                  "description": "Items per page (optional)",
                  "disabled": true
                }
              ]
            },
            "description": "Get list of all production plannings"
          },
          "response": []
        },
        {
          "name": "Get Planning By ID",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "const response = pm.response.json();",
                  "pm.test('Planning retrieved successfully', () => {",
                  "  pm.expect(pm.response.code).to.equal(200);",
                  "  pm.expect(response.planningId).to.exist;",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{employeeAccessToken}}",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/plannings/detail/:planningId",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "plannings",
                "detail",
                ":planningId"
              ],
              "variable": [
                {
                  "key": "planningId",
                  "value": "1"
                }
              ]
            },
            "description": "Get detailed information about a specific planning"
          },
          "response": []
        },
        {
          "name": "Create Planning",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "const response = pm.response.json();",
                  "pm.test('Planning created successfully', () => {",
                  "  pm.expect(pm.response.code).to.equal(201);",
                  "  pm.expect(response.planningId).to.exist;",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{employeeAccessToken}}",
                "type": "text"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"planning_note\": \"Q3 2025 Production Plan\",\n  \"batch_count\": 5\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{baseUrl}}/plannings",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "plannings"
              ]
            },
            "description": "Create a new production planning"
          },
          "response": []
        },
        {
          "name": "Create Planning With Batches",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "const response = pm.response.json();",
                  "pm.test('Planning with batches created successfully', () => {",
                  "  pm.expect(pm.response.code).to.equal(201);",
                  "  pm.expect(response.planningId).to.exist;",
                  "  pm.expect(response.batches).to.be.an('array');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{employeeAccessToken}}",
                "type": "text"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"planning_note\": \"Q3 2025 Production Plan with Batches\",\n  \"batch_count\": 2,\n  \"batches\": [\n    {\n      \"template_id\": 1,\n      \"quantity\": 100,\n      \"batch_note\": \"First batch of LED controllers\"\n    },\n    {\n      \"template_id\": 2,\n      \"quantity\": 150,\n      \"batch_note\": \"Second batch of sensors\"\n    }\n  ]\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{baseUrl}}/plannings/with-batches",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "plannings",
                "with-batches"
              ]
            },
            "description": "Create a new planning with pre-defined production batches"
          },
          "response": []
        },
        {
          "name": "Approve Planning",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "const response = pm.response.json();",
                  "pm.test('Planning approved successfully', () => {",
                  "  pm.expect(pm.response.code).to.equal(200);",
                  "  pm.expect(response.status).to.equal('approved');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{employeeAccessToken}}",
                "type": "text"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"status\": \"approved\",\n  \"notes\": \"Plan approved after review. All requirements met.\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{baseUrl}}/plannings/:planningId/approve",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "plannings",
                ":planningId",
                "approve"
              ],
              "variable": [
                {
                  "key": "planningId",
                  "value": "1"
                }
              ]
            },
            "description": "Approve or reject a production planning"
          },
          "response": []
        },
        {
          "name": "Create Batch in Planning",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "const response = pm.response.json();",
                  "pm.test('Batch created successfully', () => {",
                  "  pm.expect(pm.response.code).to.equal(201);",
                  "  pm.expect(response.batchId).to.exist;",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{employeeAccessToken}}",
                "type": "text"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"template_id\": 1,\n  \"quantity\": 100,\n  \"batch_note\": \"LED Controller production batch\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{baseUrl}}/plannings/:planningId/batches",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "plannings",
                ":planningId",
                "batches"
              ],
              "variable": [
                {
                  "key": "planningId",
                  "value": "1"
                }
              ]
            },
            "description": "Create a new production batch within a planning"
          },
          "response": []
        },
        {
          "name": "Get Batches by Planning ID",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "const response = pm.response.json();",
                  "pm.test('Batches retrieved successfully', () => {",
                  "  pm.expect(pm.response.code).to.equal(200);",
                  "  pm.expect(response).to.be.an('array');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{employeeAccessToken}}",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/plannings/:planningId/batches",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "plannings",
                ":planningId",
                "batches"
              ],
              "variable": [
                {
                  "key": "planningId",
                  "value": "1"
                }
              ]
            },
            "description": "Get all production batches for a specific planning"
          },
          "response": []
        },
        {
          "name": "Update Batch Status",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "const response = pm.response.json();",
                  "pm.test('Batch status updated successfully', () => {",
                  "  pm.expect(pm.response.code).to.equal(200);",
                  "  pm.expect(response.status).to.exist;",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{employeeAccessToken}}",
                "type": "text"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"status\": \"in_progress\",\n  \"batch_note\": \"Production started on schedule\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{baseUrl}}/plannings/batches/:batchId/status",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "plannings",
                "batches",
                ":batchId",
                "status"
              ],
              "variable": [
                {
                  "key": "batchId",
                  "value": "1"
                }
              ]
            },
            "description": "Update the status of a production batch"
          },
          "response": []
        },
        {
          "name": "Get List of Completed Batches",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "const response = pm.response.json();",
                  "pm.test('Completed batches retrieved successfully', () => {",
                  "  pm.expect(pm.response.code).to.equal(200);",
                  "  pm.expect(response).to.be.an('array');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{employeeAccessToken}}",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/plannings/list-batches-completed/:planningId",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "plannings",
                "list-batches-completed",
                ":planningId"
              ],
              "variable": [
                {
                  "key": "planningId",
                  "value": "1"
                }
              ]
            },
            "description": "Get list of completed batches for a planning"
          },
          "response": []
        },
        {
          "name": "Get Plannings with Completed Batches",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "const response = pm.response.json();",
                  "pm.test('Plannings with completed batches retrieved successfully', () => {",
                  "  pm.expect(pm.response.code).to.equal(200);",
                  "  pm.expect(response).to.be.an('array');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{employeeAccessToken}}",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/plannings/plannings-by-batch-production-status-is-completed",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "plannings",
                "plannings-by-batch-production-status-is-completed"
              ]
            },
            "description": "Get all plannings that have completed production batches"
          },
          "response": []
        }
      ]
    },
    {
      "name": "Camera Management",
      "item": [
        {
          "name": "Get Camera Info",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "const response = pm.response.json();",
                  "pm.test('Camera info retrieved successfully', () => {",
                  "  pm.expect(pm.response.code).to.equal(200);",
                  "  pm.expect(response.success).to.be.true;",
                  "  pm.expect(response.camera).to.exist;",
                  "  pm.expect(response.camera.serialNumber).to.exist;",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{userAccessToken}}",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/camera/{{cameraSerial}}/info",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "camera",
                "{{cameraSerial}}",
                "info"
              ]
            }
          },
          "response": []
        },
        {
          "name": "Generate Stream Token",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "const response = pm.response.json();",
                  "pm.test('Stream token generated successfully', () => {",
                  "  pm.expect(pm.response.code).to.equal(200);",
                  "  pm.expect(response.success).to.be.true;",
                  "  pm.expect(response.streamUrl).to.exist;",
                  "  pm.expect(response.token).to.exist;",
                  "});",
                  "",
                  "// Save token for other requests",
                  "if (response.token) {",
                  "  pm.collectionVariables.set('streamToken', response.token);",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{userAccessToken}}",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/camera/{{cameraSerial}}/stream/token",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "camera",
                "{{cameraSerial}}",
                "stream",
                "token"
              ]
            }
          },
          "response": []
        },
        {
          "name": "Get Stream URL",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Stream URL accessible', () => {",
                  "  pm.expect(pm.response.code).to.be.oneOf([200, 302]);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{userAccessToken}}",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/camera/stream/{{cameraSerial}}?token={{streamToken}}",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "camera",
                "stream",
                "{{cameraSerial}}"
              ],
              "query": [
                {
                  "key": "token",
                  "value": "{{streamToken}}"
                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "Start RTMP Stream",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "const response = pm.response.json();",
                  "pm.test('RTMP stream started successfully', () => {",
                  "  pm.expect(pm.response.code).to.equal(200);",
                  "  pm.expect(response.success).to.be.true;",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{userAccessToken}}",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/camera/{{cameraSerial}}/stream/start",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "camera",
                "{{cameraSerial}}",
                "stream",
                "start"
              ]
            }
          },
          "response": []
        },
        {
          "name": "Send Camera Command",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "const response = pm.response.json();",
                  "pm.test('Camera command sent successfully', () => {",
                  "  pm.expect(pm.response.code).to.equal(200);",
                  "  pm.expect(response.success).to.be.true;",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{userAccessToken}}",
                "type": "text"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"action\": \"startStream\",\n  \"params\": {\n    \"enabled\": true,\n    \"quality\": 10,\n    \"resolution\": \"VGA\"\n  }\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{baseUrl}}/camera/{{cameraSerial}}/command",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "camera",
                "{{cameraSerial}}",
                "command"
              ]
            }
          },
          "response": []
        },
        {
          "name": "Capture Photo",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "const response = pm.response.json();",
                  "pm.test('Photo captured successfully', () => {",
                  "  pm.expect(pm.response.code).to.equal(200);",
                  "  pm.expect(response.success).to.be.true;",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{userAccessToken}}",
                "type": "text"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"action\": \"capturePhoto\",\n  \"params\": {\n    \"saveToSD\": true,\n    \"quality\": 10,\n    \"filename\": \"photo_{{$timestamp}}.jpg\"\n  }\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{baseUrl}}/camera/{{cameraSerial}}/capture",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "camera",
                "{{cameraSerial}}",
                "capture"
              ]
            }
          },
          "response": []
        },
        {
          "name": "Enable Face Detection",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "const response = pm.response.json();",
                  "pm.test('Face detection toggled successfully', () => {",
                  "  pm.expect(pm.response.code).to.equal(200);",
                  "  pm.expect(response.success).to.be.true;",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{userAccessToken}}",
                "type": "text"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"enabled\": true\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{baseUrl}}/camera/{{cameraSerial}}/face-detection",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "camera",
                "{{cameraSerial}}",
                "face-detection"
              ]
            }
          },
          "response": []
        },
        {
          "name": "Get Camera Capabilities",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "const response = pm.response.json();",
                  "pm.test('Camera capabilities retrieved successfully', () => {",
                  "  pm.expect(pm.response.code).to.equal(200);",
                  "  pm.expect(response.success).to.be.true;",
                  "  pm.expect(response.capabilities).to.exist;",
                  "  pm.expect(response.capabilities.base).to.exist;",
                  "  pm.expect(response.capabilities.merged_capabilities).to.be.an('array');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{userAccessToken}}",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/camera/{{cameraSerial}}/capabilities",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "camera",
                "{{cameraSerial}}",
                "capabilities"
              ]
            }
          },
          "response": []
        },
        {
          "name": "Update Camera Status",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Camera status updated successfully', () => {",
                  "  pm.expect(pm.response.code).to.equal(200);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{userAccessToken}}",
                "type": "text"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"status\": \"online\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{baseUrl}}/camera/{{cameraSerial}}/status",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "camera",
                "{{cameraSerial}}",
                "status"
              ]
            }
          },
          "response": []
        },
        {
          "name": "Stop Stream",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "const response = pm.response.json();",
                  "pm.test('Stream stopped successfully', () => {",
                  "  pm.expect(pm.response.code).to.equal(200);",
                  "  pm.expect(response.success).to.be.true;",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{userAccessToken}}",
                "type": "text"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"action\": \"stopStream\",\n  \"params\": {}\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{baseUrl}}/camera/{{cameraSerial}}/command",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "camera",
                "{{cameraSerial}}",
                "command"
              ]
            }
          },
          "response": []
        },
        {
          "name": "Set Camera Resolution",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "const response = pm.response.json();",
                  "pm.test('Camera resolution set successfully', () => {",
                  "  pm.expect(pm.response.code).to.equal(200);",
                  "  pm.expect(response.success).to.be.true;",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{userAccessToken}}",
                "type": "text"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"action\": \"setResolution\",\n  \"params\": {\n    \"resolution\": \"SVGA\",\n    \"quality\": 12\n  }\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{baseUrl}}/camera/{{cameraSerial}}/command",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "camera",
                "{{cameraSerial}}",
                "command"
              ]
            }
          },
          "response": []
        },
        {
          "name": "Enable Motion Detection",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "const response = pm.response.json();",
                  "pm.test('Motion detection toggled successfully', () => {",
                  "  pm.expect(pm.response.code).to.equal(200);",
                  "  pm.expect(response.success).to.be.true;",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{userAccessToken}}",
                "type": "text"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"action\": \"setMotionDetection\",\n  \"params\": {\n    \"enabled\": true,\n    \"sensitivity\": 50\n  }\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{baseUrl}}/camera/{{cameraSerial}}/command",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "camera",
                "{{cameraSerial}}",
                "command"
              ]
            }
          },
          "response": []
        }
      ]
    },
    {
      "name": "Garden Hub Management",
      "item": [
        {
          "name": "Relay Control",
          "item": [
            {
              "name": "Get All Relay Status",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "const response = pm.response.json();",
                      "pm.test('Relay status retrieved successfully', () => {",
                      "  pm.expect(pm.response.code).to.equal(200);",
                      "  pm.expect(response.success).to.be.true;",
                      "  pm.expect(response.data.relays).to.be.an('array');",
                      "  pm.expect(response.data.total_relays).to.be.a('number');",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{userAccessToken}}",
                    "type": "text"
                  }
                ],
                "url": {
                  "raw": "{{baseUrl}}/garden-hub/relays",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "garden-hub",
                    "relays"
                  ]
                }
              },
              "response": []
            },
            {
              "name": "Get Available Relays",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "const response = pm.response.json();",
                      "pm.test('Available relays retrieved successfully', () => {",
                      "  pm.expect(pm.response.code).to.equal(200);",
                      "  pm.expect(response.success).to.be.true;",
                      "  pm.expect(response.data.relays).to.be.an('array');",
                      "  pm.expect(response.data.total_relays).to.be.a('number');",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "GET",
                "header": [],
                "url": {
                  "raw": "{{baseUrl}}/garden-hub/relays/available",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "garden-hub",
                    "relays",
                    "available"
                  ]
                }
              },
              "response": []
            },
            {
              "name": "Toggle Single Relay",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "const response = pm.response.json();",
                      "pm.test('Relay toggled successfully', () => {",
                      "  pm.expect(pm.response.code).to.equal(200);",
                      "  pm.expect(response.success).to.be.true;",
                      "  pm.expect(response.data.relay_serial).to.exist;",
                      "  pm.expect(response.data.new_state).to.exist;",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{userAccessToken}}",
                    "type": "text"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"power_status\": true\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{baseUrl}}/garden-hub/relays/RELAY27JUN2501FAN001CONTROL001/toggle",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "garden-hub",
                    "relays",
                    "RELAY27JUN2501FAN001CONTROL001",
                    "toggle"
                  ]
                }
              },
              "response": []
            },
            {
              "name": "Bulk Relay Control",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "const response = pm.response.json();",
                      "pm.test('Bulk relay control completed', () => {",
                      "  pm.expect(pm.response.code).to.equal(200);",
                      "  pm.expect(response.success).to.be.true;",
                      "  pm.expect(response.data.results).to.be.an('array');",
                      "  pm.expect(response.data.bulk_operation).to.be.true;",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{userAccessToken}}",
                    "type": "text"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"relay_commands\": [\n    {\n      \"relay_serial\": \"RELAY27JUN2501LIGHT001CONTROL1\",\n      \"action\": \"ON\"\n    },\n    {\n      \"relay_serial\": \"RELAY27JUN2501LIGHT002CONTROL1\",\n      \"action\": \"ON\"\n    },\n    {\n      \"relay_serial\": \"RELAY27JUN2501FAN001CONTROL001\",\n      \"action\": \"TOGGLE\"\n    }\n  ]\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{baseUrl}}/garden-hub/relays/bulk",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "garden-hub",
                    "relays",
                    "bulk"
                  ]
                }
              },
              "response": []
            }
          ]
        },
        {
          "name": "Garden Operations",
          "item": [
            {
              "name": "Control Garden Pump",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "const response = pm.response.json();",
                      "pm.test('Pump controlled successfully', () => {",
                      "  pm.expect(pm.response.code).to.equal(200);",
                      "  pm.expect(response.success).to.be.true;",
                      "  pm.expect(response.data.action).to.exist;",
                      "  pm.expect(response.data.garden_serial).to.exist;",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{userAccessToken}}",
                    "type": "text"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"action\": \"START\",\n  \"reason\": \"Manual watering for plant care\"\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{baseUrl}}/garden-hub/pump",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "garden-hub",
                    "pump"
                  ]
                }
              },
              "response": []
            },
            {
              "name": "Control RGB LED",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "const response = pm.response.json();",
                      "pm.test('RGB controlled successfully', () => {",
                      "  pm.expect(pm.response.code).to.equal(200);",
                      "  pm.expect(response.success).to.be.true;",
                      "  pm.expect(response.data.action).to.exist;",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{userAccessToken}}",
                    "type": "text"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"action\": \"MANUAL\",\n  \"color\": {\n    \"red\": 255,\n    \"green\": 100,\n    \"blue\": 50\n  }\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{baseUrl}}/garden-hub/rgb",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "garden-hub",
                    "rgb"
                  ]
                }
              },
              "response": []
            },
            {
              "name": "RGB LED Test Mode",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "const response = pm.response.json();",
                      "pm.test('RGB test completed', () => {",
                      "  pm.expect(pm.response.code).to.equal(200);",
                      "  pm.expect(response.success).to.be.true;",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{userAccessToken}}",
                    "type": "text"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"action\": \"TEST\"\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{baseUrl}}/garden-hub/rgb",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "garden-hub",
                    "rgb"
                  ]
                }
              },
              "response": []
            }
          ]
        },
        {
          "name": "Automation Control",
          "item": [
            {
              "name": "Enable Watering Automation",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "const response = pm.response.json();",
                      "pm.test('Watering automation enabled successfully', () => {",
                      "  pm.expect(pm.response.code).to.equal(200);",
                      "  pm.expect(response.success).to.be.true;",
                      "  pm.expect(response.data.automation_type).to.equal('WATERING');",
                      "  pm.expect(response.data.enabled).to.be.true;",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{userAccessToken}}",
                    "type": "text"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"automation_type\": \"WATERING\",\n  \"enabled\": true\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{baseUrl}}/garden-hub/automation",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "garden-hub",
                    "automation"
                  ]
                }
              },
              "response": []
            },
            {
              "name": "Control Lighting Automation",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "const response = pm.response.json();",
                      "pm.test('Lighting automation controlled successfully', () => {",
                      "  pm.expect(pm.response.code).to.equal(200);",
                      "  pm.expect(response.success).to.be.true;",
                      "  pm.expect(response.data.automation_type).to.equal('LIGHTING');",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{userAccessToken}}",
                    "type": "text"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"automation_type\": \"LIGHTING\",\n  \"enabled\": false\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{baseUrl}}/garden-hub/automation",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "garden-hub",
                    "automation"
                  ]
                }
              },
              "response": []
            },
            {
              "name": "Control Fan Automation",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "const response = pm.response.json();",
                      "pm.test('Fan automation controlled successfully', () => {",
                      "  pm.expect(pm.response.code).to.equal(200);",
                      "  pm.expect(response.success).to.be.true;",
                      "  pm.expect(response.data.automation_type).to.equal('FAN');",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{userAccessToken}}",
                    "type": "text"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"automation_type\": \"FAN\",\n  \"enabled\": true\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{baseUrl}}/garden-hub/automation",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "garden-hub",
                    "automation"
                  ]
                }
              },
              "response": []
            }
          ]
        },
        {
          "name": "Sensor Thresholds",
          "item": [
            {
              "name": "Set Soil Moisture Threshold",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "const response = pm.response.json();",
                      "pm.test('Soil threshold set successfully', () => {",
                      "  pm.expect(pm.response.code).to.equal(200);",
                      "  pm.expect(response.success).to.be.true;",
                      "  pm.expect(response.data.threshold_type).to.equal('SOIL');",
                      "  pm.expect(response.data.value).to.be.a('number');",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{userAccessToken}}",
                    "type": "text"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"threshold_type\": \"SOIL\",\n  \"value\": 30\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{baseUrl}}/garden-hub/threshold",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "garden-hub",
                    "threshold"
                  ]
                }
              },
              "response": []
            },
            {
              "name": "Set Light Sensor Threshold",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "const response = pm.response.json();",
                      "pm.test('Light threshold set successfully', () => {",
                      "  pm.expect(pm.response.code).to.equal(200);",
                      "  pm.expect(response.success).to.be.true;",
                      "  pm.expect(response.data.threshold_type).to.equal('LIGHT');",
                      "  pm.expect(response.data.value).to.be.a('number');",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{userAccessToken}}",
                    "type": "text"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"threshold_type\": \"LIGHT\",\n  \"value\": 70\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{baseUrl}}/garden-hub/threshold",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "garden-hub",
                    "threshold"
                  ]
                }
              },
              "response": []
            }
          ]
        },
        {
          "name": "Emergency & System",
          "item": [
            {
              "name": "Emergency Alarm Activate",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "const response = pm.response.json();",
                      "pm.test('Emergency alarm activated successfully', () => {",
                      "  pm.expect(pm.response.code).to.equal(200);",
                      "  pm.expect(response.success).to.be.true;",
                      "  pm.expect(response.data.action).to.equal('ALARM_ACTIVATE');",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{userAccessToken}}",
                    "type": "text"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"action\": \"ACTIVATE\"\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{baseUrl}}/garden-hub/emergency/alarm",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "garden-hub",
                    "emergency",
                    "alarm"
                  ]
                }
              },
              "response": []
            },
            {
              "name": "Emergency Alarm Deactivate",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "const response = pm.response.json();",
                      "pm.test('Emergency alarm deactivated successfully', () => {",
                      "  pm.expect(pm.response.code).to.equal(200);",
                      "  pm.expect(response.success).to.be.true;",
                      "  pm.expect(response.data.action).to.equal('ALARM_DEACTIVATE');",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{userAccessToken}}",
                    "type": "text"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"action\": \"DEACTIVATE\"\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{baseUrl}}/garden-hub/emergency/alarm",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "garden-hub",
                    "emergency",
                    "alarm"
                  ]
                }
              },
              "response": []
            },
            {
              "name": "Get System Status",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "const response = pm.response.json();",
                      "pm.test('System status retrieved successfully', () => {",
                      "  pm.expect(pm.response.code).to.equal(200);",
                      "  pm.expect(response.success).to.be.true;",
                      "  pm.expect(response.data.system_info).to.exist;",
                      "  pm.expect(response.data.relay_statistics).to.exist;",
                      "  pm.expect(response.data.relay_status).to.be.an('array');",
                      "  pm.expect(response.data.available_relays).to.be.an('array');",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{userAccessToken}}",
                    "type": "text"
                  }
                ],
                "url": {
                  "raw": "{{baseUrl}}/garden-hub/system/status",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "garden-hub",
                    "system",
                    "status"
                  ]
                }
              },
              "response": []
            },
            {
              "name": "Reset Override Emergency",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "const response = pm.response.json();",
                      "pm.test('Emergency override reset successfully', () => {",
                      "  pm.expect(pm.response.code).to.equal(200);",
                      "  pm.expect(response.success).to.be.true;",
                      "  pm.expect(response.data.action).to.equal('ALARM_RESET_OVERRIDE');",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{userAccessToken}}",
                    "type": "text"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"action\": \"RESET_OVERRIDE\"\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{baseUrl}}/garden-hub/emergency/alarm",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "garden-hub",
                    "emergency",
                    "alarm"
                  ]
                }
              },
              "response": []
            }
          ]
        }
      ]
    }
  ]
}