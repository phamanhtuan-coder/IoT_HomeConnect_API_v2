{
  "info": {
    "_postman_id": "2aff48d9-bf2f-46b5-b777-16d83e5b73ed",
    "name": "IoT Backend API",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
    "_exporter_id": "40754195",
    "_collection_link": "https://www.postman.com/homeconnectapiws/homeconnectapi-v2/collection/swql8uh/iot-backend-api?action=share&source=collection_link&creator=40754195"
  },
  "event": [
    {
      "listen": "prerequest",
      "script": {
        "type": "text/javascript",
        "packages": {},
        "exec": [
          ""
        ]
      }
    },
    {
      "listen": "test",
      "script": {
        "type": "text/javascript",
        "packages": {},
        "exec": [
          ""
        ]
      }
    }
  ],
  "variable": [
    {
      "key": "baseUrl",
      "value": "http://localhost:3000/api",
      "type": "string"
    },
    {
      "key": "userAccessToken",
      "value": "",
      "type": "string"
    },
    {
      "key": "userRefreshToken",
      "value": "",
      "type": "string"
    },
    {
      "key": "employeeAccessToken",
      "value": "",
      "type": "string"
    },
    {
      "key": "employeeRefreshToken",
      "value": "",
      "type": "string"
    }
  ],
  "item": [
    {
      "name": "Auth",
      "item": [
        {
          "name": "Login User",
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"username\": \"testuser\",\n  \"password\": \"password123\",\n  \"rememberMe\": true,\n  \"deviceName\": \"MyDevice\",\n  \"deviceId\": \"device123\",\n  \"deviceUuid\": \"\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{baseUrl}}/auth/login",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "auth",
                "login"
              ]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "const response = pm.response.json();",
                  "pm.environment.set('userAccessToken', response.accessToken);",
                  "pm.environment.set('userRefreshToken', response.refreshToken || pm.environment.get('userRefreshToken'));",
                  "pm.environment.set('deviceUuid', response.deviceUuid);",
                  "pm.test('User login successful', () => {",
                  "  pm.expect(pm.response.code).to.equal(200);",
                  "  pm.expect(response.accessToken).to.exist;",
                  "  pm.expect(response.deviceUuid).to.be.a('string');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "Login Employee",
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"username\": \"adminuser\",\n  \"password\": \"admin123\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{baseUrl}}/auth/employee/login",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "auth",
                "employee",
                "login"
              ]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "const response = pm.response.json();",
                  "if (response.accessToken) pm.environment.set('employeeAccessToken', response.accessToken);",
                  "if (response.refreshToken) pm.environment.set('employeeRefreshToken', response.refreshToken);",
                  "pm.test('Employee login successful', () => {",
                  "  pm.expect(pm.response.code).to.equal(200);",
                  "  pm.expect(response.accessToken).to.exist;",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "Register User",
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"username\": \"newuser\",\n  \"surname\": \"New\",\n  \"lastname\": \"User\",\n  \"email\": \"newuser@example.com\",\n  \"password\": \"newpassword123\",\n  \"phone\": \"1234567890\",\n  \"birthdate\": \"1990-01-01\",\n  \"gender\": true\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{baseUrl}}/auth/register",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "auth",
                "register"
              ]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "const response = pm.response.json();",
                  "pm.environment.set('userAccessToken', response.accessToken);",
                  "pm.test('User registration successful', () => {",
                  "  pm.expect(pm.response.code).to.equal(201);",
                  "  pm.expect(response.accessToken).to.exist;",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "Register Employee",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{employeeAccessToken}}",
                "type": "text"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"username\": \"newadmin\",\n  \"surname\": \"New\",\n  \"lastname\": \"Admin\",\n  \"email\": \"newadmin@example.com\",\n  \"password\": \"admin123\",\n  \"role\": \"ADMIN\",\n  \"phone\": \"0123456789\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{baseUrl}}/auth/employee/register",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "auth",
                "employee",
                "register"
              ]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "const response = pm.response.json();",
                  "pm.test('Employee registration successful', () => {",
                  "  pm.expect(pm.response.code).to.equal(201);",
                  "  pm.expect(response.accessToken).to.exist;",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "Refresh User Token",
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"refreshToken\": \"{{userRefreshToken}}\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{baseUrl}}/auth/refresh",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "auth",
                "refresh"
              ]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "const response = pm.response.json();",
                  "pm.environment.set('userAccessToken', response.accessToken);",
                  "pm.test('User token refreshed', () => {",
                  "  pm.expect(pm.response.code).to.equal(200);",
                  "  pm.expect(response.accessToken).to.exist;",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "Refresh Employee Token",
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"refreshToken\": \"{{employeeRefreshToken}}\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{baseUrl}}/auth/employee/refresh",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "auth",
                "employee",
                "refresh"
              ]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "const response = pm.response.json();",
                  "pm.environment.set('employeeAccessToken', response.accessToken);",
                  "pm.test('Employee token refreshed', () => {",
                  "  pm.expect(pm.response.code).to.equal(200);",
                  "  pm.expect(response.accessToken).to.exist;",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "Logout User (Single Device)",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{userAccessToken}}",
                "type": "text"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"userDeviceId\": 1\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{baseUrl}}/auth/logout",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "auth",
                "logout"
              ]
            }
          }
        },
        {
          "name": "Logout Employee (Single Device)",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{employeeAccessToken}}",
                "type": "text"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{baseUrl}}/auth/employee/logout",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "auth",
                "employee",
                "logout"
              ]
            }
          }
        },
        {
          "name": "Logout Multiple Devices",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{userAccessToken}}",
                "type": "text"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"userDeviceIds\": [1, 2]\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{baseUrl}}/auth/logout/multiple",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "auth",
                "logout",
                "multiple"
              ]
            }
          }
        },
        {
          "name": "Logout All Devices",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{userAccessToken}}",
                "type": "text"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{baseUrl}}/auth/logout/all",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "auth",
                "logout",
                "all"
              ]
            }
          }
        },
        {
          "name": "Update Device Token",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{userAccessToken}}",
                "type": "text"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"deviceToken\": \"newFcmToken123\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{baseUrl}}/auth/update-device-token",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "auth",
                "update-device-token"
              ]
            }
          }
        },
        {
          "name": "Check Email Verification",
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"email\": \"user@example.com\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{baseUrl}}/auth/check-email",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "auth",
                "check-email"
              ]
            }
          }
        },
        {
          "name": "Verify Email",
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"email\": \"user@example.com\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{baseUrl}}/auth/verify-email",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "auth",
                "verify-email"
              ]
            }
          }
        },
        {
          "name": "Recovery Password",
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"email\": \"user@example.com\",\n  \"newPassword\": \"newpassword123\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{baseUrl}}/auth/recovery-password",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "auth",
                "recovery-password"
              ]
            }
          }
        },
        {
          "name": "Update User Profile",
          "request": {
            "method": "PATCH",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{userAccessToken}}",
                "type": "text"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"surname\": \"Updated\",\n  \"lastname\": \"User\",\n  \"phone\": \"0987654321\",\n  \"email\": \"updateduser@example.com\",\n  \"birthdate\": \"1991-02-02\",\n  \"gender\": false,\n  \"image\": \"http://example.com/avatar.jpg\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{baseUrl}}/auth/update-profile",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "auth",
                "update-profile"
              ]
            }
          }
        }
      ]
    },
    {
      "name": "Sync Tracking",
      "item": [
        {
          "name": "Get Own Sync History",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "const response = pm.response.json();",
                  "pm.test('Own sync history retrieved successfully', () => {",
                  "  pm.expect(pm.response.code).to.equal(200);",
                  "  pm.expect(response).to.be.an('array');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{userAccessToken}}",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/sync-tracking/me",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "sync-tracking",
                "me"
              ]
            }
          },
          "response": []
        },
        {
          "name": "Get User Sync History (Admin)",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "const response = pm.response.json();",
                  "pm.test('User sync history retrieved successfully', () => {",
                  "  pm.expect(pm.response.code).to.equal(200);",
                  "  pm.expect(response).to.be.an('array');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{employeeAccessToken}}",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/sync-tracking/user/:userId",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "sync-tracking",
                "user",
                ":userId"
              ],
              "variable": [
                {
                  "key": "userId",
                  "value": "1"
                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "Get Full User Sync History (Admin)",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "const response = pm.response.json();",
                  "pm.test('Full user sync history retrieved successfully', () => {",
                  "  pm.expect(pm.response.code).to.equal(200);",
                  "  pm.expect(response).to.be.an('array');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{employeeAccessToken}}",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/sync-tracking/user/:userId/full",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "sync-tracking",
                "user",
                ":userId",
                "full"
              ],
              "variable": [
                {
                  "key": "userId",
                  "value": "1"
                }
              ]
            }
          },
          "response": []
        }
      ]
    },
    {
      "name": "User Devices",
      "item": [
        {
          "name": "Get Own Devices",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "const response = pm.response.json();",
                  "pm.test('Own devices retrieved successfully', () => {",
                  "  pm.expect(pm.response.code).to.equal(200);",
                  "  pm.expect(response).to.be.an('array');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{userAccessToken}}",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/user-devices",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "user-devices"
              ]
            }
          },
          "response": []
        },
        {
          "name": "Get User Devices (Admin)",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "const response = pm.response.json();",
                  "pm.test('User devices retrieved successfully', () => {",
                  "  pm.expect(pm.response.code).to.equal(200);",
                  "  pm.expect(response).to.be.an('array');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{employeeAccessToken}}",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/user-devices/:userId",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "user-devices",
                ":userId"
              ],
              "variable": [
                {
                  "key": "userId",
                  "value": "1"
                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "Revoke Device",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Device revoked successfully', () => {",
                  "  pm.expect(pm.response.code).to.equal(204);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "DELETE",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{userAccessToken}}",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/user-devices/:deviceId",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "user-devices",
                ":deviceId"
              ],
              "variable": [
                {
                  "key": "deviceId",
                  "value": "1"
                }
              ]
            }
          },
          "response": []
        }
      ]
    },
    {
      "name": "Notification",
      "item": [
        {
          "name": "Create Notification",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "const response = pm.response.json();",
                  "pm.test('Notification created successfully', () => {",
                  "  pm.expect(pm.response.code).to.equal(201);",
                  "  pm.expect(response.id).to.exist;",
                  "});"
                ],
                "type": "text/javascript",
                "packages": {}
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{employeeAccessToken}}",
                "type": "text"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"account_id\": \"user123\",\n  \"role_id\": 1,\n  \"text\": \"System maintenance scheduled\",\n  \"type\": \"SYSTEM\",\n  \"is_read\": false\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{baseUrl}}/notifications",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "notifications"
              ]
            }
          },
          "response": []
        },
        {
          "name": "Update Notification",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "const response = pm.response.json();",
                  "pm.test('Notification updated successfully', () => {",
                  "  pm.expect(pm.response.code).to.equal(200);",
                  "  pm.expect(response.id).to.exist;",
                  "});"
                ],
                "type": "text/javascript",
                "packages": {}
              }
            }
          ],
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{employeeAccessToken}}",
                "type": "text"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"is_read\": true\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{baseUrl}}/notifications/:id",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "notifications",
                ":id"
              ],
              "variable": [
                {
                  "key": "id",
                  "value": "1"
                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "Delete Notification",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Notification deleted successfully', () => {",
                  "  pm.expect(pm.response.code).to.equal(204);",
                  "});"
                ],
                "type": "text/javascript",
                "packages": {}
              }
            }
          ],
          "request": {
            "method": "DELETE",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{employeeAccessToken}}",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/notifications/:id",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "notifications",
                ":id"
              ],
              "variable": [
                {
                  "key": "id",
                  "value": "1"
                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "Get Notification by ID",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "const response = pm.response.json();",
                  "pm.test('Notification retrieved successfully', () => {",
                  "  pm.expect(pm.response.code).to.equal(200);",
                  "  pm.expect(response.id).to.exist;",
                  "});"
                ],
                "type": "text/javascript",
                "packages": {}
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{employeeAccessToken}}",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/notifications/:id",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "notifications",
                ":id"
              ],
              "variable": [
                {
                  "key": "id",
                  "value": "1"
                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "Get Notifications by User",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "const response = pm.response.json();",
                  "pm.test('Notifications retrieved successfully', () => {",
                  "  pm.expect(pm.response.code).to.equal(200);",
                  "  pm.expect(response).to.be.an('array');",
                  "});"
                ],
                "type": "text/javascript",
                "packages": {}
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{employeeAccessToken}}",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/notifications/user",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "notifications",
                "user"
              ]
            }
          },
          "response": []
        },
        {
          "name": "Get All Notifications",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "const response = pm.response.json();",
                  "pm.test('Notifications retrieved successfully', () => {",
                  "  pm.expect(pm.response.code).to.equal(200);",
                  "  pm.expect(response).to.be.an('array');",
                  "});"
                ],
                "type": "text/javascript",
                "packages": {}
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{employeeAccessToken}}",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/notifications?account_id=user123&type=SYSTEM&is_read=false&page=1&limit=10",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "notifications"
              ],
              "query": [
                {
                  "key": "account_id",
                  "value": "user123"
                },
                {
                  "key": "type",
                  "value": "SYSTEM"
                },
                {
                  "key": "is_read",
                  "value": "false"
                },
                {
                  "key": "page",
                  "value": "1"
                },
                {
                  "key": "limit",
                  "value": "10"
                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "Send OTP",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "const response = pm.response.json();",
                  "pm.test('OTP sent successfully', () => {",
                  "  pm.expect(pm.response.code).to.equal(200);",
                  "  pm.expect(response.message).to.equal('OTP sent successfully');",
                  "});"
                ],
                "type": "text/javascript",
                "packages": {}
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"email\": \"user@example.com\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{baseUrl}}/notifications/otp",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "notifications",
                "otp"
              ]
            }
          },
          "response": []
        },
        {
          "name": "Generate OTP",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "const response = pm.response.json();",
                  "pm.test('OTP generated successfully', () => {",
                  "  pm.expect(pm.response.code).to.equal(200);",
                  "  pm.expect(response.message).to.equal('OTP generated and sent successfully');",
                  "});"
                ],
                "type": "text/javascript",
                "packages": {}
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"email\": \"user@example.com\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{baseUrl}}/notifications/otp/generate",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "notifications",
                "otp",
                "generate"
              ]
            }
          },
          "response": []
        },
        {
          "name": "Verify OTP",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "const response = pm.response.json();",
                  "pm.test('OTP verification completed', () => {",
                  "  pm.expect(pm.response.code).to.equal(200);",
                  "  pm.expect(response.message).to.be.oneOf(['OTP verified successfully', 'OTP verification failed']);",
                  "});"
                ],
                "type": "text/javascript",
                "packages": {}
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"email\": \"user@example.com\",\n  \"otp\": \"123456\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{baseUrl}}/notifications/otp/verify",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "notifications",
                "otp",
                "verify"
              ]
            }
          },
          "response": []
        }
      ]
    },
    {
      "name": "Device",
      "item": [
        {
          "name": "Create Device",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "const response = pm.response.json();",
                  "pm.test('Device created successfully', () => {",
                  "  pm.expect(pm.response.code).to.equal(201);",
                  "  pm.expect(response.deviceId).to.exist;",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{userAccessToken}}",
                "type": "text"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"templateId\": 1,\n  \"serial_number\": \"ABC123\",\n  \"spaceId\": 1,\n  \"name\": \"MyDevice\",\n  \"attribute\": {\"brightness\": 50},\n  \"wifi_ssid\": \"MyWiFi\",\n  \"wifi_password\": \"wifi123\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{baseUrl}}/devices",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "devices"
              ]
            }
          },
          "response": []
        },
        {
          "name": "Link Device",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "const response = pm.response.json();",
                  "pm.test('Device linked successfully', () => {",
                  "  pm.expect(pm.response.code).to.equal(200);",
                  "  pm.expect(response.deviceId).to.exist;",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{userAccessToken}}",
                "type": "text"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"serial_number\": \"ABC123\",\n  \"spaceId\": 1,\n  \"name\": \"LinkedDevice\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{baseUrl}}/devices/link",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "devices",
                "link"
              ]
            }
          },
          "response": []
        },
        {
          "name": "Toggle Device",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "const response = pm.response.json();",
                  "pm.test('Device toggled successfully', () => {",
                  "  pm.expect(pm.response.code).to.equal(200);",
                  "  pm.expect(response.deviceId).to.exist;",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{userAccessToken}}",
                "type": "text"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"power_status\": true,\n  \"serial_number\": \"ABC123\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{baseUrl}}/devices/:deviceId/toggle",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "devices",
                ":deviceId",
                "toggle"
              ],
              "variable": [
                {
                  "key": "deviceId",
                  "value": "1"
                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "Update Device Attributes",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "const response = pm.response.json();",
                  "pm.test('Device attributes updated successfully', () => {",
                  "  pm.expect(pm.response.code).to.equal(200);",
                  "  pm.expect(response.deviceId).to.exist;",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{userAccessToken}}",
                "type": "text"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"brightness\": 50,\n  \"color\": \"white\",\n  \"serial_number\": \"ABC123\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{baseUrl}}/devices/:deviceId/attributes",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "devices",
                ":deviceId",
                "attributes"
              ],
              "variable": [
                {
                  "key": "deviceId",
                  "value": "1"
                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "Get Devices by Account",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "const response = pm.response.json();",
                  "pm.test('Devices retrieved successfully', () => {",
                  "  pm.expect(pm.response.code).to.equal(200);",
                  "  pm.expect(response).to.be.an('array');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{userAccessToken}}",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/devices/account",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "devices",
                "account"
              ]
            }
          },
          "response": []
        },
        {
          "name": "Get Devices by Group",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "const response = pm.response.json();",
                  "pm.test('Devices retrieved successfully', () => {",
                  "  pm.expect(pm.response.code).to.equal(200);",
                  "  pm.expect(response).to.be.an('array');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{userAccessToken}}",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/devices/group/:groupId",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "devices",
                "group",
                ":groupId"
              ],
              "variable": [
                {
                  "key": "groupId",
                  "value": "1"
                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "Get Devices by House",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "const response = pm.response.json();",
                  "pm.test('Devices retrieved successfully', () => {",
                  "  pm.expect(pm.response.code).to.equal(200);",
                  "  pm.expect(response).to.be.an('array');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{userAccessToken}}",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/devices/house/:houseId",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "devices",
                "house",
                ":houseId"
              ],
              "variable": [
                {
                  "key": "houseId",
                  "value": "1"
                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "Get Devices by Space",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "const response = pm.response.json();",
                  "pm.test('Devices retrieved successfully', () => {",
                  "  pm.expect(pm.response.code).to.equal(200);",
                  "  pm.expect(response).to.be.an('array');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{userAccessToken}}",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/devices/space/:spaceId",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "devices",
                "space",
                ":spaceId"
              ],
              "variable": [
                {
                  "key": "spaceId",
                  "value": "1"
                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "Get Device by ID",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "const response = pm.response.json();",
                  "pm.test('Device retrieved successfully', () => {",
                  "  pm.expect(pm.response.code).to.equal(200);",
                  "  pm.expect(response.deviceId).to.exist;",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{userAccessToken}}",
                "type": "text"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"serial_number\": \"ABC123\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{baseUrl}}/devices/:deviceId",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "devices",
                ":deviceId"
              ],
              "variable": [
                {
                  "key": "deviceId",
                  "value": "1"
                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "Unlink Device",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Device unlinked successfully', () => {",
                  "  pm.expect(pm.response.code).to.equal(204);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "DELETE",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{userAccessToken}}",
                "type": "text"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"serial_number\": \"ABC123\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{baseUrl}}/devices/:deviceId",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "devices",
                ":deviceId"
              ],
              "variable": [
                {
                  "key": "deviceId",
                  "value": "1"
                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "Update Device Space",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "const response = pm.response.json();",
                  "pm.test('Device space updated successfully', () => {",
                  "  pm.expect(pm.response.code).to.equal(200);",
                  "  pm.expect(response.deviceId).to.exist;",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{userAccessToken}}",
                "type": "text"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"spaceId\": 2,\n  \"serial_number\": \"ABC123\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{baseUrl}}/devices/:deviceId/space",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "devices",
                ":deviceId",
                "space"
              ],
              "variable": [
                {
                  "key": "deviceId",
                  "value": "1"
                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "Update Device WiFi",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "const response = pm.response.json();",
                  "pm.test('Device WiFi updated successfully', () => {",
                  "  pm.expect(pm.response.code).to.equal(200);",
                  "  pm.expect(response.deviceId).to.exist;",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{userAccessToken}}",
                "type": "text"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"wifi_ssid\": \"MyWiFi\",\n  \"wifi_password\": \"wifi123\",\n  \"serial_number\": \"ABC123\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{baseUrl}}/devices/:deviceId/wifi",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "devices",
                ":deviceId",
                "wifi"
              ],
              "variable": [
                {
                  "key": "deviceId",
                  "value": "1"
                }
              ]
            }
          },
          "response": []
        }
      ]
    },
    {
      "name": "Group",
      "item": [
        {
          "name": "Get My Groups",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "const response = pm.response.json();",
                  "pm.test('My groups retrieved successfully', () => {",
                  "  pm.expect(pm.response.code).to.equal(200);",
                  "  pm.expect(response.data).to.exist;",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{userAccessToken}}",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/groups/my-groups?page=1&limit=10",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "groups",
                "my-groups"
              ],
              "query": [
                {
                  "key": "page",
                  "value": "1"
                },
                {
                  "key": "limit",
                  "value": "10"
                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "Create Group",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "const response = pm.response.json();",
                  "pm.test('Group created successfully', () => {",
                  "  pm.expect(pm.response.code).to.equal(201);",
                  "  pm.expect(response.group_id).to.exist;",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{userAccessToken}}",
                "type": "text"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"group_name\": \"MyGroup\",\n  \"icon_name\": \"home\",\n  \"icon_color\": \"#FF5733\",\n  \"group_description\": \"My test group\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{baseUrl}}/groups",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "groups"
              ]
            }
          },
          "response": []
        },
        {
          "name": "Get Group",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "const response = pm.response.json();",
                  "pm.test('Group retrieved successfully', () => {",
                  "  pm.expect(pm.response.code).to.equal(200);",
                  "  pm.expect(response.group_id).to.exist;",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{userAccessToken}}",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/groups/1",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "groups",
                "1"
              ]
            }
          },
          "response": []
        },
        {
          "name": "Update Group",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "const response = pm.response.json();",
                  "pm.test('Group updated successfully', () => {",
                  "  pm.expect(pm.response.code).to.equal(200);",
                  "  pm.expect(response.group_id).to.exist;",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{userAccessToken}}",
                "type": "text"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"group_name\": \"UpdatedGroup\",\n  \"icon_name\": \"building\",\n  \"icon_color\": \"#3366FF\",\n  \"group_description\": \"Updated group description\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{baseUrl}}/groups/1",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "groups",
                "1"
              ]
            }
          },
          "response": []
        },
        {
          "name": "Delete Group",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Group deleted successfully', () => {",
                  "  pm.expect(pm.response.code).to.equal(204);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "DELETE",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{userAccessToken}}",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/groups/1",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "groups",
                "1"
              ]
            }
          },
          "response": []
        },
        {
          "name": "Add User to Group",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "const response = pm.response.json();",
                  "pm.test('User added to group successfully', () => {",
                  "  pm.expect(pm.response.code).to.equal(201);",
                  "  pm.expect(response.user_group_id).to.exist;",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{userAccessToken}}",
                "type": "text"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"groupId\": 1,\n  \"accountId\": \"user123\",\n  \"role\": \"member\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{baseUrl}}/groups/members",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "groups",
                "members"
              ]
            }
          },
          "response": []
        },
        {
          "name": "Update User Role in Group",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "const response = pm.response.json();",
                  "pm.test('User role updated successfully', () => {",
                  "  pm.expect(pm.response.code).to.equal(200);",
                  "  pm.expect(response.user_group_id).to.exist;",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{userAccessToken}}",
                "type": "text"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"accountId\": \"user123\",\n  \"role\": \"vice\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{baseUrl}}/groups/1/members/role",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "groups",
                "1",
                "members",
                "role"
              ]
            }
          },
          "response": []
        },
        {
          "name": "Get Users in Group",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "const response = pm.response.json();",
                  "pm.test('Group members retrieved successfully', () => {",
                  "  pm.expect(pm.response.code).to.equal(200);",
                  "  pm.expect(response.data).to.exist;",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{userAccessToken}}",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/groups/1/members",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "groups",
                "1",
                "members"
              ]
            }
          },
          "response": []
        },
        {
          "name": "Remove User from Group",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('User removed from group successfully', () => {",
                  "  pm.expect(pm.response.code).to.equal(204);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "DELETE",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{userAccessToken}}",
                "type": "text"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"accountId\": \"user123\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{baseUrl}}/groups/1/members",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "groups",
                "1",
                "members"
              ]
            }
          },
          "response": []
        }
      ]
    },
    {
      "name": "House",
      "item": [
        {
          "name": "Create House",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "const response = pm.response.json();",
                  "pm.test('House created successfully', () => {",
                  "  pm.expect(pm.response.code).to.equal(201);",
                  "  pm.expect(response.house_id).to.exist;",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{userAccessToken}}",
                "type": "text"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"groupId\": 1,\n  \"house_name\": \"MyHouse\",\n  \"address\": \"123 Main St\",\n  \"icon_name\": \"home\",\n  \"icon_color\": \"blue\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{baseUrl}}/houses",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "houses"
              ]
            }
          },
          "response": []
        },
        {
          "name": "Get Houses by Group",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "const response = pm.response.json();",
                  "pm.test('Houses retrieved successfully', () => {",
                  "  pm.expect(pm.response.code).to.equal(200);",
                  "  pm.expect(response).to.be.an('array');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{userAccessToken}}",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/houses/group/1",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "houses",
                "group",
                "1"
              ]
            }
          },
          "response": []
        },
        {
          "name": "Get House by ID",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "const response = pm.response.json();",
                  "pm.test('House retrieved successfully', () => {",
                  "  pm.expect(pm.response.code).to.equal(200);",
                  "  pm.expect(response.house_id).to.exist;",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{userAccessToken}}",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/houses/1",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "houses",
                "1"
              ]
            }
          },
          "response": []
        },
        {
          "name": "Update House",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "const response = pm.response.json();",
                  "pm.test('House updated successfully', () => {",
                  "  pm.expect(pm.response.code).to.equal(200);",
                  "  pm.expect(response.house_id).to.exist;",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{userAccessToken}}",
                "type": "text"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"house_name\": \"UpdatedHouse\",\n  \"address\": \"456 Elm St\",\n  \"icon_name\": \"house\",\n  \"icon_color\": \"green\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{baseUrl}}/houses/1",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "houses",
                "1"
              ]
            }
          },
          "response": []
        },
        {
          "name": "Delete House",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('House deleted successfully', () => {",
                  "  pm.expect(pm.response.code).to.equal(204);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "DELETE",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{userAccessToken}}",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/houses/1",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "houses",
                "1"
              ]
            }
          },
          "response": []
        }
      ]
    },
    {
      "name": "Space",
      "item": [
        {
          "name": "Create Space",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "const response = pm.response.json();",
                  "pm.test('Space created successfully', () => {",
                  "  pm.expect(pm.response.code).to.equal(201);",
                  "  pm.expect(response.space_id).to.exist;",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{userAccessToken}}",
                "type": "text"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"houseId\": 1,\n  \"space_name\": \"MyRoom\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{baseUrl}}/spaces",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "spaces"
              ]
            }
          },
          "response": []
        },
        {
          "name": "Get Spaces by House",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "const response = pm.response.json();",
                  "pm.test('Spaces retrieved successfully', () => {",
                  "  pm.expect(pm.response.code).to.equal(200);",
                  "  pm.expect(response).to.be.an('array');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{userAccessToken}}",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/spaces/house/:houseId",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "spaces",
                "house",
                ":houseId"
              ],
              "variable": [
                {
                  "key": "houseId",
                  "value": "1"
                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "Get Space by ID",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "const response = pm.response.json();",
                  "pm.test('Space retrieved successfully', () => {",
                  "  pm.expect(pm.response.code).to.equal(200);",
                  "  pm.expect(response.space_id).to.exist;",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{userAccessToken}}",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/spaces/:spaceId",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "spaces",
                ":spaceId"
              ],
              "variable": [
                {
                  "key": "spaceId",
                  "value": "1"
                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "Update Space",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "const response = pm.response.json();",
                  "pm.test('Space updated successfully', () => {",
                  "  pm.expect(pm.response.code).to.equal(200);",
                  "  pm.expect(response.space_id).to.exist;",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{userAccessToken}}",
                "type": "text"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"space_name\": \"UpdatedRoom\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{baseUrl}}/spaces/:spaceId",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "spaces",
                ":spaceId"
              ],
              "variable": [
                {
                  "key": "spaceId",
                  "value": "1"
                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "Delete Space",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Space deleted successfully', () => {",
                  "  pm.expect(pm.response.code).to.equal(204);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "DELETE",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{userAccessToken}}",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/spaces/:spaceId",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "spaces",
                ":spaceId"
              ],
              "variable": [
                {
                  "key": "spaceId",
                  "value": "1"
                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "Get Space Name",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "const response = pm.response.json();",
                  "pm.test('Space name retrieved successfully', () => {",
                  "  pm.expect(pm.response.code).to.equal(200);",
                  "  pm.expect(response.name).to.exist;",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{userAccessToken}}",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/spaces/:spaceId/name",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "spaces",
                ":spaceId",
                "name"
              ],
              "variable": [
                {
                  "key": "spaceId",
                  "value": "1"
                }
              ]
            }
          },
          "response": []
        }
      ]
    },
    {
      "name": "Shared Permissions",
      "item": [
        {
          "name": "Revoke Share Device",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Share device revoked successfully', () => {",
                  "  pm.expect(pm.response.code).to.equal(204);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "DELETE",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{userAccessToken}}",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/permissions/:permissionId",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "permissions",
                ":permissionId"
              ],
              "variable": [
                {
                  "key": "permissionId",
                  "value": "1"
                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "Revoke Share by Recipient",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Share revoked by recipient successfully', () => {",
                  "  pm.expect(pm.response.code).to.equal(204);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "DELETE",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{userAccessToken}}",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/permissions/recipient/:permissionId",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "permissions",
                "recipient",
                ":permissionId"
              ],
              "variable": [
                {
                  "key": "permissionId",
                  "value": "1"
                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "Create Permission",
          "request": {
            "url": {
              "raw": "{{baseUrl}}/permissions",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "permissions"
              ]
            }
          }
        },
        {
          "name": "Get Permission by ID",
          "request": {
            "url": {
              "raw": "{{baseUrl}}/permissions/:permissionId",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "permissions",
                ":permissionId"
              ]
            }
          }
        },
        {
          "name": "Update Permission",
          "request": {
            "url": {
              "raw": "{{baseUrl}}/permissions/:permissionId",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "permissions",
                ":permissionId"
              ]
            }
          }
        },
        {
          "name": "Delete Permission",
          "request": {
            "url": {
              "raw": "{{baseUrl}}/permissions/:permissionId",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "permissions",
                ":permissionId"
              ]
            }
          }
        },
        {
          "name": "Get Device Permissions",
          "request": {
            "url": {
              "raw": "{{baseUrl}}/permissions/device/:deviceId",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "permissions",
                "device",
                ":deviceId"
              ]
            }
          }
        },
        {
          "name": "Get User Permissions",
          "request": {
            "url": {
              "raw": "{{baseUrl}}/permissions/user/:userId",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "permissions",
                "user",
                ":userId"
              ]
            }
          }
        }
      ]
    },
    {
      "name": "Share Requests",
      "item": [
        {
          "name": "Initiate Share Request",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "const response = pm.response.json();",
                  "pm.test('Share request initiated successfully', () => {",
                  "  pm.expect(pm.response.code).to.equal(201);",
                  "  pm.expect(response.message).to.equal('Share request initiated');",
                  "});"
                ],
                "type": "text/javascript",
                "packages": {}
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{userAccessToken}}",
                "type": "text"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"device_serial\": \"ABC123\",\n  \"to_user_email\": \"user@example.com\",\n  \"permission_type\": \"CONTROL\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{baseUrl}}/share-requests/:groupId",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "share-requests",
                ":groupId"
              ],
              "variable": [
                {
                  "key": "groupId",
                  "value": "1"
                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "Approve Share Request",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "const response = pm.response.json();",
                  "pm.test('Share request processed successfully', () => {",
                  "  pm.expect(pm.response.code).to.equal(200);",
                  "  pm.expect(response.message).to.be.oneOf(['Share request approved', 'Share request rejected']);",
                  "});"
                ],
                "type": "text/javascript",
                "packages": {}
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{userAccessToken}}",
                "type": "text"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"accept\": true\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{baseUrl}}/share-requests/approve/:requestId",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "share-requests",
                "approve",
                ":requestId"
              ],
              "variable": [
                {
                  "key": "requestId",
                  "value": "1"
                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "Get Share Requests by Device",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "const response = pm.response.json();",
                  "pm.test('Share requests retrieved successfully', () => {",
                  "  pm.expect(pm.response.code).to.equal(200);",
                  "  pm.expect(response).to.be.an('array');",
                  "});"
                ],
                "type": "text/javascript",
                "packages": {}
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{userAccessToken}}",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/share-requests/device/:deviceId/group/:groupId?serial_number=ABC123",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "share-requests",
                "device",
                ":deviceId",
                "group",
                ":groupId"
              ],
              "query": [
                {
                  "key": "serial_number",
                  "value": "ABC123"
                }
              ],
              "variable": [
                {
                  "key": "deviceId",
                  "value": "1"
                },
                {
                  "key": "groupId",
                  "value": "1"
                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "Get Shared Permissions by Device",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "const response = pm.response.json();",
                  "pm.test('Shared permissions retrieved successfully', () => {",
                  "  pm.expect(pm.response.code).to.equal(200);",
                  "  pm.expect(response).to.be.an('array');",
                  "});"
                ],
                "type": "text/javascript",
                "packages": {}
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{userAccessToken}}",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/share-requests/permissions/device/:deviceId/group/:groupId?serial_number=ABC123",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "share-requests",
                "permissions",
                "device",
                ":deviceId",
                "group",
                ":groupId"
              ],
              "query": [
                {
                  "key": "serial_number",
                  "value": "ABC123"
                }
              ],
              "variable": [
                {
                  "key": "deviceId",
                  "value": "1"
                },
                {
                  "key": "groupId",
                  "value": "1"
                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "Get Shared Devices by Owner",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "const response = pm.response.json();",
                  "pm.test('Shared devices retrieved successfully', () => {",
                  "  pm.expect(pm.response.code).to.equal(200);",
                  "  pm.expect(response).to.be.an('array');",
                  "});"
                ],
                "type": "text/javascript",
                "packages": {}
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{userAccessToken}}",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/share-requests/owner",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "share-requests",
                "owner"
              ]
            }
          },
          "response": []
        },
        {
          "name": "Create Share Request",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{userAccessToken}}",
                "type": "text"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"device_serial\": \"ABC123\",\n  \"to_user_email\": \"user@example.com\",\n  \"permission_type\": \"CONTROL\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{baseUrl}}/share-requests",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "share-requests"
              ]
            }
          }
        },
        {
          "name": "Get Share Request by ID",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{userAccessToken}}",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/share-requests/:requestId",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "share-requests",
                ":requestId"
              ],
              "variable": [
                {
                  "key": "requestId",
                  "value": "1"
                }
              ]
            }
          }
        },
        {
          "name": "Update Share Request",
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{userAccessToken}}",
                "type": "text"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"permission_type\": \"VIEW\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{baseUrl}}/share-requests/:requestId",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "share-requests",
                ":requestId"
              ],
              "variable": [
                {
                  "key": "requestId",
                  "value": "1"
                }
              ]
            }
          }
        },
        {
          "name": "Delete Share Request",
          "request": {
            "method": "DELETE",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{userAccessToken}}",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/share-requests/:requestId",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "share-requests",
                ":requestId"
              ],
              "variable": [
                {
                  "key": "requestId",
                  "value": "1"
                }
              ]
            }
          }
        },
        {
          "name": "Get Pending Share Requests",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{userAccessToken}}",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/share-requests/pending",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "share-requests",
                "pending"
              ]
            }
          }
        }
      ]
    },
    {
      "name": "Alert Type",
      "item": [
        {
          "name": "Create Alert Type",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "const response = pm.response.json();",
                  "pm.test('Alert type created successfully', () => {",
                  "  pm.expect(pm.response.code).to.equal(201);",
                  "  pm.expect(response.alert_type_id).to.exist;",
                  "});"
                ],
                "type": "text/javascript",
                "packages": {}
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{employeeAccessToken}}",
                "type": "text"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"alert_type_name\": \"Critical Alert\",\n  \"priority\": 3\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{baseUrl}}/alert-types",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "alert-types"
              ]
            }
          },
          "response": []
        },
        {
          "name": "Update Alert Type",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "const response = pm.response.json();",
                  "pm.test('Alert type updated successfully', () => {",
                  "  pm.expect(pm.response.code).to.equal(200);",
                  "  pm.expect(response.alert_type_id).to.exist;",
                  "});"
                ],
                "type": "text/javascript",
                "packages": {}
              }
            }
          ],
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{employeeAccessToken}}",
                "type": "text"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"alert_type_name\": \"Updated Alert\",\n  \"priority\": 4\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{baseUrl}}/alert-types/:alertTypeId",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "alert-types",
                ":alertTypeId"
              ],
              "variable": [
                {
                  "key": "alertTypeId",
                  "value": "1"
                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "Delete Alert Type",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Alert type deleted successfully', () => {",
                  "  pm.expect(pm.response.code).to.equal(204);",
                  "});"
                ],
                "type": "text/javascript",
                "packages": {}
              }
            }
          ],
          "request": {
            "method": "DELETE",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{employeeAccessToken}}",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/alert-types/:alertTypeId",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "alert-types",
                ":alertTypeId"
              ],
              "variable": [
                {
                  "key": "alertTypeId",
                  "value": "1"
                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "Get Alert Type by ID",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "const response = pm.response.json();",
                  "pm.test('Alert type retrieved successfully', () => {",
                  "  pm.expect(pm.response.code).to.equal(200);",
                  "  pm.expect(response.alert_type_id).to.exist;",
                  "});"
                ],
                "type": "text/javascript",
                "packages": {}
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{employeeAccessToken}}",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/alert-types/:alertTypeId",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "alert-types",
                ":alertTypeId"
              ],
              "variable": [
                {
                  "key": "alertTypeId",
                  "value": "1"
                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "Get All Alert Types",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "const response = pm.response.json();",
                  "pm.test('Alert types retrieved successfully', () => {",
                  "  pm.expect(pm.response.code).to.equal(200);",
                  "  pm.expect(response).to.be.an('array');",
                  "});"
                ],
                "type": "text/javascript",
                "packages": {}
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{employeeAccessToken}}",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/alert-types",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "alert-types"
              ]
            }
          },
          "response": []
        }
      ]
    },
    {
      "name": "Alert",
      "item": [
        {
          "name": "Create Alert",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "const response = pm.response.json();",
                  "pm.test('Alert created successfully', () => {",
                  "  pm.expect(pm.response.code).to.equal(201);",
                  "  pm.expect(response.alert_id).to.exist;",
                  "});"
                ],
                "type": "text/javascript",
                "packages": {}
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{employeeAccessToken}}",
                "type": "text"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"device_serial\": \"ABC123\",\n  \"space_id\": 1,\n  \"message\": \"Device malfunction\",\n  \"alert_type_id\": 1,\n  \"status\": \"unread\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{baseUrl}}/alerts",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "alerts"
              ]
            }
          },
          "response": []
        },
        {
          "name": "Update Alert",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "const response = pm.response.json();",
                  "pm.test('Alert updated successfully', () => {",
                  "  pm.expect(pm.response.code).to.equal(200);",
                  "  pm.expect(response.alert_id).to.exist;",
                  "});"
                ],
                "type": "text/javascript",
                "packages": {}
              }
            }
          ],
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{employeeAccessToken}}",
                "type": "text"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"message\": \"Updated malfunction alert\",\n  \"status\": \"read\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{baseUrl}}/alerts/:alertId",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "alerts",
                ":alertId"
              ],
              "variable": [
                {
                  "key": "alertId",
                  "value": "1"
                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "Soft Delete Alert",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Alert soft deleted successfully', () => {",
                  "  pm.expect(pm.response.code).to.equal(204);",
                  "});"
                ],
                "type": "text/javascript",
                "packages": {}
              }
            }
          ],
          "request": {
            "method": "DELETE",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{employeeAccessToken}}",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/alerts/:alertId/soft",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "alerts",
                ":alertId",
                "soft"
              ],
              "variable": [
                {
                  "key": "alertId",
                  "value": "1"
                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "Hard Delete Alert",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Alert hard deleted successfully', () => {",
                  "  pm.expect(pm.response.code).to.equal(204);",
                  "});"
                ],
                "type": "text/javascript",
                "packages": {}
              }
            }
          ],
          "request": {
            "method": "DELETE",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{employeeAccessToken}}",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/alerts/:alertId/hard",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "alerts",
                ":alertId",
                "hard"
              ],
              "variable": [
                {
                  "key": "alertId",
                  "value": "1"
                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "Get Alert by ID",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "const response = pm.response.json();",
                  "pm.test('Alert retrieved successfully', () => {",
                  "  pm.expect(pm.response.code).to.equal(200);",
                  "  pm.expect(response.alert_id).to.exist;",
                  "});"
                ],
                "type": "text/javascript",
                "packages": {}
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{employeeAccessToken}}",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/alerts/:alertId",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "alerts",
                ":alertId"
              ],
              "variable": [
                {
                  "key": "alertId",
                  "value": "1"
                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "Get All Alerts",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "const response = pm.response.json();",
                  "pm.test('Alerts retrieved successfully', () => {",
                  "  pm.expect(pm.response.code).to.equal(200);",
                  "  pm.expect(response).to.be.an('array');",
                  "});"
                ],
                "type": "text/javascript",
                "packages": {}
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{employeeAccessToken}}",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/alerts",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "alerts"
              ]
            }
          },
          "response": []
        }
      ]
    },
    {
      "name": "Firmware",
      "item": [
        {
          "name": "Create Firmware",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "const response = pm.response.json();",
                  "pm.test('Firmware created successfully', () => {",
                  "  pm.expect(pm.response.code).to.equal(201);",
                  "  pm.expect(response.firmware_id).to.exist;",
                  "});"
                ],
                "type": "text/javascript",
                "packages": {}
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{employeeAccessToken}}",
                "type": "text"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"version\": \"1.0.0\",\n  \"file_path\": \"/firmware/v1.0.0.bin\",\n  \"template_id\": 1,\n  \"is_mandatory\": true,\n  \"note\": \"Initial firmware release\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{baseUrl}}/firmwares",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "firmwares"
              ]
            }
          },
          "response": []
        },
        {
          "name": "Update Firmware",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "const response = pm.response.json();",
                  "pm.test('Firmware updated successfully', () => {",
                  "  pm.expect(pm.response.code).to.equal(200);",
                  "  pm.expect(response.firmware_id).to.exist;",
                  "});"
                ],
                "type": "text/javascript",
                "packages": {}
              }
            }
          ],
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{employeeAccessToken}}",
                "type": "text"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"version\": \"1.0.1\",\n  \"file_path\": \"/firmware/v1.0.1.bin\",\n  \"is_mandatory\": false,\n  \"is_approved\": true,\n  \"tested_at\": \"2025-05-20T12:00:00Z\",\n  \"note\": \"Updated firmware release\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{baseUrl}}/firmwares/:firmwareId",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "firmwares",
                ":firmwareId"
              ],
              "variable": [
                {
                  "key": "firmwareId",
                  "value": "1"
                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "Delete Firmware",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Firmware deleted successfully', () => {",
                  "  pm.expect(pm.response.code).to.equal(204);",
                  "});"
                ],
                "type": "text/javascript",
                "packages": {}
              }
            }
          ],
          "request": {
            "method": "DELETE",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{employeeAccessToken}}",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/firmwares/:firmwareId",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "firmwares",
                ":firmwareId"
              ],
              "variable": [
                {
                  "key": "firmwareId",
                  "value": "1"
                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "Get Firmware by ID",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "const response = pm.response.json();",
                  "pm.test('Firmware retrieved successfully', () => {",
                  "  pm.expect(pm.response.code).to.equal(200);",
                  "  pm.expect(response.firmware_id).to.exist;",
                  "});"
                ],
                "type": "text/javascript",
                "packages": {}
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{employeeAccessToken}}",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/firmwares/:firmwareId",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "firmwares",
                ":firmwareId"
              ],
              "variable": [
                {
                  "key": "firmwareId",
                  "value": "1"
                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "Get All Firmwares",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "const response = pm.response.json();",
                  "pm.test('Firmwares retrieved successfully', () => {",
                  "  pm.expect(pm.response.code).to.equal(200);",
                  "  pm.expect(response).to.be.an('array');",
                  "});"
                ],
                "type": "text/javascript",
                "packages": {}
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{employeeAccessToken}}",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/firmwares",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "firmwares"
              ]
            }
          },
          "response": []
        }
      ]
    },
    {
      "name": "Firmware Update History",
      "item": [
        {
          "name": "Create Firmware Update History",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "const response = pm.response.json();",
                  "pm.test('Firmware update history created successfully', () => {",
                  "  pm.expect(pm.response.code).to.equal(201);",
                  "  pm.expect(response.update_id).to.exist;",
                  "});"
                ],
                "type": "text/javascript",
                "packages": {}
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{employeeAccessToken}}",
                "type": "text"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"device_serial\": \"ABC123\",\n  \"firmware_id\": 1,\n  \"status\": \"success\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{baseUrl}}/firmware-update-histories",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "firmware-update-histories"
              ]
            }
          },
          "response": []
        },
        {
          "name": "Update Firmware Update History",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "const response = pm.response.json();",
                  "pm.test('Firmware update history updated successfully', () => {",
                  "  pm.expect(pm.response.code).to.equal(200);",
                  "  pm.expect(response.update_id).to.exist;",
                  "});"
                ],
                "type": "text/javascript",
                "packages": {}
              }
            }
          ],
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{employeeAccessToken}}",
                "type": "text"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"status\": \"failed\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{baseUrl}}/firmware-update-histories/:updateId",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "firmware-update-histories",
                ":updateId"
              ],
              "variable": [
                {
                  "key": "updateId",
                  "value": "1"
                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "Delete Firmware Update History",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Firmware update history deleted successfully', () => {",
                  "  pm.expect(pm.response.code).to.equal(204);",
                  "});"
                ],
                "type": "text/javascript",
                "packages": {}
              }
            }
          ],
          "request": {
            "method": "DELETE",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{employeeAccessToken}}",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/firmware-update-histories/:updateId",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "firmware-update-histories",
                ":updateId"
              ],
              "variable": [
                {
                  "key": "updateId",
                  "value": "1"
                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "Get Firmware Update History by ID",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "const response = pm.response.json();",
                  "pm.test('Firmware update history retrieved successfully', () => {",
                  "  pm.expect(pm.response.code).to.equal(200);",
                  "  pm.expect(response.update_id).to.exist;",
                  "});"
                ],
                "type": "text/javascript",
                "packages": {}
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{employeeAccessToken}}",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/firmware-update-histories/:updateId",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "firmware-update-histories",
                ":updateId"
              ],
              "variable": [
                {
                  "key": "updateId",
                  "value": "1"
                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "Get Firmware Update Histories",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "const response = pm.response.json();",
                  "pm.test('Firmware update histories retrieved successfully', () => {",
                  "  pm.expect(pm.response.code).to.equal(200);",
                  "  pm.expect(response).to.be.an('array');",
                  "});"
                ],
                "type": "text/javascript",
                "packages": {}
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{employeeAccessToken}}",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/firmware-update-histories?device_serial=ABC123&page=1&limit=10",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "firmware-update-histories"
              ],
              "query": [
                {
                  "key": "device_serial",
                  "value": "ABC123"
                },
                {
                  "key": "page",
                  "value": "1"
                },
                {
                  "key": "limit",
                  "value": "10"
                }
              ]
            }
          },
          "response": []
        }
      ]
    },
    {
      "name": "Ownership History",
      "item": [
        {
          "name": "Initiate Ownership Transfer",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "const response = pm.response.json();",
                  "pm.test('Ownership transfer initiated successfully', () => {",
                  "  pm.expect(pm.response.code).to.equal(201);",
                  "  pm.expect(response.message).to.equal('Ownership transfer request initiated');",
                  "});"
                ],
                "type": "text/javascript",
                "packages": {}
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{userAccessToken}}",
                "type": "text"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"device_serial\": \"ABC123\",\n  \"to_user_email\": \"newuser@example.com\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{baseUrl}}/ownership-history/transfer",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "ownership-history",
                "transfer"
              ]
            }
          },
          "response": []
        },
        {
          "name": "Approve Ownership Transfer",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "const response = pm.response.json();",
                  "pm.test('Ownership transfer processed successfully', () => {",
                  "  pm.expect(pm.response.code).to.equal(200);",
                  "  pm.expect(response.message).to.be.oneOf(['Ownership transfer approved', 'Ownership transfer rejected']);",
                  "});"
                ],
                "type": "text/javascript",
                "packages": {}
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{userAccessToken}}",
                "type": "text"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"accept\": true\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{baseUrl}}/ownership-history/transfer/:ticketId/approve",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "ownership-history",
                "transfer",
                ":ticketId",
                "approve"
              ],
              "variable": [
                {
                  "key": "ticketId",
                  "value": "1"
                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "Get Ownership History by ID",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "const response = pm.response.json();",
                  "pm.test('Ownership history retrieved successfully', () => {",
                  "  pm.expect(pm.response.code).to.equal(200);",
                  "  pm.expect(response.history_id).to.exist;",
                  "});"
                ],
                "type": "text/javascript",
                "packages": {}
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{userAccessToken}}",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/ownership-history/:historyId",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "ownership-history",
                ":historyId"
              ],
              "variable": [
                {
                  "key": "historyId",
                  "value": "1"
                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "Get Ownership History by Device",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "const response = pm.response.json();",
                  "pm.test('Ownership histories retrieved successfully', () => {",
                  "  pm.expect(pm.response.code).to.equal(200);",
                  "  pm.expect(response).to.be.an('array');",
                  "});"
                ],
                "type": "text/javascript",
                "packages": {}
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{userAccessToken}}",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/ownership-history/device/:device_serial",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "ownership-history",
                "device",
                ":device_serial"
              ],
              "variable": [
                {
                  "key": "device_serial",
                  "value": "ABC123"
                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "Get Ownership History by User",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "const response = pm.response.json();",
                  "pm.test('Ownership histories retrieved successfully', () => {",
                  "  pm.expect(pm.response.code).to.equal(200);",
                  "  pm.expect(response).to.be.an('array');",
                  "});"
                ],
                "type": "text/javascript",
                "packages": {}
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{userAccessToken}}",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/ownership-history/user",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "ownership-history",
                "user"
              ]
            }
          },
          "response": []
        },
        {
          "name": "Delete Ownership History",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "const response = pm.response.json();",
                  "pm.test('Ownership history deleted successfully', () => {",
                  "  pm.expect(pm.response.code).to.equal(200);",
                  "  pm.expect(response.message).to.equal('Ownership history deleted');",
                  "});"
                ],
                "type": "text/javascript",
                "packages": {}
              }
            }
          ],
          "request": {
            "method": "DELETE",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{userAccessToken}}",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/ownership-history/:historyId",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "ownership-history",
                ":historyId"
              ],
              "variable": [
                {
                  "key": "historyId",
                  "value": "1"
                }
              ]
            }
          },
          "response": []
        }
      ]
    },
    {
      "name": "Ticket Type",
      "item": [
        {
          "name": "Create Ticket Type",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "const response = pm.response.json();",
                  "pm.test('Ticket type created successfully', () => {",
                  "  pm.expect(pm.response.code).to.equal(201);",
                  "  pm.expect(response.ticket_type_id).to.exist;",
                  "});"
                ],
                "type": "text/javascript",
                "packages": {}
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{employeeAccessToken}}",
                "type": "text"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"type_name\": \"Hardware Issue\",\n  \"priority\": 2,\n  \"is_active\": true\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{baseUrl}}/ticket-types",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "ticket-types"
              ]
            }
          },
          "response": []
        },
        {
          "name": "Update Ticket Type",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "const response = pm.response.json();",
                  "pm.test('Ticket type updated successfully', () => {",
                  "  pm.expect(pm.response.code).to.equal(200);",
                  "  pm.expect(response.ticket_type_id).to.exist;",
                  "});"
                ],
                "type": "text/javascript",
                "packages": {}
              }
            }
          ],
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{employeeAccessToken}}",
                "type": "text"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"type_name\": \"Updated Hardware Issue\",\n  \"priority\": 3,\n  \"is_active\": false\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{baseUrl}}/ticket-types/:ticketTypeId",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "ticket-types",
                ":ticketTypeId"
              ],
              "variable": [
                {
                  "key": "ticketTypeId",
                  "value": "1"
                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "Update Ticket Type Priority",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "const response = pm.response.json();",
                  "pm.test('Ticket type priority updated successfully', () => {",
                  "  pm.expect(pm.response.code).to.equal(200);",
                  "  pm.expect(response.ticket_type_id).to.exist;",
                  "});"
                ],
                "type": "text/javascript",
                "packages": {}
              }
            }
          ],
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{employeeAccessToken}}",
                "type": "text"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"priority\": 4\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{baseUrl}}/ticket-types/:ticketTypeId/priority",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "ticket-types",
                ":ticketTypeId",
                "priority"
              ],
              "variable": [
                {
                  "key": "ticketTypeId",
                  "value": "1"
                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "Delete Ticket Type",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Ticket type deleted successfully', () => {",
                  "  pm.expect(pm.response.code).to.equal(204);",
                  "});"
                ],
                "type": "text/javascript",
                "packages": {}
              }
            }
          ],
          "request": {
            "method": "DELETE",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{employeeAccessToken}}",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/ticket-types/:ticketTypeId",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "ticket-types",
                ":ticketTypeId"
              ],
              "variable": [
                {
                  "key": "ticketTypeId",
                  "value": "1"
                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "Get Ticket Type by ID",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "const response = pm.response.json();",
                  "pm.test('Ticket type retrieved successfully', () => {",
                  "  pm.expect(pm.response.code).to.equal(200);",
                  "  pm.expect(response.ticket_type_id).to.exist;",
                  "});"
                ],
                "type": "text/javascript",
                "packages": {}
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{employeeAccessToken}}",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/ticket-types/:ticketTypeId",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "ticket-types",
                ":ticketTypeId"
              ],
              "variable": [
                {
                  "key": "ticketTypeId",
                  "value": "1"
                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "Get All Ticket Types",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "const response = pm.response.json();",
                  "pm.test('Ticket types retrieved successfully', () => {",
                  "  pm.expect(pm.response.code).to.equal(200);",
                  "  pm.expect(response).to.be.an('array');",
                  "});"
                ],
                "type": "text/javascript",
                "packages": {}
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{employeeAccessToken}}",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/ticket-types",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "ticket-types"
              ]
            }
          },
          "response": []
        }
      ]
    },
    {
      "name": "Ticket",
      "item": [
        {
          "name": "Create Ticket",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "const response = pm.response.json();",
                  "pm.test('Ticket created successfully', () => {",
                  "  pm.expect(pm.response.code).to.equal(201);",
                  "  pm.expect(response.ticket_id).to.exist;",
                  "});"
                ],
                "type": "text/javascript",
                "packages": {}
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{userAccessToken}}",
                "type": "text"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"device_serial\": \"ABC123\",\n  \"ticket_type_id\": 1,\n  \"description\": \"Device not responding\",\n  \"evidence\": {\"image\": \"error.jpg\"}\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{baseUrl}}/tickets",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "tickets"
              ]
            }
          },
          "response": []
        },
        {
          "name": "Update Ticket",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "const response = pm.response.json();",
                  "pm.test('Ticket updated successfully', () => {",
                  "  pm.expect(pm.response.code).to.equal(200);",
                  "  pm.expect(response.ticket_id).to.exist;",
                  "});"
                ],
                "type": "text/javascript",
                "packages": {}
              }
            }
          ],
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{userAccessToken}}",
                "type": "text"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"description\": \"Updated issue description\",\n  \"evidence\": {\"image\": \"updated_error.jpg\"},\n  \"status\": \"in_progress\",\n  \"assigned_to\": \"employee123\",\n  \"resolve_solution\": \"Restart device\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{baseUrl}}/tickets/:ticketId",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "tickets",
                ":ticketId"
              ],
              "variable": [
                {
                  "key": "ticketId",
                  "value": "1"
                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "Delete Ticket",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Ticket deleted successfully', () => {",
                  "  pm.expect(pm.response.code).to.equal(204);",
                  "});"
                ],
                "type": "text/javascript",
                "packages": {}
              }
            }
          ],
          "request": {
            "method": "DELETE",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{employeeAccessToken}}",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/tickets/:ticketId",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "tickets",
                ":ticketId"
              ],
              "variable": [
                {
                  "key": "ticketId",
                  "value": "1"
                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "Get Ticket by ID",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "const response = pm.response.json();",
                  "pm.test('Ticket retrieved successfully', () => {",
                  "  pm.expect(pm.response.code).to.equal(200);",
                  "  pm.expect(response.ticket_id).to.exist;",
                  "});"
                ],
                "type": "text/javascript",
                "packages": {}
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{userAccessToken}}",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/tickets/:ticketId",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "tickets",
                ":ticketId"
              ],
              "variable": [
                {
                  "key": "ticketId",
                  "value": "1"
                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "Get Tickets by User",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "const response = pm.response.json();",
                  "pm.test('Tickets retrieved successfully', () => {",
                  "  pm.expect(pm.response.code).to.equal(200);",
                  "  pm.expect(response).to.be.an('array');",
                  "});"
                ],
                "type": "text/javascript",
                "packages": {}
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{userAccessToken}}",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/tickets/user",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "tickets",
                "user"
              ]
            }
          },
          "response": []
        },
        {
          "name": "Get All Tickets",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "const response = pm.response.json();",
                  "pm.test('Tickets retrieved successfully', () => {",
                  "  pm.expect(pm.response.code).to.equal(200);",
                  "  pm.expect(response).to.be.an('array');",
                  "});"
                ],
                "type": "text/javascript",
                "packages": {}
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{employeeAccessToken}}",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/tickets?user_id=user123&ticket_type_id=1&status=pending&created_at_start=2025-01-01T00:00:00Z&created_at_end=2025-12-31T23:59:59Z&page=1&limit=10",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "tickets"
              ],
              "query": [
                {
                  "key": "user_id",
                  "value": "user123"
                },
                {
                  "key": "ticket_type_id",
                  "value": "1"
                },
                {
                  "key": "status",
                  "value": "pending"
                },
                {
                  "key": "created_at_start",
                  "value": "2025-01-01T00:00:00Z"
                },
                {
                  "key": "created_at_end",
                  "value": "2025-12-31T23:59:59Z"
                },
                {
                  "key": "page",
                  "value": "1"
                },
                {
                  "key": "limit",
                  "value": "10"
                }
              ]
            }
          },
          "response": []
        }
      ]
    },
    {
      "name": "Hourly Value",
      "item": [
        {
          "name": "Create Hourly Value",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "const response = pm.response.json();",
                  "pm.test('Hourly Value created successfully', () => {",
                  "  pm.expect(pm.response.code).to.equal(201);",
                  "  pm.expect(response.hourly_value_id).to.exist;",
                  "});"
                ],
                "type": "text/javascript",
                "packages": {}
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{employeeAccessToken}}",
                "type": "text"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"device_serial\": \"ABC123\",\n  \"space_id\": 1,\n  \"hour_timestamp\": \"2025-05-20T10:00:00Z\",\n  \"avg_value\": {\"temperature\": 25.5, \"humidity\": 60, \"gas\": 200},\n  \"sample_count\": 360\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{baseUrl}}/hourly-values",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "hourly-values"
              ]
            }
          },
          "response": []
        },
        {
          "name": "Update Hourly Value",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "const response = pm.response.json();",
                  "pm.test('Hourly Value updated successfully', () => {",
                  "  pm.expect(pm.response.code).to.equal(200);",
                  "  pm.expect(response.hourly_value_id).to.exist;",
                  "});"
                ],
                "type": "text/javascript",
                "packages": {}
              }
            }
          ],
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{employeeAccessToken}}",
                "type": "text"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"avg_value\": {\"temperature\": 26.0, \"humidity\": 65, \"gas\": 210},\n  \"sample_count\": 400\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{baseUrl}}/hourly-values/:hourlyValueId",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "hourly-values",
                ":hourlyValueId"
              ],
              "variable": [
                {
                  "key": "hourlyValueId",
                  "value": "1"
                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "Soft Delete Hourly Value",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Hourly Value soft deleted successfully', () => {",
                  "  pm.expect(pm.response.code).to.equal(204);",
                  "});"
                ],
                "type": "text/javascript",
                "packages": {}
              }
            }
          ],
          "request": {
            "method": "DELETE",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{employeeAccessToken}}",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/hourly-values/:hourlyValueId/soft",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "hourly-values",
                ":hourlyValueId",
                "soft"
              ],
              "variable": [
                {
                  "key": "hourlyValueId",
                  "value": "1"
                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "Hard Delete Hourly Value",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Hourly Value hard deleted successfully', () => {",
                  "  pm.expect(pm.response.code).to.equal(204);",
                  "});"
                ],
                "type": "text/javascript",
                "packages": {}
              }
            }
          ],
          "request": {
            "method": "DELETE",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{employeeAccessToken}}",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/hourly-values/:hourlyValueId/hard",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "hourly-values",
                ":hourlyValueId",
                "hard"
              ],
              "variable": [
                {
                  "key": "hourlyValueId",
                  "value": "1"
                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "Get Hourly Value by ID",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "const response = pm.response.json();",
                  "pm.test('Hourly Value retrieved successfully', () => {",
                  "  pm.expect(pm.response.code).to.equal(200);",
                  "  pm.expect(response.hourly_value_id).to.exist;",
                  "});"
                ],
                "type": "text/javascript",
                "packages": {}
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{employeeAccessToken}}",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/hourly-values/:hourlyValueId",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "hourly-values",
                ":hourlyValueId"
              ],
              "variable": [
                {
                  "key": "hourlyValueId",
                  "value": "1"
                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "Get All Hourly Values",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "const response = pm.response.json();",
                  "pm.test('Hourly Values retrieved successfully', () => {",
                  "  pm.expect(pm.response.code).to.equal(200);",
                  "  pm.expect(response).to.be.an('array');",
                  "});"
                ],
                "type": "text/javascript",
                "packages": {}
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{employeeAccessToken}}",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/hourly-values",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "hourly-values"
              ]
            }
          },
          "response": []
        },
        {
          "name": "Get Hourly Values by Device",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "const response = pm.response.json();",
                  "pm.test('Hourly Values by Device retrieved successfully', () => {",
                  "  pm.expect(pm.response.code).to.equal(200);",
                  "  pm.expect(response).to.be.an('array');",
                  "});"
                ],
                "type": "text/javascript",
                "packages": {}
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{employeeAccessToken}}",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/hourly-values/device/:device_serial?start_time=2025-05-20T00:00:00Z&end_time=2025-05-21T00:00:00Z&page=1&limit=10",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "hourly-values",
                "device",
                ":device_serial"
              ],
              "query": [
                {
                  "key": "start_time",
                  "value": "2025-05-20T00:00:00Z"
                },
                {
                  "key": "end_time",
                  "value": "2025-05-21T00:00:00Z"
                },
                {
                  "key": "page",
                  "value": "1"
                },
                {
                  "key": "limit",
                  "value": "10"
                }
              ],
              "variable": [
                {
                  "key": "device_serial",
                  "value": "ABC123"
                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "Get Hourly Values by Space",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "const response = pm.response.json();",
                  "pm.test('Hourly Values by Space retrieved successfully', () => {",
                  "  pm.expect(pm.response.code).to.equal(200);",
                  "  pm.expect(response).to.be.an('array');",
                  "});"
                ],
                "type": "text/javascript",
                "packages": {}
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{employeeAccessToken}}",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/hourly-values/space/:spaceId?start_time=2025-05-20T00:00:00Z&end_time=2025-05-21T00:00:00Z&page=1&limit=10",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "hourly-values",
                "space",
                ":spaceId"
              ],
              "query": [
                {
                  "key": "start_time",
                  "value": "2025-05-20T00:00:00Z"
                },
                {
                  "key": "end_time",
                  "value": "2025-05-21T00:00:00Z"
                },
                {
                  "key": "page",
                  "value": "1"
                },
                {
                  "key": "limit",
                  "value": "10"
                }
              ],
              "variable": [
                {
                  "key": "spaceId",
                  "value": "1"
                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "Get Hourly Value Statistics",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "const response = pm.response.json();",
                  "pm.test('Hourly Value Statistics retrieved successfully', () => {",
                  "  pm.expect(pm.response.code).to.equal(200);",
                  "  pm.expect(response.stats).to.be.an('array');",
                  "  pm.expect(response.chart).to.exist;",
                  "});"
                ],
                "type": "text/javascript",
                "packages": {}
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{employeeAccessToken}}",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/hourly-values/statistics/:device_serial?type=daily&start_time=2025-05-20T00:00:00Z&end_time=2025-05-21T00:00:00Z",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "hourly-values",
                "statistics",
                ":device_serial"
              ],
              "query": [
                {
                  "key": "type",
                  "value": "daily"
                },
                {
                  "key": "start_time",
                  "value": "2025-05-20T00:00:00Z"
                },
                {
                  "key": "end_time",
                  "value": "2025-05-21T00:00:00Z"
                }
              ],
              "variable": [
                {
                  "key": "device_serial",
                  "value": "ABC123"
                }
              ]
            }
          },
          "response": []
        }
      ]
    },
    {
      "name": "Component",
      "item": [
        {
          "name": "Create Component",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "const response = pm.response.json();",
                  "pm.test('Component created successfully', () => {",
                  "  pm.expect(pm.response.code).to.equal(201);",
                  "  pm.expect(response.component_id).to.exist;",
                  "});"
                ],
                "type": "text/javascript",
                "packages": {}
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{employeeAccessToken}}",
                "type": "text"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name\": \"Test Component\",\n  \"supplier\": \"Supplier ABC\",\n  \"quantity_in_stock\": 100,\n  \"unit_cost\": 10.50\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{baseUrl}}/component",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "component"
              ]
            }
          },
          "response": []
        },
        {
          "name": "Update Component",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "const response = pm.response.json();",
                  "pm.test('Component updated successfully', () => {",
                  "  pm.expect(pm.response.code).to.equal(200);",
                  "  pm.expect(response.component_id).to.exist;",
                  "});"
                ],
                "type": "text/javascript",
                "packages": {}
              }
            }
          ],
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{employeeAccessToken}}",
                "type": "text"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name\": \"Updated Component\",\n  \"supplier\": \"New Supplier\",\n  \"quantity_in_stock\": 150,\n  \"unit_cost\": 12.75\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{baseUrl}}/component/:componentId",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "component",
                ":componentId"
              ],
              "variable": [
                {
                  "key": "componentId",
                  "value": "1"
                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "Delete Component",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Component deleted successfully', () => {",
                  "  pm.expect(pm.response.code).to.equal(204);",
                  "});"
                ],
                "type": "text/javascript",
                "packages": {}
              }
            }
          ],
          "request": {
            "method": "DELETE",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{employeeAccessToken}}",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/component/:componentId",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "component",
                ":componentId"
              ],
              "variable": [
                {
                  "key": "componentId",
                  "value": "1"
                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "Get Component by ID",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "const response = pm.response.json();",
                  "pm.test('Component retrieved successfully', () => {",
                  "  pm.expect(pm.response.code).to.equal(200);",
                  "  pm.expect(response.component_id).to.exist;",
                  "});"
                ],
                "type": "text/javascript",
                "packages": {}
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{employeeAccessToken}}",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/component/:componentId",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "component",
                ":componentId"
              ]
            }
          },
          "response": []
        },
        {
          "name": "Get All Components",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "const response = pm.response.json();",
                  "pm.test('Components retrieved successfully', () => {",
                  "  pm.expect(pm.response.code).to.equal(200);",
                  "  pm.expect(response).to.be.an('array');",
                  "});"
                ],
                "type": "text/javascript",
                "packages": {}
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{employeeAccessToken}}",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/component",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "component"
              ]
            }
          },
          "response": []
        }
      ]
    },
    {
      "name": "Template Components",
      "item": [
        {
          "name": "Create Template Component",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "const response = pm.response.json();",
                  "pm.test('Template component created successfully', () => {",
                  "  pm.expect(pm.response.code).to.equal(201);",
                  "  pm.expect(response.template_component_id).to.exist;",
                  "});"
                ],
                "type": "text/javascript",
                "packages": {}
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{employeeAccessToken}}",
                "type": "text"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"template_id\": 1,\n  \"component_id\": 1,\n  \"quantity_required\": 1\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{baseUrl}}/template-components",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "template-components"
              ]
            }
          },
          "response": []
        },
        {
          "name": "Get All Template Components",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "const response = pm.response.json();",
                  "pm.test('Template components retrieved successfully', () => {",
                  "  pm.expect(pm.response.code).to.equal(200);",
                  "  pm.expect(response).to.be.an('array');",
                  "});"
                ],
                "type": "text/javascript",
                "packages": {}
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{employeeAccessToken}}",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/template-components",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "template-components"
              ]
            }
          },
          "response": []
        },
        {
          "name": "Get Template Component by ID",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "const response = pm.response.json();",
                  "pm.test('Template component retrieved successfully', () => {",
                  "  pm.expect(pm.response.code).to.equal(200);",
                  "  pm.expect(response.template_component_id).to.exist;",
                  "});"
                ],
                "type": "text/javascript",
                "packages": {}
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{employeeAccessToken}}",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/template-components/:templateComponentId",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "template-components",
                ":templateComponentId"
              ],
              "variable": [
                {
                  "key": "templateComponentId",
                  "value": "1"
                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "Update Template Component",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "const response = pm.response.json();",
                  "pm.test('Template component updated successfully', () => {",
                  "  pm.expect(pm.response.code).to.equal(200);",
                  "  pm.expect(response.template_component_id).to.exist;",
                  "});"
                ],
                "type": "text/javascript",
                "packages": {}
              }
            }
          ],
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{employeeAccessToken}}",
                "type": "text"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"template_id\": 1,\n  \"component_id\": 1,\n  \"quantity_required\": 2\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{baseUrl}}/template-components/:templateComponentId",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "template-components",
                ":templateComponentId"
              ],
              "variable": [
                {
                  "key": "templateComponentId",
                  "value": "1"
                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "Delete Template Component",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Template component deleted successfully', () => {",
                  "  pm.expect(pm.response.code).to.equal(204);",
                  "});"
                ],
                "type": "text/javascript",
                "packages": {}
              }
            }
          ],
          "request": {
            "method": "DELETE",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{employeeAccessToken}}",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/template-components/:templateComponentId",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "template-components",
                ":templateComponentId"
              ],
              "variable": [
                {
                  "key": "templateComponentId",
                  "value": "1"
                }
              ]
            }
          },
          "response": []
        }
      ]
    },
    {
      "name": "Device Templates",
      "item": [
        {
          "name": "Create Device Template",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "const response = pm.response.json();",
                  "pm.test('Device template created successfully', () => {",
                  "  pm.expect(pm.response.code).to.equal(201);",
                  "  pm.expect(response.template_id).to.exist;",
                  "});"
                ],
                "type": "text/javascript",
                "packages": {}
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{employeeAccessToken}}",
                "type": "text"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name\": \"Smart Light v1\",\n  \"description\": \"Standard smart light template\",\n  \"version\": \"1.0.0\",\n  \"category\": \"lighting\",\n  \"specifications\": {\n    \"power\": \"10W\",\n    \"voltage\": \"220V\",\n    \"connectivity\": \"WiFi\",\n    \"protocol\": \"MQTT\"\n  }\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{baseUrl}}/device-templates",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "device-templates"
              ]
            }
          },
          "response": []
        },
        {
          "name": "Get Device Template by ID",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "const response = pm.response.json();",
                  "pm.test('Device template retrieved successfully', () => {",
                  "  pm.expect(pm.response.code).to.equal(200);",
                  "  pm.expect(response.template_id).to.exist;",
                  "});"
                ],
                "type": "text/javascript",
                "packages": {}
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{employeeAccessToken}}",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/device-templates/:templateId",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "device-templates",
                ":templateId"
              ],
              "variable": [
                {
                  "key": "templateId",
                  "value": "1"
                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "Get All Device Templates",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "const response = pm.response.json();",
                  "pm.test('Device templates retrieved successfully', () => {",
                  "  pm.expect(pm.response.code).to.equal(200);",
                  "  pm.expect(response).to.be.an('array');",
                  "});"
                ],
                "type": "text/javascript",
                "packages": {}
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{employeeAccessToken}}",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/device-templates",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "device-templates"
              ]
            }
          },
          "response": []
        },
        {
          "name": "Update Device Template",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "const response = pm.response.json();",
                  "pm.test('Device template updated successfully', () => {",
                  "  pm.expect(pm.response.code).to.equal(200);",
                  "  pm.expect(response.template_id).to.exist;",
                  "});"
                ],
                "type": "text/javascript",
                "packages": {}
              }
            }
          ],
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{employeeAccessToken}}",
                "type": "text"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name\": \"Smart Light v1.1\",\n  \"description\": \"Updated smart light template\",\n  \"version\": \"1.1.0\",\n  \"category\": \"lighting\",\n  \"specifications\": {\n    \"power\": \"12W\",\n    \"voltage\": \"220V\",\n    \"connectivity\": \"WiFi+BLE\",\n    \"protocol\": \"MQTT\"\n  }\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{baseUrl}}/device-templates/:templateId",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "device-templates",
                ":templateId"
              ],
              "variable": [
                {
                  "key": "templateId",
                  "value": "1"
                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "Delete Device Template",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Device template deleted successfully', () => {",
                  "  pm.expect(pm.response.code).to.equal(204);",
                  "});"
                ],
                "type": "text/javascript",
                "packages": {}
              }
            }
          ],
          "request": {
            "method": "DELETE",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{employeeAccessToken}}",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/device-templates/:templateId",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "device-templates",
                ":templateId"
              ],
              "variable": [
                {
                  "key": "templateId",
                  "value": "1"
                }
              ]
            }
          },
          "response": []
        }
      ]
    },
    {
      "name": "Production Batches",
      "item": [
        {
          "name": "Create Production Batch",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "const response = pm.response.json();",
                  "pm.test('Production batch created successfully', () => {",
                  "  pm.expect(pm.response.code).to.equal(201);",
                  "  pm.expect(response.production_batch_id).to.exist;",
                  "});"
                ],
                "type": "text/javascript",
                "packages": {}
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{employeeAccessToken}}",
                "type": "text"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"template_id\": 1,\n  \"quantity\": 100,\n  \"start_date\": \"2025-05-21\",\n  \"target_completion_date\": \"2025-06-21\",\n  \"priority\": \"high\",\n  \"notes\": \"Regular production batch for smart lights\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{baseUrl}}/production-batches",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "production-batches"
              ]
            }
          },
          "response": []
        },
        {
          "name": "Get Production Batch by ID",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "const response = pm.response.json();",
                  "pm.test('Production batch retrieved successfully', () => {",
                  "  pm.expect(pm.response.code).to.equal(200);",
                  "  pm.expect(response.production_batch_id).to.exist;",
                  "});"
                ],
                "type": "text/javascript",
                "packages": {}
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{employeeAccessToken}}",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/production-batches/:batchId",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "production-batches",
                ":batchId"
              ],
              "variable": [
                {
                  "key": "batchId",
                  "value": "1"
                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "Get All Production Batches",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "const response = pm.response.json();",
                  "pm.test('Production batches retrieved successfully', () => {",
                  "  pm.expect(pm.response.code).to.equal(200);",
                  "  pm.expect(response).to.be.an('array');",
                  "});"
                ],
                "type": "text/javascript",
                "packages": {}
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{employeeAccessToken}}",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/production-batches",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "production-batches"
              ]
            }
          },
          "response": []
        },
        {
          "name": "Update Production Batch",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "const response = pm.response.json();",
                  "pm.test('Production batch updated successfully', () => {",
                  "  pm.expect(pm.response.code).to.equal(200);",
                  "  pm.expect(response.production_batch_id).to.exist;",
                  "});"
                ],
                "type": "text/javascript",
                "packages": {}
              }
            }
          ],
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{employeeAccessToken}}",
                "type": "text"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"quantity\": 120,\n  \"target_completion_date\": \"2025-06-30\",\n  \"priority\": \"urgent\",\n  \"notes\": \"Updated: Increased quantity and priority\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{baseUrl}}/production-batches/:batchId",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "production-batches",
                ":batchId"
              ],
              "variable": [
                {
                  "key": "batchId",
                  "value": "1"
                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "Delete Production Batch",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Production batch deleted successfully', () => {",
                  "  pm.expect(pm.response.code).to.equal(204);",
                  "});"
                ],
                "type": "text/javascript",
                "packages": {}
              }
            }
          ],
          "request": {
            "method": "DELETE",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{employeeAccessToken}}",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/production-batches/:batchId",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "production-batches",
                ":batchId"
              ],
              "variable": [
                {
                  "key": "batchId",
                  "value": "1"
                }
              ]
            }
          },
          "response": []
        }
      ]
    },
    {
      "name": "Production Components",
      "item": [
        {
          "name": "Create Production Component",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "const response = pm.response.json();",
                  "pm.test('Production component created successfully', () => {",
                  "  pm.expect(pm.response.code).to.equal(201);",
                  "  pm.expect(response.production_component_id).to.exist;",
                  "});"
                ],
                "type": "text/javascript",
                "packages": {}
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{employeeAccessToken}}",
                "type": "text"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"production_id\": 1,\n  \"component_id\": 1,\n  \"quantity_used\": 1\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{baseUrl}}/production-components",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "production-components"
              ]
            }
          },
          "response": []
        },
        {
          "name": "Get Production Component by ID",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "const response = pm.response.json();",
                  "pm.test('Production component retrieved successfully', () => {",
                  "  pm.expect(pm.response.code).to.equal(200);",
                  "  pm.expect(response.production_component_id).to.exist;",
                  "});"
                ],
                "type": "text/javascript",
                "packages": {}
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{employeeAccessToken}}",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/production-components/:productionComponentId",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "production-components",
                ":productionComponentId"
              ],
              "variable": [
                {
                  "key": "productionComponentId",
                  "value": "1"
                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "Get Production Components by Production ID",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "const response = pm.response.json();",
                  "pm.test('Production components retrieved successfully', () => {",
                  "  pm.expect(pm.response.code).to.equal(200);",
                  "  pm.expect(response).to.be.an('array');",
                  "});"
                ],
                "type": "text/javascript",
                "packages": {}
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{employeeAccessToken}}",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/production-components/production/:productionId",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "production-components",
                "production",
                ":productionId"
              ],
              "variable": [
                {
                  "key": "productionId",
                  "value": "1"
                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "Update Production Component",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "const response = pm.response.json();",
                  "pm.test('Production component updated successfully', () => {",
                  "  pm.expect(pm.response.code).to.equal(200);",
                  "  pm.expect(response.production_component_id).to.exist;",
                  "});"
                ],
                "type": "text/javascript",
                "packages": {}
              }
            }
          ],
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{employeeAccessToken}}",
                "type": "text"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"production_id\": 1,\n  \"component_id\": 1,\n  \"quantity_used\": 2\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{baseUrl}}/production-components/:productionComponentId",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "production-components",
                ":productionComponentId"
              ],
              "variable": [
                {
                  "key": "productionComponentId",
                  "value": "1"
                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "Delete Production Component",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Production component deleted successfully', () => {",
                  "  pm.expect(pm.response.code).to.equal(204);",
                  "});"
                ],
                "type": "text/javascript",
                "packages": {}
              }
            }
          ],
          "request": {
            "method": "DELETE",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{employeeAccessToken}}",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/production-components/:productionComponentId",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "production-components",
                ":productionComponentId"
              ],
              "variable": [
                {
                  "key": "productionComponentId",
                  "value": "1"
                }
              ]
            }
          },
          "response": []
        }
      ]
    },
    {
      "name": "Production Tracking",
      "item": [
        {
          "name": "Create Production Tracking",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "const response = pm.response.json();",
                  "pm.test('Production tracking created successfully', () => {",
                  "  pm.expect(pm.response.code).to.equal(201);",
                  "  pm.expect(response.production_tracking_id).to.exist;",
                  "});"
                ],
                "type": "text/javascript",
                "packages": {}
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{employeeAccessToken}}",
                "type": "text"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"production_batch_id\": \"BATCH123\",\n  \"device_serial\": \"DEV001\",\n  \"stage\": \"assembly\",\n  \"status\": \"in_progress\",\n  \"cost\": 150.50\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{baseUrl}}/production-tracking",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "production-tracking"
              ]
            }
          },
          "response": []
        },
        {
          "name": "Get Production Tracking by ID",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "const response = pm.response.json();",
                  "pm.test('Production tracking retrieved successfully', () => {",
                  "  pm.expect(pm.response.code).to.equal(200);",
                  "  pm.expect(response.production_tracking_id).to.exist;",
                  "});"
                ],
                "type": "text/javascript",
                "packages": {}
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{employeeAccessToken}}",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/production-tracking/:productionId",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "production-tracking",
                ":productionId"
              ],
              "variable": [
                {
                  "key": "productionId",
                  "value": "1"
                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "Get Production Tracking by Batch ID",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "const response = pm.response.json();",
                  "pm.test('Production tracking records retrieved successfully', () => {",
                  "  pm.expect(pm.response.code).to.equal(200);",
                  "  pm.expect(response).to.be.an('array');",
                  "});"
                ],
                "type": "text/javascript",
                "packages": {}
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{employeeAccessToken}}",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/production-tracking/batch/:batchId",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "production-tracking",
                "batch",
                ":batchId"
              ],
              "variable": [
                {
                  "key": "batchId",
                  "value": "1"
                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "Update Production Tracking",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "const response = pm.response.json();",
                  "pm.test('Production tracking updated successfully', () => {",
                  "  pm.expect(pm.response.code).to.equal(200);",
                  "  pm.expect(response.production_tracking_id).to.exist;",
                  "});"
                ],
                "type": "text/javascript",
                "packages": {}
              }
            }
          ],
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{employeeAccessToken}}",
                "type": "text"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"stage\": \"qc\",\n  \"status\": \"completed\",\n  \"cost\": 180.75\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{baseUrl}}/production-tracking/:productionId",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "production-tracking",
                ":productionId"
              ],
              "variable": [
                {
                  "key": "productionId",
                  "value": "1"
                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "Delete Production Tracking",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Production tracking deleted successfully', () => {",
                  "  pm.expect(pm.response.code).to.equal(204);",
                  "});"
                ],
                "type": "text/javascript",
                "packages": {}
              }
            }
          ],
          "request": {
            "method": "DELETE",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{employeeAccessToken}}",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/production-tracking/:productionId",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "production-tracking",
                ":productionId"
              ],
              "variable": [
                {
                  "key": "productionId",
                  "value": "1"
                }
              ]
            }
          },
          "response": []
        }
      ]
    }
  ]
}