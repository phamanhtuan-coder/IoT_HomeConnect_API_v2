[
  {
    "name": "Production Batches",
    "item": [
      {
        "name": "Get All Production Batches",
        "event": [
          {
            "listen": "test",
            "script": {
              "exec": [
                "const response = pm.response.json();",
                "pm.test('Production batches retrieved successfully', () => {",
                "  pm.expect(pm.response.code).to.equal(200);",
                "  pm.expect(response).to.be.an('array');",
                "});"
              ],
              "type": "text/javascript"
            }
          }
        ],
        "request": {
          "method": "GET",
          "header": [
            {
              "key": "Authorization",
              "value": "Bearer {{employeeAccessToken}}",
              "type": "text"
            }
          ],
          "url": {
            "raw": "{{baseUrl}}/production-batches?status=pending&page=1&limit=10",
            "host": ["{{baseUrl}}"],
            "path": ["production-batches"],
            "query": [
              {
                "key": "status",
                "value": "pending",
                "description": "Filter by status (pending/approved/rejected/in_progress/completed)",
                "disabled": true
              },
              {
                "key": "page",
                "value": "1",
                "description": "Page number",
                "disabled": true
              },
              {
                "key": "limit",
                "value": "10",
                "description": "Items per page (max 100)",
                "disabled": true
              }
            ]
          },
          "description": "Get list of all production batches with optional filters and pagination"
        },
        "response": []
      },
      {
        "name": "Create Production Batch",
        "event": [
          {
            "listen": "test",
            "script": {
              "exec": [
                "const response = pm.response.json();",
                "pm.test('Production batch created successfully', () => {",
                "  pm.expect(pm.response.code).to.equal(201);",
                "  pm.expect(response.production_batch_id).to.exist;",
                "});"
              ],
              "type": "text/javascript"
            }
          }
        ],
        "request": {
          "method": "POST",
          "header": [
            {
              "key": "Authorization",
              "value": "Bearer {{employeeAccessToken}}",
              "type": "text"
            }
          ],
          "body": {
            "mode": "raw",
            "raw": "{\n  \"template_id\": 1,\n  \"quantity\": 100\n}",
            "options": {
              "raw": {
                "language": "json"
              }
            }
          },
          "url": {
            "raw": "{{baseUrl}}/production-batches",
            "host": ["{{baseUrl}}"],
            "path": ["production-batches"]
          },
          "description": "Create a new production batch"
        },
        "response": []
      },
      {
        "name": "Get Production Batch by ID",
        "event": [
          {
            "listen": "test",
            "script": {
              "exec": [
                "const response = pm.response.json();",
                "pm.test('Production batch retrieved successfully', () => {",
                "  pm.expect(pm.response.code).to.equal(200);",
                "  pm.expect(response.production_batch_id).to.exist;",
                "});"
              ],
              "type": "text/javascript"
            }
          }
        ],
        "request": {
          "method": "GET",
          "header": [
            {
              "key": "Authorization",
              "value": "Bearer {{employeeAccessToken}}",
              "type": "text"
            }
          ],
          "url": {
            "raw": "{{baseUrl}}/production-batches/:batchId",
            "host": ["{{baseUrl}}"],
            "path": ["production-batches", ":batchId"],
            "variable": [
              {
                "key": "batchId",
                "value": "1",
                "description": "ID of the production batch"
              }
            ]
          },
          "description": "Get details of a specific production batch by ID"
        },
        "response": []
      },
      {
        "name": "Update Production Batch",
        "event": [
          {
            "listen": "test",
            "script": {
              "exec": [
                "const response = pm.response.json();",
                "pm.test('Production batch updated successfully', () => {",
                "  pm.expect(pm.response.code).to.equal(200);",
                "  pm.expect(response.production_batch_id).to.exist;",
                "});"
              ],
              "type": "text/javascript"
            }
          }
        ],
        "request": {
          "method": "PUT",
          "header": [
            {
              "key": "Authorization",
              "value": "Bearer {{employeeAccessToken}}",
              "type": "text"
            }
          ],
          "body": {
            "mode": "raw",
            "raw": "{\n  \"template_id\": 1,\n  \"quantity\": 150,\n  \"status\": \"in_progress\"\n}",
            "options": {
              "raw": {
                "language": "json"
              }
            }
          },
          "url": {
            "raw": "{{baseUrl}}/production-batches/:batchId",
            "host": ["{{baseUrl}}"],
            "path": ["production-batches", ":batchId"],
            "variable": [
              {
                "key": "batchId",
                "value": "1",
                "description": "ID of the production batch to update"
              }
            ]
          },
          "description": "Update details of an existing production batch"
        },
        "response": []
      },
      {
        "name": "Delete Production Batch",
        "event": [
          {
            "listen": "test",
            "script": {
              "exec": [
                "pm.test('Production batch deleted successfully', () => {",
                "  pm.expect(pm.response.code).to.equal(204);",
                "});"
              ],
              "type": "text/javascript"
            }
          }
        ],
        "request": {
          "method": "DELETE",
          "header": [
            {
              "key": "Authorization",
              "value": "Bearer {{employeeAccessToken}}",
              "type": "text"
            }
          ],
          "url": {
            "raw": "{{baseUrl}}/production-batches/:batchId",
            "host": ["{{baseUrl}}"],
            "path": ["production-batches", ":batchId"],
            "variable": [
              {
                "key": "batchId",
                "value": "1",
                "description": "ID of the production batch to delete"
              }
            ]
          },
          "description": "Delete a production batch from the system"
        },
        "response": []
      }
    ]
  }
]

