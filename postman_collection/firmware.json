[
  {
    "name": "Firmware",
    "item": [
      {
        "name": "Create Firmware",
        "event": [
          {
            "listen": "test",
            "script": {
              "exec": [
                "const response = pm.response.json();",
                "pm.test('Firmware created successfully', () => {",
                "  pm.expect(pm.response.code).to.equal(201);",
                "  pm.expect(response.firmware_id).to.exist;",
                "});"
              ],
              "type": "text/javascript",
              "packages": {}
            }
          }
        ],
        "request": {
          "method": "POST",
          "header": [
            {
              "key": "Authorization",
              "value": "Bearer {{employeeAccessToken}}",
              "type": "text"
            }
          ],
          "body": {
            "mode": "raw",
            "raw": "{\n  \"version\": \"1.0.0\",\n  \"file_path\": \"/firmware/v1.0.0.bin\",\n  \"template_id\": 1,\n  \"is_mandatory\": true,\n  \"note\": \"Initial firmware release\"\n}",
            "options": {
              "raw": {
                "language": "json"
              }
            }
          },
          "url": {
            "raw": "{{baseUrl}}/firmwares",
            "host": ["{{baseUrl}}"],
            "path": ["firmwares"]
          }
        },
        "response": []
      },
      {
        "name": "Update Firmware",
        "event": [
          {
            "listen": "test",
            "script": {
              "exec": [
                "const response = pm.response.json();",
                "pm.test('Firmware updated successfully', () => {",
                "  pm.expect(pm.response.code).to.equal(200);",
                "  pm.expect(response.firmware_id).to.exist;",
                "});"
              ],
              "type": "text/javascript",
              "packages": {}
            }
          }
        ],
        "request": {
          "method": "PUT",
          "header": [
            {
              "key": "Authorization",
              "value": "Bearer {{employeeAccessToken}}",
              "type": "text"
            }
          ],
          "body": {
            "mode": "raw",
            "raw": "{\n  \"version\": \"1.0.1\",\n  \"file_path\": \"/firmware/v1.0.1.bin\",\n  \"is_mandatory\": false,\n  \"is_approved\": true,\n  \"tested_at\": \"2025-05-20T12:00:00Z\",\n  \"note\": \"Updated firmware release\"\n}",
            "options": {
              "raw": {
                "language": "json"
              }
            }
          },
          "url": {
            "raw": "{{baseUrl}}/firmwares/:firmwareId",
            "host": ["{{baseUrl}}"],
            "path": ["firmwares", ":firmwareId"],
            "variable": [
              {
                "key": "firmwareId",
                "value": "1"
              }
            ]
          }
        },
        "response": []
      },
      {
        "name": "Delete Firmware",
        "event": [
          {
            "listen": "test",
            "script": {
              "exec": [
                "pm.test('Firmware deleted successfully', () => {",
                "  pm.expect(pm.response.code).to.equal(204);",
                "});"
              ],
              "type": "text/javascript",
              "packages": {}
            }
          }
        ],
        "request": {
          "method": "DELETE",
          "header": [
            {
              "key": "Authorization",
              "value": "Bearer {{employeeAccessToken}}",
              "type": "text"
            }
          ],
          "url": {
            "raw": "{{baseUrl}}/firmwares/:firmwareId",
            "host": ["{{baseUrl}}"],
            "path": ["firmwares", ":firmwareId"],
            "variable": [
              {
                "key": "firmwareId",
                "value": "1"
              }
            ]
          }
        },
        "response": []
      },
      {
        "name": "Get Firmware by ID",
        "event": [
          {
            "listen": "test",
            "script": {
              "exec": [
                "const response = pm.response.json();",
                "pm.test('Firmware retrieved successfully', () => {",
                "  pm.expect(pm.response.code).to.equal(200);",
                "  pm.expect(response.firmware_id).to.exist;",
                "});"
              ],
              "type": "text/javascript",
              "packages": {}
            }
          }
        ],
        "request": {
          "method": "GET",
          "header": [
            {
              "key": "Authorization",
              "value": "Bearer {{employeeAccessToken}}",
              "type": "text"
            }
          ],
          "url": {
            "raw": "{{baseUrl}}/firmwares/:firmwareId",
            "host": ["{{baseUrl}}"],
            "path": ["firmwares", ":firmwareId"],
            "variable": [
              {
                "key": "firmwareId",
                "value": "1"
              }
            ]
          }
        },
        "response": []
      },
      {
        "name": "Get All Firmwares",
        "event": [
          {
            "listen": "test",
            "script": {
              "exec": [
                "const response = pm.response.json();",
                "pm.test('Firmwares retrieved successfully', () => {",
                "  pm.expect(pm.response.code).to.equal(200);",
                "  pm.expect(response).to.be.an('array');",
                "});"
              ],
              "type": "text/javascript",
              "packages": {}
            }
          }
        ],
        "request": {
          "method": "GET",
          "header": [
            {
              "key": "Authorization",
              "value": "Bearer {{employeeAccessToken}}",
              "type": "text"
            }
          ],
          "url": {
            "raw": "{{baseUrl}}/firmwares",
            "host": ["{{baseUrl}}"],
            "path": ["firmwares"]
          }
        },
        "response": []
      }
    ]
  }
]